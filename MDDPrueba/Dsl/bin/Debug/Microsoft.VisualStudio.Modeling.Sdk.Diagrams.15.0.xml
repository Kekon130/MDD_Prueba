<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Modeling.Sdk.Diagrams.15.0</name>
    </assembly>
    <members>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Enabled">
            <summary>
            The atom is present. CodeMarkers are enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Disabled">
            <summary>
            The atom is not present, but InitPerformanceDll has not yet been called.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.DisabledDueToDllImportException">
            <summary>
            Disabled because the CodeMarkers transport DLL could not be found or
            an import failed to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.Performance.CodeMarkers.IsEnabled">
            <summary>
            Are CodeMarkers enabled? Note that even if IsEnabled returns false, CodeMarkers
            may still be enabled later in another component.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarker(System.Int32)">
            <summary>
            Sends a code marker event
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Byte[])">
            <summary>
            Sends a code marker event with additional user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="aBuff">User data buffer. May not be null.</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
            <exception cref="T:System.ArgumentNullException">aBuff was null</exception>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.SetStateDLLException">
            <summary>
            Used by ManagedPerfTrack.cs to report errors accessing the DLL.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Guid)">
            <summary>
            Sends a code marker event with additional Guid user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="guidData">The additional Guid to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.String)">
            <summary>
            Sends a code marker event with additional String user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="stringData">The additional String to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.StringToBytesZeroTerminated(System.String)">
            <summary>
            Converts a string into a byte buffer including a zero terminator (needed for proper ETW message formatting)
            </summary>
            <param name="stringData">String to be converted to bytes</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt32)">
            <summary>
            Sends a code marker event with additional DWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="uintData">The additional DWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt64)">
            <summary>
            Sends a code marker event with additional QWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="ulongData">The additional QWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.UsePrivateCodeMarkers(System.String,Microsoft.Win32.RegistryView)">
            <summary>
            Checks the registry to see if code markers are enabled
            </summary>
            <param name="regRoot">The registry root</param>
            <param name="registryView">The registry view.</param>
            <returns>Whether CodeMarkers are enabled in the registry</returns>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerStartEnd">
            <summary>
            Use CodeMarkerStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerExStartEnd">
            <summary>
            Use CodeMarkerExStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.InvisibleCollapseFlags">
            <summary>
             The flags to determine the how the shapeField collapses when it is set to be invisible
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.InvisibleCollapseFlags.None">
            <summary>
             Not to collapse
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.InvisibleCollapseFlags.HorizontallyToLeft">
            <summary>
            Collapse Horizontally to Left
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.InvisibleCollapseFlags.HorizontallyToRight">
            <summary>
            Collapse Horizontally to Right
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.InvisibleCollapseFlags.VerticallyToTop">
            <summary>
            Collapse Vertically to Top
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.InvisibleCollapseFlags.VerticallyToBottom">
            <summary>
            Collapse Vertically to Bottom
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.InvisibleCollapseFlags.HorizontallyToCenter">
            <summary>
            Collapse Horizontally to Center
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.InvisibleCollapseFlags.VerticallyToCenter">
            <summary>
            Collapse Vertically to Center
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior">
            <summary>
            Describes how the ShapeField should position and size 
            itself as the parent NodeShape moves and resizes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.MinimumHeight">
            <summary>
            Gets or sets the minimum height in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.MinimumHeightInLines">
            <summary>
            Gets or sets the minimum number of lines of text for
            this shape field.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.HasTopAnchor">
            <summary>
            Gets a value indicating whether a top anchor has been specified.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.HasBottomAnchor">
            <summary>
            Gets a value indicating whether a bottom anchor has been specified.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.HasLeftAnchor">
            <summary>
            Gets a value indicating whether a left anchor has been specified.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.HasRightAnchor">
            <summary>
            Gets a value indicating whether a right anchor has been specified.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Clear">
            <summary>
            Clears that currently set AnchorTargets and Suspensions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.ClearBottomAnchor">
            <summary>
            Clears the bottom archor targets.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.ClearRightAnchor">
            <summary>
            Clears the right archor targets.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetLeftAnchor(Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's left side to a particular side of the parent Shape.
            </summary>
            <param name="side">The side of the parent ShapeElement to anchor to.</param>
            <param name="margin">The margin (in world units) between the ShapeField's left side and the specified side of the parent ShapeElement.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetLeftAnchor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's left side to a particular side of a sibling ShapeField.
            </summary>
            <param name="sibling">The sibling ShapeField to anchor to.</param>
            <param name="side">The side of the sibling ShapeField to anchor to.</param>
            <param name="margin">The margin (in world units) between the ShapeField's left side and the specified side of the sibling ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetLeftAnchor(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's left side to a particular side of a sibling ShapeElement.
            </summary>
            <param name="sibling">The sibling NodeShape to anchor to.</param>
            <param name="side">The side of the sibling ShapeElement to anchor to.</param>
            <param name="margin">The margin (in world units) between the ShapeField's left side and the specified side of the sibling ShapeElement.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetLeftAnchor(System.Double)">
            <summary>
            Anchors the ShapeField's left side to the vertical line which is
            a distance of [parent ShapeElement's width multiplied by percentage]
            relative to the parent ShapeElement's left side.
            </summary>
            <param name="percentage">The percentage of the parent ShapeElement's width that will define the vertical line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetLeftAnchor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,System.Double)">
            <summary>
            Anchors the ShapeField's left side to the vertical line which is
            a distance of [sibling ShapeField's width multiplied by percentage]
            relative to the sibling ShapeField's left side.
            </summary>
            <param name="sibling">The sibling ShapeField whose width will be considered 100%.</param>
            <param name="percentage">The percentage of the sibling ShapeField's width that will define the vertical line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetLeftAnchor(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,System.Double)">
            <summary>
            Anchors the ShapeField's left side to the vertical line which is
            a distance of [sibling NodeShape's width multiplied by percentage]
            relative to the sibling NodeShape's left side.
            </summary>
            <param name="sibling">The sibling NodeShape whose width will be considered 100%.</param>
            <param name="percentage">The percentage of the sibling ShapeElement's width that will define the vertical line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetRightAnchor(Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's right side to a particular side of the parent ShapeElement.
            </summary>
            <param name="side">The side of the parent ShapeElement to anchor to.</param>
            <param name="margin">The margin (in world units) between the ShapeField's right side and the specified side of the parent ShapeElement.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetRightAnchor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's right side to a particular side of a sibling ShapeField.
            </summary>
            <param name="sibling">The sibling ShapeField to anchor to.</param>
            <param name="side">The side of the sibling ShapeField to anchor to.</param>
            <param name="margin">The margin (in world units) between the ShapeField's right side and the specified side of the sibling ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetRightAnchor(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's right side to a particular side of a sibling NodeShape.
            </summary>
            <param name="sibling">The sibling NodeShape to anchor to.</param>
            <param name="side">The side of the sibling NodeShape to anchor to.</param>
            <param name="margin">The margin (in world units) between the ShapeField's right side and the specified side of the sibling ShapeElement.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetRightAnchor(System.Double)">
            <summary>
            Anchors the ShapeField's right side to the vertical line which is
            a distance of [parent ShapeElement's width multiplied by percentage]
            relative to the parent ShapeElement's left side.
            </summary>
            <param name="percentage">The percentage of the parent ShapeElement's width that will define the vertical line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetRightAnchor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,System.Double)">
            <summary>
            Anchors the ShapeField's right side to the vertical line which is
            a distance of [sibling ShapeField's width multiplied by percentage]
            relative to the sibling ShapeField's left side.
            </summary>
            <param name="sibling">The sibling ShapeField whose width will be considered 100%.</param>
            <param name="percentage">The percentage of the sibling ShapeField's width that will define the vertical line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetRightAnchor(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,System.Double)">
            <summary>
            Anchors the ShapeField's right side to the vertical line which is
            a distance of [sibling NodeShape's width multiplied by percentage]
            relative to the sibling NodeShape's left side.
            </summary>
            <param name="sibling">The sibling NodeShape whose width will be considered 100%.</param>
            <param name="percentage">The percentage of the sibling NodeShape's width that will define the vertical line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetTopAnchor(Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's top side to a particular side of the parent ShapeElement.
            </summary>
            <param name="side">The side of the parent ShapeElement to anchor to.</param>
            <param name="margin">The margin (in world units) between the ShapeField's top side and the specified side of the parent ShapeElement.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetTopAnchor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's top side to a particular side of a sibling ShapeField.
            </summary>
            <param name="sibling">The sibling ShapeField to anchor to.</param>
            <param name="side">The side of the sibling ShapeField to anchor to.</param>
            <param name="margin">The margin (in world units) between the ShapeField's top side and the specified side of the sibling ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetTopAnchor(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's top side to a particular side of a sibling NodeShape.
            </summary>
            <param name="sibling">The sibling NodeShape to anchor to.</param>
            <param name="side">The side of the sibling NodeShape to anchor to.</param>
            <param name="margin">The margin (in world units) between the NodeShapeField's top side and the specified side of the sibling NodeShape.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetTopAnchor(System.Double)">
            <summary>
            Anchors the ShapeField's top side to the horizontal line which is
            a distance of [parent ShapeElement's height multiplied by percentage]
            relative to the parent ShapeElement's top side.
            </summary>
            <param name="percentage">The percentage of the parent ShapeElement's height that will define the horizontal line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetTopAnchor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,System.Double)">
            <summary>
            Anchors the ShapeField's top side to the horizontal line which is
            a distance of [sibling ShapeField's height multiplied by percentage]
            relative to the sibling ShapeField's top side.
            </summary>
            <param name="sibling">The sibling ShapeField whose height will be considered 100%.</param>
            <param name="percentage">The percentage of the sibling ShapeField's height that will define the horizontal line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetTopAnchor(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,System.Double)">
            <summary>
            Anchors the ShapeField's top side to the horizontal line which is
            a distance of [sibling NodeShape's height multiplied by percentage]
            relative to the sibling NodeShape's top side.
            </summary>
            <param name="sibling">The sibling NodeShape whose height will be considered 100%.</param>
            <param name="percentage">The percentage of the sibling NodeShape's height that will define the horizontal line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetBottomAnchor(Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's bottom side to a particular side of the parent ShapeElement.
            </summary>
            <param name="side">The side of the parent ShapeElement to anchor to.</param>
            <param name="margin">The margin (in world units) between the ShapeField's bottom side and the specified side of the parent ShapeElement.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetBottomAnchor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's bottom side to a particular side of a sibling ShapeField.
            </summary>
            <param name="sibling">The sibling ShapeField to anchor to.</param>
            <param name="side">The side of the sibling ShapeField to anchor to.</param>
            <param name="margin">The margin (in world units) between the ShapeField's bottom side and the specified side of the sibling ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetBottomAnchor(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.Edge,System.Double)">
            <summary>
            Anchors the ShapeField's bottom side to a particular side of a sibling NodeShape.
            </summary>
            <param name="sibling">The sibling NodeShape to anchor to.</param>
            <param name="side">The side of the sibling NodeShape to anchor to.</param>
            <param name="margin">The margin (in world units) between the ShapeField's bottom side and the specified side of the sibling NodeShape.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetBottomAnchor(System.Double)">
            <summary>
            Anchors the ShapeField's bottom side to the horizontal line which is
            a distance of [parent ShapeElement's height multiplied by percentage]
            relative to the parent ShapeElement's top side.
            </summary>
            <param name="percentage">The percentage of the parent ShapeElement's height that will define the horizontal line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetBottomAnchor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,System.Double)">
            <summary>
            Anchors the ShapeField's bottom side to the horizontal line which is
            a distance of [sibling ShapeField's height multiplied by percentage]
            relative to the sibling ShapeField's top side.
            </summary>
            <param name="sibling">The sibling ShapeField whose height will be considered 100%.</param>
            <param name="percentage">The percentage of the sibling ShapeField's height that will define the horizontal line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchoringBehavior.SetBottomAnchor(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,System.Double)">
            <summary>
            Anchors the ShapeField's bottom side to the horizontal line which is
            a distance of [sibling NodeShape's height multiplied by percentage]
            relative to the sibling NodeShape's top side.
            </summary>
            <param name="sibling">The sibling NodeShape whose height will be considered 100%.</param>
            <param name="percentage">The percentage of the sibling NodeShape's height that will define the horizontal line to anchor to. (1.0 is 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPoint.GetAccessibilityObject(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Gets the AccessibleObject assigned to the AnchorPoint.
            </summary>
            <param name="linkShape">The LinkShape that the AnchorPoint belongs to.</param>
            <param name="segment">The LineSegment that the AnchorPoint belongs to.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPoint.GetSelectable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment)">
            <summary>
            Returns a value indicating whether this anchor point is selectable.
            </summary>
            <param name="parentShape">The LinkShape that the AnchorPoint belongs to.</param>
            <param name="segment">The LineSegment that the AnchorPoint belongs to.</param>
            <returns>true if this anchor point is selectable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPoint.GetFocusable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment)">
            <summary>
            Returns a value indicating whether this anchor point is focusable.
            </summary>
            <param name="parentShape">The LinkShape that the AnchorPoint belongs to.</param>
            <param name="segment">The LineSegment that the AnchorPoint belongs to.</param>
            <returns>true if this anchor point is focusable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPoint.Equals(System.Object)">
            <summary>
            Gets a value indicating whether two AnchorPoint objects are equal.
            </summary>
            <param name="obj">The AnchorPoint that is compared with this AnchorPoint.</param>
            <returns>true if the AnchorPoint objects are equal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPoint.GetHashCode">
            <summary>
            Gets a hash code for this AnchorPoint.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,Microsoft.VisualStudio.Modeling.Diagrams.AnchorPoint,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the AnchorPointAccessibleObject
            </summary>
            <param name="linkShape">The LinkShape that the AnchorPoint belongs to.</param>
            <param name="segment">The LineSegment that the AnchorPoint belongs to.</param>
            <param name="anchorPoint">The anchor point.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.Name">
            <summary>
            Gets or sets the object name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.Description">
            <summary>
            Gets a string that describes the visual appearance 
            of the specified object. Not all objects have a description.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.Role">
            <summary>
            Gets the role of this accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="direction">One of the AccessibleNavigation values.</param>
            <returns>An AccessibleObject that represents one of the AccessibleNavigation values.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
            <summary>
            Modifies the selection or moves the keyboard focus of the accessible object.
            </summary>
            <param name="flags">One of the AccessibleSelection values.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.State">
            <summary>
            Gets the state of this accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAccessibleObject.KeyboardShortcut">
            <summary>
            Gets the shortcut key or access key for the accessible object.
            </summary>
            <value>The shortcut key or access key for the accessible object.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAction">
            <summary>
            The MouseAction that manually routes LinkShapes by manipulating their LineSegments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Initializes a new instance of the ManualRouteAction class.
            </summary>
            <param name="diagram">The diagram object that owns this MouseAction.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAction.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Saves the starting mouse position.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAction.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Invalidates the old and new feedback.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAction.DoPaintFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Draws the manual routing feedback.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAction.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor to display at the specified mouse position.
            </summary>
            <param name="currentCursor">The existing cursor.</param>
            <param name="diagramClientView">The DiagramClientView requesting the cursor.</param>
            <param name="mousePosition">The cursor position in world units relative to the top-left of the diagram.</param>
            <returns>The cursor to display at the specified mouse position.</returns>
            <remarks>
            This method is called by the DiagramClientView if this MouseAction is active or
            if it is the potential MouseAction.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAction.OnDiagramLostFocus(Microsoft.VisualStudio.Modeling.Diagrams.LostFocusEventArgs)">
            <summary>
            Cancels the MouseAction.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAction.OnDragCompleted(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Performs the manual route.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAction.OnMouseActionCanceled(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Invalidates the old feedback.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAction.FindSegment(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Finds the segment at the specified mouse point.
            </summary>
            <param name="linkShape">LinkShape to look for the segment in.</param>
            <param name="diagramClientView">The DiagramClientView requesting the cursor.</param>
            <param name="mousePt">Current mouse position.</param>
            <returns>LineSegment that the mouse is currently over.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AnchorPointAction.HasAnchorPointChanged(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Tests whether the AnchorPoint will be changed if it's moved to the 
            specified position.
            </summary>
            <param name="currentPosition">proposed new position of line segment.</param>
            <returns>true means that will cause a change in line segment; false means it won't.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo">
            <summary>
            Class that provides info about a domain property associated with a ShapeField.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo.#ctor(System.Guid)">
            <summary>
            Create a AssociatedPropertyInfo that points at a property on the ModelElement associated with the PresentationElement that the ShapeField is hosted on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo.#ctor(System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.PresentationDomainNavigator,Microsoft.VisualStudio.Modeling.Diagrams.DomainPresentationNavigator)">
            <summary>
            Create an AssociatedPropertyInfo that points at a property on a ModelElement somewhere in the model.  The given delegates
            are used to navigate to/from the shape to this element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo.PropertyId">
            <summary>
            Domain property identifier.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo.PresentationDomainNavigator">
            <summary>
            Delegate used to navigate from the presentation element displaying the shape field to the element in the domain model containing the property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo.DomainPresentationNavigator">
            <summary>
            Delegate used to navigate from the element in the domain model containing the property to the presentation element displaying the shape field.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo.IsShapeProperty">
            <summary>
            True if the property exists directly on the shape itself, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo.FilteringValues">
            <summary>
            A list of filtering values associated with this property.
            Used for ShapeField visibility property associations.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty">
            <summary>
            An AssociatedProperty is a property that a ShapeField is mapped to on some object
            along with optional delegates to methods which will navigate from the PresentationElement hosting that ShapeField
            to the ModelElement with the property on it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.storeDataMap">
            <summary>
            This association can be set up for multiple Stores
            </summary>
            <remarks>
            GarethJ: I'm not really sure if anyone uses this facility but I won't remove it for now.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.#ctor(Microsoft.VisualStudio.Modeling.Store,System.Guid)">
            <summary>
            Create an AssociatedProperty that points at a property on the ModelElement associated with the PresentationElement that the ShapeField is hosted on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.#ctor(Microsoft.VisualStudio.Modeling.Store,System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.PresentationDomainNavigator,Microsoft.VisualStudio.Modeling.Diagrams.DomainPresentationNavigator)">
            <summary>
            Create an AssociatedProperty that points at a property on a MEL somewhere in the model.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo)">
            <summary>
            Create an AssociatedProperty from the given info.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.cachedAssociatedPropertiesList">
            <summary>
            TODO: this cache should be moved to diagram when per-diagram shape field are implemented.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.Associate(Microsoft.VisualStudio.Modeling.Store)">
            <summary>
            Establish the association between the ShapeField and the IMS Property for the specified Store
            </summary>
            <remarks>
            This is Store based rather than Partition based as the association is quite likely to cross Partitions.
            </remarks>
            <param name="store"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.SetFilteringValues(System.Collections.ICollection)">
            <summary>
            Associates a collection of filtering values with this property.  GetValue compares the value
            of the property retrieved against the values in this set, and returns true if there is a match.
            Used to implement ShapeField visibility property associations.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the value of this property on the specified ShapeElement.
            </summary>
            <param name="parentShape">The ShapeElement the property is on.</param>
            <returns>The value of this property on the specified ShapeElement.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Object)">
            <summary>
            Sets the value of this property on the specified shape element.
            </summary>
            <param name="parentShape">The ShapeElement the property is on.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.GetModelElement(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the model element that owns the associated property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.GetPresentationElements(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Given the model element that owns the associated property, gets the presentation elements mapped to it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.GetDomainPropertyInfo(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the property info for this IMS property.
            </summary>
            <param name="parentShape">The ShapeElement the property is on.</param>
            <returns>The property info for this IMS property.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.GetStoreAssocationData(Microsoft.VisualStudio.Modeling.Store)">
            <summary>
            Get per-store data
            </summary>
            <param name="store"></param>
            <returns>Association data for the given store or null if it is not yet created</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.GetStoreAssocationData(Microsoft.VisualStudio.Modeling.Store,System.Boolean)">
            <summary>
            Get and if necessary create and initialize per-store data
            </summary>
            <param name="store"></param>
            <param name="createIfNeeded"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.OnPropertyChanged(System.Object,Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            Handle the property on the observed MEL changing
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.OnStoreDisposing(System.Object,System.EventArgs)">
            <summary>
            Unhook our association if the Store is going away.
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.Dispose">
            <summary>
            Implements the IDisposable.Dispose() method
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AssociatedIMSProperty.Dispose(System.Boolean)">
            <summary>
            Releases all resources, managed and unmanaged, related to this class.
            </summary>
            <param name="disposing">
            A value of true indicates that all resources
            (managed and unmanaged) should be disposed.
            A value of false indicates that Dispose has been called
            by the runtime from within the finalizer, so you should
            not reference other managed objects.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.StoreAssociationData">
            <summary>
            Class to hold the per-store property data for an association
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PropertyChangedEventArgs">
            <summary>
            A general property changed EventArgs used to notify shapes
            of both IMS property changes as well as CLR property changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the PropertyChangedEventArgs class.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PropertyChangedEventArgs.OldValue">
            <summary>
            Gets the old value of the property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PropertyChangedEventArgs.NewValue">
            <summary>
            Gets the new value of the property.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.AutoFixupContext">
            <summary>
            Provides methods to add and retrieve auto fixup context 
            information to and from a particular transaction context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AutoFixupContext.AddAutoFixupContext(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Adds the AutoFixup context information to the specified 
            transaction for later use.
            </summary>
            <param name="transaction">The transaction in which to save the AutoFixup context.</param>
            <returns>Returns the instance of the AutoFixupData that was added to the transaction.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AutoFixupContext.HasAutoFixupContext(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Gets a value indicating whether any AutoFixup context is available 
            from the specified transaction.
            </summary>
            <param name="transaction">The transaction to check for the AutoFixup context.</param>
            <returns>
            true if AutoFixup context information is available from 
            the specified transaction.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AutoFixupContext.GetAutoFixupContext(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Gets the AutoFixupData from the specified transaction.
            </summary>
            <param name="transaction">The transaction to check for the drop target context.</param>
            <returns>The AutoFixupData for the transaction.</returns>
            <remarks>
            Returns null if there is no AutoFixupData.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.AutoFixupData">
            <summary>
            Data class which holds the auto fixup information for the transaction context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AutoFixupData.ResizeParentCollection">
            <summary>
            Gets the resize parent shape collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AutoFixupData.ShapeAnchorCollection">
            <summary>
            Gets the shape achoring shapes collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AutoFixupData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BoundsRules">
            <summary>
            Rules that constrain where the child can be located and how it can be sized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BoundsRules.GetCompliantBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns the compliant bounds in world units relative to the top-left of the parent using this bounds rule.
            </summary>
            <param name="shape">The shape whose proposed bounds are to be checked for compliance with this bounds rule.</param>
            <param name="proposedBounds">The proposed bounds in world units relative to the top-left of the shape's parent.</param>
            <returns>The compliant bounds in world units relative to the top-left of the parent using this bounds rule.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DefaultBoundsRules">
            <summary>
            Basic rules that constrain the child based on Snap-To-Grid and anchoring.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DefaultBoundsRules.Instance">
            <summary>
            Gets the public Instance accessor for the singleton
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultBoundsRules.GetCompliantBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns the compliant bounds in world units relative to the top-left of the parent using this bounds rule.
            </summary>
            <param name="shape">The shape whose proposed bounds are to be checked for compliance with this bounds rule.</param>
            <param name="proposedBounds">The proposed bounds in world units relative to the top-left of the shape's parent.</param>
            <returns>The compliant bounds in world units relative to the top-left of the parent using this bounds rule.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.KeepInParentRule">
            <summary>
            A Bounds rule that keeps the shape within the boundary of the diagram.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.KeepInParentRule.#ctor">
            <summary>
            Initializes a new instance of the KeepInDiagramRule class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.KeepInParentRule.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.KeepInParentRule.GetCompliantBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns the compliant bounds in world units relative to the top-left of the parent using this bounds rule.
            </summary>
            <param name="shape">The shape whose proposed bounds are to be checked for compliance with this bounds rule.</param>
            <param name="proposedBounds">The proposed bounds in world units relative to the top-left of the shape's parent.</param>
            <returns>The compliant bounds in world units relative to the top-left of the parent using this bounds rule.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.KeepInParentRule.GetMargin(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the minimum margin in world units between the shape and the diagram boundary.
            </summary>
            <param name="shape">The shape whose bounds is being checked for compliance.</param>
            <returns>The minimum margin in world units between the shape and the diagram boundary.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SnapToGridRule">
            <summary>
            Snap-to-grid rules that constrain the ShapeElement's position and/or size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SnapToGridRule.GetCompliantChildBounds(System.Double,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,System.Boolean,System.Boolean,Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Gets the compliant bounds of the child shape given the grid size it is on
            and the proposed bounds of the child shape.
            </summary>
            <param name="gridSize">The size of the grid that the child shape is on.</param>
            <param name="proposedChildBounds">The proposed bounds of the child shape.</param>
            <param name="resizeHorizontal"> Bool indicating if width of shape can be resized to fit to the grid</param>
            <param name="resizeVertical"> Bool indicating if height of shape can be resized to fit to the grid</param>
            <param name="minimumSize"> Minimum size required</param>
            <returns>The compliant bounds of the child shape.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GroupBoundsRules">
            <summary>
            Rules that constrain the overall bounds of a group of shapes as a whole.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GroupBoundsRules.GetCompliantGroupBounds(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Updates the GhostShapeCollection so that it complies with
            this GroupBoundsRules after the proposed location
            delta is applied.
            </summary>
            <param name="store">The store containing the ShapeElements that the ghost shapes refer to.</param>
            <param name="targetShape">
            The target parent shape if the source shapes are being reparented 
            or duplicated.  This parameter can be null, in which case the 
            source shapes are being repositioned.
            </param>
            <param name="ghostShapes">
            A collection of ghost shapes which describe ShapeElements 
            prior to the proposed location delta.
            This method should modify the ghost shape properties such 
            that the properties are compliant with this rule after 
            the proposed location delta is applied.
            </param>
            <param name="proposedLocationDelta">
            The proposed location delta in world units 
            to apply to each shape in the group.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DefaultGroupBoundsRules">
            <summary>
            Rules which constrain the position of 
            a group of shapes when the group is repositioned.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultGroupBoundsRules.#ctor">
            <summary>
            Initializes a new instance of the DefaultGroupBoundsRules class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DefaultGroupBoundsRules.Instance">
            <summary>
            Gets a singleton instance of the default GroupBoundsRules.  
            The default includes the KeepGroupWithinParentRule and
            GroupSnapToGridRule.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultGroupBoundsRules.GetCompliantGroupBounds(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Updates the GhostShapeCollection so that it complies with
            this GroupBoundsRules after the proposed location
            delta is applied.
            </summary>
            <param name="store">
            The store containing the ShapeElements that the ghost shapes refer to.
            </param>
            <param name="targetShape">
            The target parent shape if the source shapes are being reparented 
            or duplicated.  This parameter can be null, in which case the 
            source shapes are being repositioned.
            </param>
            <param name="ghostShapes">
            A collection of ghost shapes which describe ShapeElements 
            prior to the proposed location delta.
            This method should modify the ghost shape properties such 
            that the properties are compliant with this rule after 
            the proposed location delta is applied.
            </param>
            <param name="proposedLocationDelta">
            The proposed location delta in world units 
            to apply to each shape in the group.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GroupSnapToGridRule">
            <summary>
            A GroupBoundsRule which constrains the overall 
            bounds of a group of child shapes such that 
            the primary shape's location snaps to the grid 
            if the grid is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GroupSnapToGridRule.#ctor">
            <summary>
            Initializes a new instance of the GroupSnapToGridRule class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GroupSnapToGridRule.Instance">
            <summary>
            Gets a singleton instance of the GroupSnapToGridRule.  
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GroupSnapToGridRule.GetCompliantGroupBounds(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Updates the GhostShapeCollection so that it complies with
            this GroupBoundsRules after the proposed location
            delta is applied.
            </summary>
            <param name="store">The store containing the ShapeElements that the ghost shapes refer to.</param>
            <param name="targetShape">
            The target parent shape if the source shapes are being reparented 
            or duplicated.  This parameter can be null, in which case the 
            source shapes are being repositioned.
            </param>
            <param name="ghostShapes">
            A collection of ghost shapes which describe ShapeElements 
            prior to the proposed location delta.
            This method should modify the ghost shape properties such 
            that the properties are compliant with this rule after 
            the proposed location delta is applied.
            </param>
            <param name="proposedLocationDelta">
            The proposed location delta in world units 
            to apply to each shape in the group.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.KeepGroupWithinParentRule">
            <summary>
            A GroupBoundsRule which will constrain the overall bounds of a group of child 
            shapes so that it remains below and to the right of the top and left 
            boundaries of the parent shape.  The right and bottom side of the parent
            shape will not constrain the child shapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.KeepGroupWithinParentRule.#ctor">
            <summary>
            Initializes a new instance of the KeepGroupWithinParentRule class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.KeepGroupWithinParentRule.Instance">
            <summary>
            Gets the rule which constrains the bounds for a group of shapes such that
            the bounds fits within the boundaries of the parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.KeepGroupWithinParentRule.GetCompliantGroupBounds(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Updates the GhostShapeCollection so that it complies with
            this GroupBoundsRules after the proposed location
            delta is applied.
            
            This GroupBoundsRule will constrain the overall bounds of a group of child 
            shapes so that it remains below and to the right of the top and left 
            boundaries of the current parent shape.  The right and bottom side of the parent
            shape will not constrain the child shapes.
            </summary>
            <param name="store">The store containing the ShapeElements that the ghost shapes refer to.</param>
            <param name="targetShape">
            (The target shape is ignored for this rule since this rule intends to constrain the group
            to its current parent shape's top and left boundaries.)
            </param>
            <param name="ghostShapes">
            A collection of ghost shapes which describe ShapeElements 
            prior to the proposed location delta.
            This method should modify the ghost shape properties such 
            that the properties are compliant with this rule after 
            the proposed location delta is applied.
            </param>
            <param name="proposedLocationDelta">
            The proposed location delta in world units 
            to apply to each shape in the group.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.KeepGroupWithinParentRule.InternalCalcCompliantGroupBounds(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Boolean,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Updates the GhostShapeCollection so that it complies with
            this GroupBoundsRules after the proposed location
            delta is applied.
            
            This GroupBoundsRule will constrain the overall bounds of a group of child 
            shapes so that it remains below and to the right of the top and left 
            boundaries of the current parent shape.  The right and bottom side of the parent
            shape will not constrain the child shapes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.KeepGroupWithinDiagramRule">
            <summary>
            A GroupBoundsRule which will constrain the overall bounds of a group of child 
            shapes so that it remains inside the target shape's diagram
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.KeepGroupWithinDiagramRule.#ctor">
            <summary>
            Initializes a new instance of the KeepGroupWithinParentRule class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.KeepGroupWithinDiagramRule.Instance">
            <summary>
            Gets the rule which constrains the bounds for a group of shapes such that
            the bounds fits within the boundaries of the parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.KeepGroupWithinDiagramRule.GetCompliantGroupBounds(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Updates the GhostShapeCollection so that it complies with
            this GroupBoundsRules after the proposed location
            delta is applied.
            
            This GroupBoundsRule will constrain the overall bounds of a group of child 
            shapes so that it remains below and to the right of the top and left 
            boundaries of the parent shape.  The right and bottom side of the parent
            shape will not constrain the child shapes.
            </summary>
            <param name="store">The store containing the ShapeElements that the ghost shapes refer to.</param>
            <param name="targetShape">
            The target parent shape if the source shapes are being reparented 
            or duplicated.  This parameter can be null, in which case the 
            source shapes are being repositioned.
            </param>
            <param name="ghostShapes">
            A collection of ghost shapes which describe ShapeElements 
            prior to the proposed location delta.
            This method should modify the ghost shape properties such 
            that the properties are compliant with this rule after 
            the proposed location delta is applied.
            </param>
            <param name="proposedLocationDelta">
            The proposed location delta in world units 
            to apply to each shape in the group.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PortMovementRule">
            <summary>
            Bounds rules for keeping ports on the perimeter of their parent shapes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PortMovementRule.Instance">
            <summary>
            Singleton accessor
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortMovementRule.GetCompliantBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Calculates the compliant bounds for the port perimeter.
            </summary>
            <param name="shape"></param>
            <param name="proposedBounds"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SnapToPerimeterFollowingRotationRule">
            <summary>
            Bounds rule for following the perimeter of a parent shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SnapToPerimeterFollowingRotationRule.Instance">
            <summary>
            Singleton accessor
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SnapToPerimeterFollowingRotationRule.GetCompliantBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Gets the appropriate location.
            </summary>
            <param name="shape"></param>
            <param name="proposedBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SnapToPerimeterFollowingRotationRule.GetShapePlacement(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            This method determines the edge of the parent, where the shape is being placed. 
            If the shape parameter is a Port, Port.GetChildPortPlacement is used.
            </summary>
            <param name="shape">the childShape. Its parent must be a NodeShape</param>
            <param name="shapeBounds">relative bounds of the childShape</param>
            <returns>PortPlacement of childShape on parentShape</returns>
            <exception>throws InvalidOperationException if there is no parentShape for shape argument or if
            the PortPlacement cannot be determined for unknown reasons.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.AvoidCornerRule">
            <summary>
            Bounds rule that doesn't allow you to place a port in the rounded corner 
            of a rectangle.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AvoidCornerRule.Instance(System.Double)">
            <summary>
            Singleton accessor.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AvoidCornerRule.Initialize(System.Double)">
            <summary>
            Initialize withthe appropriate corner size to avoid.
            </summary>
            <param name="initialCornerSize">Corner area to avoid.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AvoidCornerRule.GetCompliantBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Gets the appropriate position.
            </summary>
            <param name="shape"></param>
            <param name="proposedBounds"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NoBoundsRules">
            <summary>
            NoBoundsRules can be applied to ensure no restrictions are placed on the shape's bounds.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NoBoundsRules.Instance">
            <summary>
            An instance to share.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NoBoundsRules.GetCompliantBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Always accept the proposed bounds.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape">
            <summary>
            Base comment class.
            CommentShape defines an editable comment shape.
            </summary>
            <summary>
            DomainClass CommentShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.CommentShape
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.DefaultHeight">
            <summary>
            Gets/Sets default comment shape height.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.DefaultWidth">
            <summary>
            Gets/Sets default comment shape width.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.Rounded">
            <summary>
            Gets whether to use rounded geometry.  Just change this return
            to get rounded or rectangular behavior.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.defaultTextOffset">
            <summary>
            Default amount to offset text
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.Anchor(Microsoft.VisualStudio.Modeling.Diagrams.TextField)">
            <summary>
            Anchors based on rounded or rectangular geometry.
            </summary>
            <param name="labelField">The shape field to anchor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.InitializeShapeFields(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.ShapeField})">
            <summary>
            Creates and adds shape fields to this shape type.
            </summary>
            <param name="shapeFields">The shape fields collection for this shape type.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.FixedFlags">
            <summary>
            Gets the FixedFlags properties for a GraphNode.
            </summary>
            <remarks>
            Our base shape does not participate in placement, but we do.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.ChooseRelationship(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to get the type of relationship the
            child ShapeElement has to its parent.
            </summary>
            <param name="childShape">Child shape to be added to this shape.</param>
            <returns>The RelationshipType to create.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.AccessibleName">
            <summary>
            Gets the name of the shape used by accessibility client applications.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.AccessibleDescription">
            <summary>
            Gets the description of the shape used by accessibility client applications.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.ToolboxCaption">
            <summary>
            Gets the Toolbox caption for this shape.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.AutoSizeLabel(System.String)">
            <summary>
            Don't Automatically sizes this CommentShape based on the text that's passed in.
            </summary>
            <param name="labelText"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.ShapeGeometry">
            <summary>
            Gets the ShapeGeometry object associated with this ShapeElement.
            </summary>
            <value>Shape Geometry</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.ResizableSides">
            <summary>
            Gets the sides of this shape which can be resized by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.HasShadow">
            <summary>
            Shadow property
            </summary>
            <value>Has a Shadow</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.ZOrder">
            <summary>
            Gets the relative Z-Order for this ShapeElement.
            Makes sure that the comment stays above all other diagram elements
            </summary>
            <value>number for Z</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.GridSize">
            <summary>
            The comment shape by default is not confined to any grid.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.RelatedShapeToEmphasize">
            <summary>
            Returns null so that the parent shape doesn't get
            visually emphasized when this shape is selected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.InitializeResources(Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Initializes style set resources for this shape type
            </summary>
            <param name="classStyleSet">The style set for this shape class</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.DomainClassId">
            <summary>
            CommentShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeTypeDescriptor">
            <summary>
            Specialized type descriptor for the CommentShape class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor,Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Creates a new CommentShapeTypeDescriptor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeTypeDescriptor.GetDescription(Microsoft.VisualStudio.Modeling.Design.ElementPropertyDescriptor)">
            <summary>
            Description associated with the given property descriptor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeAddRule.ElementAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Called when a CommentShape is created.
            </summary>
            <param name="e">Argument to event</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Compartment">
            <summary>
            This is the base class for all compartments. Compartments are defined as having
            an expandable/collapseable header and a body. The basic header functionality 
            is implemented in this class. The implementation of the compartment body is
            done in derived classes.
            </summary>
            <summary>
            DomainClass Compartment
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Compartment
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.InitializeResources(Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Initialize resources for the shape based on the provided style set
            </summary>
            <param name="classStyleSet"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.InitializeShapeFields(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.ShapeField})">
            <summary>
            Adds the header to the compartment shape.
            </summary>
            <param name="shapeFields"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.HeaderTextField">
            <summary>
            The text field of the compartment header.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.HeaderBackgroundField">
            <summary>
            The text field of the compartment header.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.HeaderBounds">
            <summary>
            Gets the bounds of the header in world units relative to the top-left of this shape.
            </summary>
            <value>The bounds of the header in world units relative to the top-left of this shape.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.HeaderDisplayText">
            <summary>
            Gets the text of the header.
            </summary>
            <value>The text of the header.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.HeaderPlusMinusField">
            <summary>
            The expand/collapse field of the compartment header.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OnPaintSelection(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            The standard selection is not drawn.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.HasShadow">
            <summary>
            Specifies whether the compartment has shadow
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.HasOutline">
            <summary>
            Specifies whether the compartment has outline
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.HasHighlighting">
            <summary>
            Specifies whether the compartment has highlight
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.CanMove">
            <summary>
            Gets a value indicating whether the user is allowed to reposition the ShapeElement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.ResizableSides">
            <summary>
            Can this compartment be resized?
            Gets the sides of this shape which can be resized by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.BoundsRules">
            <summary>
            Returns bounds rules for the compartment
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.ExpandAll">
            <summary>
            Expands all of the shapes up the parent hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Overrides OnMouseDown to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OnMouseUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Overrides OnMouseUp to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OnClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Overrides OnClick to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OnDoubleClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called by the ShapeField's default OnDoubleClick() handler.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OnKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Overrides OnKeyDown to expand/collapse the compartment when the right/left
            key is pressed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OnKeyUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Overrides OnKeyUp to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OnKeyPress(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs)">
            <summary>
            Overrides OnKeyPress to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.CanExpandAndCollapse">
            <summary>
            Gets a value indicating whether this shape has a distinct collapsed and expanded state.
            This value must be set to true if the NodeShape's expand and collapse capabilities 
            are used.
            </summary>
            <value>true if this shape has a distinct collapsed and expanded state.</value>
            <remarks>
            This property is used by accessibility to determine whether this shape
            has an expanded state to report.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.Expand">
            <summary>
            Grows the Compartment to fit all of its fields.
            This can only be called from within a transaction.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.Collapse">
            <summary>
            Shrinks the Compartment to fit only its header text field.
            This can only be called from within a transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.MinimumSize">
            <summary>
            Gets the minimum size in world units.  
            The minimum width for a compartment shape is the base minimum width.
            The minimum height for a compartment shape is the collapsed height.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OnExpandCollapseButtonPressed(System.Object,Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonEventArgs)">
            <summary>
            Called when the expand/collapse button is pressed
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.UpdateSize">
            <summary>
            When overriden in a derived class, this method changes the size of the compartment based on its internal data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.InitializeFromDescription(Microsoft.VisualStudio.Modeling.Diagrams.CompartmentDescription)">
            <summary>
            Initializes this compartment from the CompartmentDescription properties.
            </summary>
            <param name="description">Description of compartment items.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.AllowCustomCompartmentFillColor">
            <summary>
            Gets or sets the variability for the compartment fill color.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.AllowCustomTitleFillColor">
            <summary>
            Gets or sets the variability for the title fill color.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.ForwardEventsToParent">
            <summary>
            Gets or sets whether DragDrop, Key, and Mouse events to this class should be forwarded to
            the parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OverrideStyles(Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Set the shape's styles into the given styleset
            </summary>
            <param name="styleset">Styleset that we're overriding.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleFillColorStorage">
            <summary>
            Gets or sets the title file color from custom storage.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.CompartmentFillColorStorage">
            <summary>
            Gets or sets the compartment fill color from custom storage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OnDragOver(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Forwards OnDragOver message to the parent if the property is set.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.OnDragDrop(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Forwards OnDragDrop message to the parent if the property is set.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.DomainClassId">
            <summary>
            Compartment domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.NameDomainPropertyId">
            <summary>
            Name domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.namePropertyStorage">
            <summary>
            Storage for Name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.Name">
            <summary>
            Gets or sets the value of Name domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Compartment.Name
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.NamePropertyHandler">
            <summary>
            Value handler for the Compartment.Name domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.NamePropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Compartment.Name domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.NamePropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Compartment.Name domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.NamePropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.NamePropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment,System.String)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleDomainPropertyId">
            <summary>
            Title domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.titlePropertyStorage">
            <summary>
            Storage for Title
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.Title">
            <summary>
            Gets or sets the value of Title domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Compartment.Title
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitlePropertyHandler">
            <summary>
            Value handler for the Compartment.Title domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitlePropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Compartment.Title domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitlePropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Compartment.Title domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitlePropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitlePropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment,System.String)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleVisibilityDomainPropertyId">
            <summary>
            TitleVisibility domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.titleVisibilityPropertyStorage">
            <summary>
            Storage for TitleVisibility
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleVisibility">
            <summary>
            Gets or sets the value of TitleVisibility domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Compartment.Title
            Visibility
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleVisibilityPropertyHandler">
            <summary>
            Value handler for the Compartment.TitleVisibility domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleVisibilityPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Compartment.TitleVisibility domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleVisibilityPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Compartment.TitleVisibility domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleVisibilityPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleVisibilityPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleFillColorDomainPropertyId">
            <summary>
            TitleFillColor domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleFillColor">
            <summary>
            Gets or sets the value of TitleFillColor domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Compartment.Title Fill
            Color
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleFillColorPropertyHandler">
            <summary>
            Value handler for the Compartment.TitleFillColor domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleFillColorPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Compartment.TitleFillColor domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleFillColorPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Compartment.TitleFillColor domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleFillColorPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleFillColorPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment,System.Drawing.Color)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.CompartmentFillColorDomainPropertyId">
            <summary>
            CompartmentFillColor domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.CompartmentFillColor">
            <summary>
            Gets or sets the value of CompartmentFillColor domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Compartment.Compartment
            Fill Color
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.CompartmentFillColorPropertyHandler">
            <summary>
            Value handler for the Compartment.CompartmentFillColor domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.CompartmentFillColorPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Compartment.CompartmentFillColor domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.CompartmentFillColorPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Compartment.CompartmentFillColor domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.CompartmentFillColorPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.CompartmentFillColorPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment,System.Drawing.Color)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleTextColorDomainPropertyId">
            <summary>
            TitleTextColor domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleTextColor">
            <summary>
            Gets or sets the value of TitleTextColor domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Compartment.Title Text
            Color
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleTextColorPropertyHandler">
            <summary>
            Value handler for the Compartment.TitleTextColor domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleTextColorPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Compartment.TitleTextColor domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleTextColorPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Compartment.TitleTextColor domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleTextColorPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Compartment.TitleTextColorPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Compartment,System.Drawing.Color)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentTypeDescriptor">
            <summary>
            Specialized type descriptor for the Compartment class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor,Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Creates a new CompartmentTypeDescriptor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentTypeDescriptor.ShouldCreatePropertyDescriptor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainPropertyInfo)">
            <summary>
            Overriden to control appearance of TitleFillColor and CompartmentFillColor properties
            in the property grid.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentTypeDescriptor.GetClassName">
            <summary>
            Get the class name to show in the property grid
            </summary>
            <remarks>
            Do not show the type of the compartment shape
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CustomBrushes">
            <summary>
            Each property of the CustomBrushes class is a StyleSetResourceId object that uniquely identifies a brush resource.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CustomBrushes.CompartmentHeaderBackground">
            <summary>
            Identifies the brush for filling in the compartment header's background. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CustomBrushes.CompartmentHeaderText">
            <summary>
            Identifies the brush for painting text in the compartment header. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentDescription">
            <summary>
            Base class for all Compartment descriptions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentDescription.Name">
            <summary>
            Gets or sets the Name identifier of the Compartment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentDescription.Title">
            <summary>
            Gets or sets the title shown in the comparment header.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentDescription.TitleFillColor">
            <summary>
            Gets or sets the FillColor for the compartment header.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentDescription.AllowCustomTitleFillColor">
            <summary>
            Gets or sets the variability of the TitleFill color.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentDescription.CompartmentFillColor">
            <summary>
            Gets or sets the Fill Color for the compartment body.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentDescription.AllowCustomCompartmentFillColor">
            <summary>
            Gets or sets the variability for the CompartmentFill color.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentDescription.TitleFontSettings">
            <summary>
            Gets or sets the font settings used for the compartment title.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentDescription.#ctor(System.String,System.String,System.Drawing.Color,System.Boolean,System.Drawing.Color,System.Boolean,Microsoft.VisualStudio.Modeling.Diagrams.FontSettings)">
            <summary>
            Constructor that takes all of the initial values.
            </summary>
            <param name="name">Initial Name value.</param>
            <param name="title">Initial Title value.</param>
            <param name="titleFill">Initital TitleFill value.</param>
            <param name="allowCustomTitleFillColor">True if title fill color can be changed through the property grid, false otherwise.</param>
            <param name="compartmentFill">Initial CompartmentFill value.</param>
            <param name="allowCustomCompartmentFillColor">True if compartment fill color can be changed through the property grid, false otherwise.</param>
            <param name="titleFontSettings">Font settings for the title font.  This font will be placed in the instance style set when the compartment is created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentDescription.CreateCompartment(Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            Create a compartment matching this description.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentDescription">
            <summary>
            Description for ListCompartments applied to CompartmentShapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentDescription.#ctor(System.String,System.String,System.Drawing.Color,System.Boolean,System.Drawing.Color,System.Boolean,Microsoft.VisualStudio.Modeling.Diagrams.FontSettings,Microsoft.VisualStudio.Modeling.Diagrams.FontSettings,System.Boolean)">
            <summary>
            Constructor that takes all of the initial values.
            </summary>
            <param name="name">Initial Name value.</param>
            <param name="title">Initial Title value.</param>
            <param name="titleFill">Initital TitleFill value.</param>
            <param name="allowCustomTitleFillColor">True if title fill color can be changed through the property grid, false otherwise.</param>
            <param name="compartmentFill">Initial CompartmentFill value.</param>
            <param name="allowCustomCompartmentFillColor">True if compartment fill color can be changed through the property grid, false otherwise.</param>
            <param name="titleFontSettings">Font settings for the title font.  This font will be placed in the instance style set when the compartment is created.</param>
            <param name="itemFontSettings">Font settings for the compartment item font.  This font will be placed in the instance style set when the compartment is created.</param>
            <param name="isDefaultCollapsed">Whether the default state of the compartment is collapsed</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentDescription.ItemFontSettings">
            <summary>
            Gets or sets the font settings used for the compartment items.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentDescription">
            <summary>
            Description for ListCompartments applied to CompartmentShapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentDescription.#ctor(System.String,System.String,System.Drawing.Color,System.Boolean,System.Drawing.Color,System.Boolean,Microsoft.VisualStudio.Modeling.Diagrams.FontSettings,Microsoft.VisualStudio.Modeling.Diagrams.FontSettings,System.Boolean)">
            <summary>
            Constructor that takes all of the initial values.
            </summary>
            <param name="name">Initial Name value.</param>
            <param name="title">Initial Title value.</param>
            <param name="titleFill">Initital TitleFill value.</param>
            <param name="allowCustomTitleFillColor">True if title fill color can be changed through the property grid, false otherwise.</param>
            <param name="compartmentFill">Initial CompartmentFill value.</param>
            <param name="allowCustomCompartmentFillColor">True if compartment fill color can be changed through the property grid, false otherwise.</param>
            <param name="titleFontSettings">Font settings for the title font.  This font will be placed in the instance style set when the compartment is created.</param>
            <param name="itemFontSettings">Font settings for the compartment item font.  This font will be placed in the instance style set when the compartment is created.</param>
            <param name="isDefaultCollapsed">If the compartment is collapsed by default</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentDescription.CreateCompartment(Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            Create a compartment matching this description.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentMapping">
            <summary>
            Base class for compartment mappings.
            Compartment mappings provide the glue between the content of compartments and the underlying object model
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentMapping.CompartmentId">
            <summary>
            Gets or sets the Compartment identifier.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentMapping.#ctor(System.String)">
            <summary>
            Constructor that takes all of the intial values.
            </summary>
            <param name="compartmentId">Initial id value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentMapping.InitializeCompartmentShape(Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape)">
            <summary>
            Update the compartment specified by this mapping with the value specified 
            by this mapping from the object model
            </summary>
            <param name="compartmentShape">The compartment shape that hosts the compartment
            specified by this mapping</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentMapping.InitializeCompartment(Microsoft.VisualStudio.Modeling.Diagrams.Compartment)">
            <summary>
            Update the compartment with the value specified by this mapping from
            the object model
            </summary>
            <param name="compartment">The compartment to update</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ElementListGetter">
            <summary>
            Delegate that returns a list given a model element. Used for
            DomainPath traversal methods.
            </summary>
            <param name="startElement"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DisplayStringGetter">
            <summary>
            Delegate to get the string to display on the compartment list item for the
            given model element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DisplayImageGetter">
            <summary>
            Delegate to get the image to show for a compartment list item
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PropertyElementGetter">
            <summary>
            Delegate to get the element on which the property being displayed for the given element
            is hosted. 
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentMapping">
            <summary>
            A mapping for ListCompartments that knows about the relationship
            that's being modeled in the compartment, and the property that's
            being displayed in the list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentMapping.PropertyId">
            <summary>
            Gets or sets the PropertyId for the ElementListCompartment's display item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentMapping.DefaultDomainClassId">
            <summary>
            Gets or sets the DomainClassId of the default type of item that
            will get created and added to the appropriate list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentMapping.ElementListGetter">
            <summary>
            Get/Set the element list delegate
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentMapping.PropertyElementGetter">
            <summary>
            Get/Set the property element delegate
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentMapping.StringGetter">
            <summary>
            Get/Set the line item text delegate
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentMapping.ImageGetter">
            <summary>
            Get/Set the line item image delegate
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentMapping.#ctor(System.String,System.Guid,System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.ElementListGetter,Microsoft.VisualStudio.Modeling.Diagrams.PropertyElementGetter,Microsoft.VisualStudio.Modeling.Diagrams.DisplayStringGetter,Microsoft.VisualStudio.Modeling.Diagrams.DisplayImageGetter)">
            <summary>
            Constructor that takes all of the initial values.
            </summary>
            <param name="compartmentId">Initial id value.</param>
            <param name="propertyId">Initial property id value.</param>
            <param name="relationType">Initial relationship type.</param>
            <param name="childRoleId">Initial child role id value.</param>
            <param name="parentRoleId">Initial parent role id value.</param>
            <param name="metaClassId">Initial metaclass id value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentMapping.#ctor(System.String,System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.ElementListGetter,Microsoft.VisualStudio.Modeling.Diagrams.DisplayStringGetter,Microsoft.VisualStudio.Modeling.Diagrams.DisplayImageGetter)">
            <summary>
            Constructor for a mapping that does not use a domain property but uses a fully custom string for display name.
            </summary>
            <param name="compartmentId">Initial id value.</param>
            <param name="propertyId">Initial property id value.</param>
            <param name="relationType">Initial relationship type.</param>
            <param name="childRoleId">Initial child role id value.</param>
            <param name="parentRoleId">Initial parent role id value.</param>
            <param name="metaClassId">Initial metaclass id value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentMapping.InitializeCompartment(Microsoft.VisualStudio.Modeling.Diagrams.Compartment)">
            <summary>
            Initialize the compartment from its mapping data.
            </summary>
            <param name="compartment">Compartment to intialize.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape">
            <summary>
            DomainClass CompartmentShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.AllowsChildrenToResizeParent">
            <summary>
            Gets value which determines if child shapes are allowed to resize this shape.
            </summary>
            <value>true - this shape resizes based on its children; false - children are clipped.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.AllowsChildrenToShrinkParent">
            <summary>
            Gets value which determines if this shape can be shrunk as well as grown by
            changes to its nested children.
            </summary>
            <value>direction in which it can be shrunk.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.DefaultContainerMargin">
            <summary>
            Gets the default margin allowed between nested shapes and the bounds of
            their parent shape.
            </summary>
            <value>SizeD for margin height and width.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.CanExpandAndCollapse">
            <summary>
            Gets a value indicating whether this shape has a distinct collapsed and expanded state.
            </summary>
            <value>true if this shape has a distinct collapsed and expanded state.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.ResizableSides">
            <summary>
            Gets the sides of this shape which can be resized by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.MaximumSize">
            <summary>
            Gets maximun size for the shape
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.BackgroundGradientMode">
            <summary>
            Gets the gradient mode for the shape background area.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.InitializeShapeFields(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.ShapeField})">
            <summary>
            Initialize the shape fields needed for the compartment shape.
            </summary>
            <param name="shapeFields">List of fields to add to/update.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.CreateBackgroundGradientField(System.String)">
            <summary>
            Creates the AreaField which covers the background area of the shape and displays the
            gradient fill.  Derived classes may override this to change the type of field that is created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.EnsureCompartments">
            <summary>
            Create all of the compartments for this shape. Use the CompartmentDescriptions
            and CompartmentMappings to initialize them correctly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.InitializeFromMappings">
            <summary>
            Update the compartment for each mapping.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.AssociateCompartment(Microsoft.VisualStudio.Modeling.Diagrams.Compartment,System.Type)">
            <summary>
            Associate a compartment with this compartmentShape and add it to its
            list of nested child shapes.
            </summary>
            <param name="compartment">Compartment to associate.</param>
            <param name="title">Title of the new compartment.</param>
            <param name="listKey">Key used to lookup compartment.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.FindCompartment(System.String)">
            <summary>
            Find the specified compartment by its Id.
            </summary>
            <param name="id">Id to look for.</param>
            <returns>Compartment matching the id, or null if none found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.FindCompartments(System.Type)">
            <summary>
            Returns the compartment which is mapped out by the passed in listKey (i.e. MetaRelationship type)
            </summary>
            <param name="listKey">Key to identify the compartment.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.UpdateSpecifiedCompartmentSize(System.Type)">
            <summary>
            Update the compartment size for the compartment that is identified
            by the specified key.
            </summary>
            <param name="listKey">Key to identify the compartment.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.AnchorAllCompartments">
            <summary>
            Once all of the compartments are in place, this method anchors them
            all together, so that they line up correct one after the other, and 
            fill the entire width of the shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.GetCompartmentDescriptions">
            <summary>
            Get a set of descriptions of compartments that the implementor of this has
            </summary>
            <returns>A set of descriptions of decorators</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.GetCompartmentMappings">
            <summary>
            Get a set of mappings from the ObjectModel to compartments
            </summary>
            <returns>A set of mappings</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.GetCompartmentMappings(System.Type)">
            <summary>
            Get a set of compartment mappings for the given melType that the shape
            is mapped to. 
            </summary>
            <param name="melType"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.IsSingleCompartmentHeaderVisible">
            <summary>
            Gets whether compartment header should be visible if there is only one of them.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.NavigateAcrossListCompartmentItems">
            <summary>
            Get/Set the arrow Up/Down navigation behavior when shape contains ElementListCompartment. 
            When set to true, arrow up/down key will navigate through all items in all ElementListCompartments. 
            Notice that the default value is true.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.DomainClassId">
            <summary>
            CompartmentShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentRuleHelper">
            <summary>
            Static class with shared code for handling Compartment list item add, remove,
            and change rules.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentRuleHelper.HandleCompartmentUpdate(Microsoft.VisualStudio.Modeling.ElementLink,System.Type)">
            <summary>
            Update the Compartment represented by the ElementLink, so that it will
            shrink/grow as needed.
            </summary>
            <param name="link">ElementLink whose associated compartment must be updated.</param>
            <param name="listParentType">Type of the list's parent model element, which we
            use to find which role player we need to look at.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentRuleHelper.HandleRolePlayerChangedRule(Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            If the role players change, we only care about the "parent" of the relationship.
            We update both the old and new parents because an item moved from one to the other.
            </summary>
            <param name="link">ElementLink that is being changed.</param>
            <param name="oldValue">Old value before change.</param>
            <param name="newValue">New value after chagne.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentRuleHelper.UpdateAllPresentationElements(Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Updates the right compartment on all of the presentation role player
            for this element.
            </summary>
            <param name="link">ElementLink that is being updated.</param>
            <param name="element">Element to update presentation for.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeAreaField.#ctor(System.String)">
            <summary>
            default constructor (defaults to square corners)
            </summary>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeAreaField.GetCornerRadius(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the corner radius values for the AreaField.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeAreaField.GetBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the bounding rectangle for this shape field.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs.SourceFeedbackBounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs.TargetFeedbackBounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs.PreviousTargetFeedbackBounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs.LineFeedbackBounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs.SourceGraphicsPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs.TargetGraphicsPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs.SourceConnectionPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs.TargetConnectionPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs.DisplaySourceAndTargetFeedback">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs.CustomPaintArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ConnectActionCursor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectActionCursor.Searching">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectActionCursor.Disallowed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectActionCursor.Allowed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectActionCursor.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction">
            <summary>
            Mouse action that allows user to drag from one SoftwareComponentType shape or 
            Port shape to another in order to create a connection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Boolean)">
            <summary>
            Initializes a new instance of the ConnectAction class 
            </summary>
            <param name="diagram">Diagram that this mouse action belongs to</param>
            <param name="permitClick">true if click-connect capability should be enabled.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.StickyMode">
            <summary>
            Gets/Sets a bool indicating if the connect action can perform multiple
            connections or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.UpdateConnectionType">
            <summary>
            External events can determine if connection type should be locked during connect action
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.TargetPoint">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Returns the connect action cursor
            </summary>
            <param name="currentCursor"> Cursor shape for connect action</param>
            <param name="diagramClientView">Diagram client view that this mouse action belongs to</param>
            <param name="mousePosition">Relative to diagram's top, left.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.DoPaintFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Feedbacks usefull information during connect action
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnMouseActionActivated(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnMousePositionChanged(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Responds to the mouse position change
            </summary>
            <param name="newMousePosition">The new mouse position in absolute world coordinates.</param>
            <param name="hitShape">The shape below the new mouse position.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.GetCursorFromCursorType(Microsoft.VisualStudio.Modeling.Diagrams.ConnectActionCursor)">
            <summary>
            
            </summary>
            <param name="connectActionCursor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnMouseLeave(Microsoft.VisualStudio.Modeling.Diagrams.LeaveShapeEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnDiagramScrolled(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Called when a Scrolled event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnDraggingBegun(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnDragCompleted(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnClicked(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.CreateConnection">
            <summary>
            Create the connection between source and target
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnMouseActionCanceled(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnMouseActionDeactivated(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.OnContextMenuRequested(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Should cancel connect action on context menu as it throws exceptions otherwise
            because target and source elements could be null in this case.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.InitializeVariables">
            <summary>
            Initializes all variables
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.InvalidatePaintFeedback">
            <summary>
            Invalidates the previous and current feedback.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.IsValidSourceAndTarget(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="targetShapeElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.GetConnectionType(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="targetShapeElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectAction.GetConnectionTypes(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Determine from source if a specific connection type exits
            </summary>
            <param name="sourceShapeElement"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionType">
            <summary>
            Describes generic connection behavior between two ShapeElements
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionType.Instance">
            <summary>
            Instance
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionType.GetConnectTransactionName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the name of transaction used to create a connection.
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="targetShapeElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionType.IsValidSourceAndTarget(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="targetShapeElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionType.IsOfInterest(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="targetShapeElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionType.CanCreateConnection(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.String@)">
            <summary>
            
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="targetShapeElement"></param>
            <param name="connectionWarning"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionType.CreateConnection(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs)">
            <summary>
            
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="targetShapeElement"></param>
            <param name="paintFeedbackArgs"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionType.UpdatePaintFeedbackParameters(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs)">
            <summary>
            
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="sourcePoint"></param>
            <param name="targetShapeElement"></param>
            <param name="targetPoint"></param>
            <param name="paintFeedbackArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionType.DoPaintFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs)">
            <summary>
            
            </summary>
            <param name="paintArgs"></param>
            <param name="sourceShapeElement"></param>
            <param name="sourcePoint"></param>
            <param name="targetShapeElement"></param>
            <param name="targetPoint"></param>
            <param name="paintFeedbackArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionType.InvalidatePaintFeedback(Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs,Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            
            </summary>
            <param name="paintFeedbackArgs"></param>
            <param name="diagram"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecorator">
            <summary>
            Class to encapsulate the way ShapeFields and child Shapes are used to represent Notation Decorators
            when they are placed on a Connector
            </summary>
            <remarks>
            All Decorators on connectors require host shapes
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecorator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition)">
            <summary>
            Creates a ConnectorDecorator.
            </summary>
            <param name="field">Shape field used by the decorator.</param>
            <param name="position">Decorator position.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecorator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Creates a ConnectorDecorator.
            </summary>
            <param name="field">Shape field used by the decorator.</param>
            <param name="position">Decorator position.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecorator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition,System.Boolean)">
            <summary>
            Creates a ConnectorDecorator.
            </summary>
            <param name="field">Shape field used by the decorator.</param>
            <param name="position">Decorator position.</param>
            <param name="canMove">Whether this decorator can be moved.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecorator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Boolean)">
            <summary>
            Creates a ConnectorDecorator.
            </summary>
            <param name="field">Shape field used by the decorator.</param>
            <param name="position">Decorator position.</param>
            <param name="canMove">Whether this decorator can be moved.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecorator.RequiresHost">
            <summary>
            All connector decorators require a host.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecorator.Position">
            <summary>
            Gets the position of this decorator relative to the parent shape.
            </summary>
            <remarks>
            Changing the position of the decorator does not automatically cause
            the diagram to update.  RepositionHostShape must be called after the change,
            for all host shapes hosting this decorator.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecorator.ConfigureHostShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Configures a host shape for use with this decorator.  
            If the given parent does not have a host shape for this decorator,
            a new one will be created.  If a host shape already exists,
            settings for this decorator will be re-applied to the existing host shape; 
            a new host shape will not be created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecorator.RepositionHostShape(Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape)">
            <summary>
            Repositions the given host shape based on the position of the connector.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecorator.SetLabelPosition(Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper)">
            <summary>
            Translates ConnectorDecoratorPosition -> LabelPlacement/LabelAlignment
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes">
            <summary>
            The parent-child relationship for child shapes that are clipped by the bounds of the parent shape.
            The child is neither visible nor hit-testable outside of the parent's bounding box.
            </summary>
            <summary>
            DomainRelationship ParentShapeContainsNestedChildShapes
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Constructor
            Creates a ParentShapeContainsNestedChildShapes link in the same Partition as the given ShapeElement
            </summary>
            <param name="source">ShapeElement to use as the source of the relationship.</param>
            <param name="target">ShapeElement to use as the target of the relationship.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.RoleAssignment[],Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
            <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.RoleAssignment[],Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
            <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.OnCreated">
            <summary>
            This method is called when this ElementLink is instantiated.
            It will be called during Do but NOT during Undo, Redo, and Rollback.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.OnResurrected">
            <summary>
            This method is called when this ElementLink is instantiated.
            It will be called during Undo, Redo, and Rollback.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.OnDeleting">
            <summary>
            This method is called immediately before this ElementLink is removed.
            It will be called during Do, Undo, Redo, and Rollback.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.OnRolePlayerChanged(Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement,System.Int32)">
            <summary>
            This method is called when the roleplayer for parent-child relationship ends.
            We reset the ParentShape cache on the shape.
            </summary>
            <param name="domainRole">Domain role that has changed</param>
            <param name="oldPlayer">The model element that was previously participating in the relationship</param>
            <param name="newPlayer">The model element that is now participating in the relationship</param>
            <param name="linkIndex">Index of the link that has changed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.UpdateGraphWrapperOnUndo(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Fix up the graph wrapper on undo / redo changes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.DomainClassId">
            <summary>
            ParentShapeContainsNestedChildShapes domain class Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.ParentShapeDomainRoleId">
            <summary>
            ParentShape domain role Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.ParentShape">
            <summary>
            DomainRole ParentShape
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.ParentShape
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.GetParentShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets ParentShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.SetParentShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Sets ParentShape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.NestedChildShapesDomainRoleId">
            <summary>
            NestedChildShapes domain role Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.NestedChildShapes">
            <summary>
            DomainRole NestedChildShapes
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.NestedChildShapes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.GetNestedChildShapes(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a list of NestedChildShapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.GetLinksToNestedChildShapes(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Get the list of ParentShapeContainsNestedChildShapes links to a ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.GetLinkToParentShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Get the ParentShapeContainsNestedChildShapes link to a ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.GetLinks(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Get any ParentShapeContainsNestedChildShapes links between a given ShapeElement and a ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.GetLink(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Get the one ParentShapeContainsNestedChildShapes link between a given ShapeElementand a ShapeElement.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes">
            <summary>
            The parent-child relationship for child shapes that are not clipped by the bounds of the parent shape.
            The child is visible and hit-testable outside of the parent's bounding box.
            </summary>
            <summary>
            DomainRelationship ParentShapeHasRelativeChildShapes
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Constructor
            Creates a ParentShapeHasRelativeChildShapes link in the same Partition as the given ShapeElement
            </summary>
            <param name="source">ShapeElement to use as the source of the relationship.</param>
            <param name="target">ShapeElement to use as the target of the relationship.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.RoleAssignment[],Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
            <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.RoleAssignment[],Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
            <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.OnCreated">
            <summary>
            This method is called when this ElementLink is instantiated.
            It will be called during Do but NOT during Undo, Redo, and Rollback.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.OnResurrected">
            <summary>
            This method is called when this ElementLink is instantiated.
            It will be called during Undo, Redo, and Rollback.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.OnDeleting">
            <summary>
            This method is called immediately before this ElementLink is removed.
            It will be called during Do, Undo, Redo, and Rollback.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.DomainClassId">
            <summary>
            ParentShapeHasRelativeChildShapes domain class Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.ParentShapeDomainRoleId">
            <summary>
            ParentShape domain role Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.ParentShape">
            <summary>
            DomainRole ParentShape
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.ParentShape
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.GetParentShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets ParentShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.SetParentShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Sets ParentShape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.RelativeChildShapesDomainRoleId">
            <summary>
            RelativeChildShapes domain role Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.RelativeChildShapes">
            <summary>
            DomainRole RelativeChildShapes
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.RelativeChildShapes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.GetRelativeChildShapes(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a list of RelativeChildShapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.GetLinksToRelativeChildShapes(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Get the list of ParentShapeHasRelativeChildShapes links to a ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.GetLinkToParentShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Get the ParentShapeHasRelativeChildShapes link to a ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.GetLinks(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Get any ParentShapeHasRelativeChildShapes links between a given ShapeElement and a ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.GetLink(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Get the one ParentShapeHasRelativeChildShapes link between a given ShapeElementand a ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesAddRule.ElementAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            This rule adjusts the child node shape's absolute bounds now
            that it has been added to its parent shape.  At the beginning
            of this method, the the child's absolute bounds is assumed to
            be the relative bounds.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesDeleteRule.ElementDeleted(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            This rule adjusts the child node shape's absolute bounds now
            that it has been added to its parent shape.  At the beginning
            of this method, the the child's absolute bounds is assumed to
            be the relative bounds.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentRoleChangeRule.RolePlayerChanged(Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs)">
            <summary>
            Defers updating the shape's layout object as well as its descendent shapes
            by adding to a queue which gets processed in the DiagramCommittingRule.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesAddRule.ElementAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            This rule adjusts the child node shape's absolute bounds now
            that it has been added to its parent shape.  At the beginning
            of this method, the the child's absolute bounds is assumed to
            be the relative bounds.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesDeleteRule.ElementDeleted(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            This rule adjusts the child node shape's absolute bounds now
            that it has been added to its parent shape.  At the beginning
            of this method, the the child's absolute bounds is assumed to
            be the relative bounds.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NestedShapesParentRoleChangeRule.RolePlayerChanged(Microsoft.VisualStudio.Modeling.RolePlayerChangedEventArgs)">
            <summary>
            Defers updating the shape's layout object as well as its descendent shapes
            by adding to a queue which gets processed in the DiagramCommittingRule.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel">
            <summary>
            override reflection replacement apis
            </summary>
            <summary>
            DomainModel CoreDesignSurfaceDomainModel
            Description for Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.GetCustomDomainModelTypes">
            <summary>
            Virtual method that returns the collection of all types of DomainModel objects in this domainModel
            </summary>
            <returns>ICollection DomainClassInfo objects</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.DomainModelId">
            <summary>
            CoreDesignSurfaceDomainModel domain model Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.#ctor(Microsoft.VisualStudio.Modeling.Store)">
            <summary>
            Constructor.
            </summary>
            <param name="store">Store containing the domain model.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.InitializeSerialization(Microsoft.VisualStudio.Modeling.Store)">
            <Summary>
             Provide an implementation of the partial method to set up the serialization behavior for this model.
            </Summary>
            <remarks>
             This partial method is called from the constructor of the domain class.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.GetGeneratedDomainModelTypes">
            <summary>
            Gets the list of generated domain model types (classes, rules, relationships).
            </summary>
            <returns>List of types.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.GetGeneratedDomainProperties">
            <summary>
            Gets the list of generated domain properties.
            </summary>
            <returns>List of property data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.GetGeneratedDomainRoles">
            <summary>
            Gets the list of generated domain roles.
            </summary>
            <returns>List of role data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.CreateElement(Microsoft.VisualStudio.Modeling.Partition,System.Type,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Creates an element of specified type.
            </summary>
            <param name="partition">Partition where element is to be created.</param>
            <param name="elementType">Element type which belongs to this domain model.</param>
            <param name="propertyAssignments">New element property assignments.</param>
            <returns>Created element.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.CreateElementLink(Microsoft.VisualStudio.Modeling.Partition,System.Type,Microsoft.VisualStudio.Modeling.RoleAssignment[],Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Creates an element link of specified type.
            </summary>
            <param name="partition">Partition where element is to be created.</param>
            <param name="elementLinkType">Element link type which belongs to this domain model.</param>
            <param name="roleAssignments">List of relationship role assignments for the new link.</param>
            <param name="propertyAssignments">New element property assignments.</param>
            <returns>Created element link.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.ResourceBaseName">
            <summary>
            The base name of this model's resources.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.ResourceManager">
            <summary>
            Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.SingletonResourceManager">
            <summary>
            Gets the Singleton ResourceManager for this domain model.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.copyClosure">
            <summary>
            CopyClosure cache
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.removeClosure">
            <summary>
            DeleteClosure cache
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.GetClosureFilter(Microsoft.VisualStudio.Modeling.ClosureType,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement})">
            <summary>
            Returns an IElementVisitorFilter that corresponds to the ClosureType.
            </summary>
            <param name="type">closure type</param>
            <param name="rootElements">collection of root elements</param>
            <returns>IElementVisitorFilter or null</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.CopyClosure">
            <summary>
            CopyClosure cache
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel.DeleteClosure">
            <summary>
            DeleteClosure cache
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDeleteClosure">
            <summary>
            Remove closure visitor filter
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDeleteClosure.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDeleteClosureBase">
            <summary>
            Base class for remove closure visitor filter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDeleteClosureBase.domainRoles">
            <summary>
            DomainRoles
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDeleteClosureBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDeleteClosureBase.ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.DomainRelationshipInfo,Microsoft.VisualStudio.Modeling.ElementLink)">
            <summary>
            Called to ask the filter if a particular relationship from a source element should be included in the traversal
            </summary>
            <param name="walker">ElementWalker that is traversing the model</param>
            <param name="sourceElement">Model Element playing the source role</param>
            <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
            <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
            <param name="targetRelationship">Relationship in question</param>
            <returns>Yes if the relationship should be traversed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDeleteClosureBase.ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.DomainRoleInfo,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Called to ask the filter if a particular role player should be Visited during traversal
            </summary>
            <param name="walker">ElementWalker that is traversing the model</param>
            <param name="sourceElement">Model Element playing the source role</param>
            <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
            <param name="targetDomainRole">DomainRoleInfo of the target role</param>
            <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDeleteClosureBase.DomainRoles">
            <summary>
            DomainRoles
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceCopyClosure">
            <summary>
            Copy closure visitor filter
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceCopyClosure.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceCopyClosureBase">
            <summary>
            Base class for copy closure visitor filter
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceCopyClosureBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition">
            <summary>
            DomainEnumeration: ShapeDecoratorPosition
            Description for Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerTopLeft">
            <summary>
            InnerTopLeft
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerTopLeft
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerTopCenter">
            <summary>
            InnerTopCenter
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerTopCenter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerTopRight">
            <summary>
            InnerTopRight
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerTopRight
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerMiddleLeft">
            <summary>
            InnerMiddleLeft
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerMiddleLeft
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.Center">
            <summary>
            Center
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.Center
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerMiddleRight">
            <summary>
            InnerMiddleRight
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerMiddleRight
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerBottomLeft">
            <summary>
            InnerBottomLeft
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerBottomLeft
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerBottomCenter">
            <summary>
            InnerBottomCenter
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerBottomCenter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerBottomRight">
            <summary>
            InnerBottomRight
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.InnerBottomRight
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterTopLeft">
            <summary>
            OuterTopLeft
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterTopLeft
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterTopCenter">
            <summary>
            OuterTopCenter
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterTopCenter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterTopRight">
            <summary>
            OuterTopRight
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterTopRight
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterMiddleLeft">
            <summary>
            OuterMiddleLeft
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterMiddleLeft
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterMiddleRight">
            <summary>
            OuterMiddleRight
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterMiddleRight
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterBottomLeft">
            <summary>
            OuterBottomLeft
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterBottomLeft
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterBottomCenter">
            <summary>
            OuterBottomCenter
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterBottomCenter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterBottomRight">
            <summary>
            OuterBottomRight
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition.OuterBottomRight
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition">
            <summary>
            DomainEnumeration: ConnectorDecoratorPosition
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.SourceTop">
            <summary>
            SourceTop
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.SourceTop
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.SourceBottom">
            <summary>
            SourceBottom
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.SourceBottom
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.TargetTop">
            <summary>
            TargetTop
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.TargetTop
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.TargetBottom">
            <summary>
            TargetBottom
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.TargetBottom
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.CenterTop">
            <summary>
            CenterTop
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.CenterTop
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.CenterBottom">
            <summary>
            CenterBottom
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorDecoratorPosition.CenterBottom
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle">
            <summary>
            DomainEnumeration: ConnectorArrowStyle
            Description for Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.Custom">
            <summary>
            Custom
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.Custom
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.EmptyArrow">
            <summary>
            EmptyArrow
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.EmptyArrow
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.FilledArrow">
            <summary>
            FilledArrow
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.FilledArrow
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.HollowArrow">
            <summary>
            HollowArrow
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.HollowArrow
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.EmptyDiamond">
            <summary>
            EmptyDiamond
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.EmptyDiamond
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.FilledDiamond">
            <summary>
            FilledDiamond
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ConnectorArrowStyle.FilledDiamond
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.RoutingStyle">
            <summary>
            DomainEnumeration: RoutingStyle
            Description for Microsoft.VisualStudio.Modeling.Diagrams.RoutingStyle
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.RoutingStyle.Rectilinear">
            <summary>
            Rectilinear
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.RoutingStyle.Rectilinear
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.RoutingStyle.Straight">
            <summary>
            Straight
            Description for Microsoft.VisualStudio.Modeling.Diagrams.RoutingStyle.Straight
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement">
            <summary>
            DomainClass PresentationElement
            Description for Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement.DomainClassId">
            <summary>
            PresentationElement domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement.Subject">
            <summary>
            Gets or sets Subject.
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.Presentation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement.Associate(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Associates this presentation element with its model element.
            </summary>
            <param name="element">ModelElement to associate with</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement.ModelElement">
            <summary>
            Gets or sets the model element associated with this presentation element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement.MergeRelate(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            PresentationElements should not override MergeRelate() because it will not be called on PELs during Merge.
            Instead, PELs should use the view fixup overrides.
            </summary>
            <param name="sourceElement"></param>
            <param name="elementGroup"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement.MergeConfigure(Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            PresentationElements should not override MergeConfigure() because it will not be called on PELs during Merge.
            Instead, PELs should use the view fixup overrides.
            </summary>
            <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement">
            <summary>
            DomainClass ShapeElement
            Description for Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DomainClassId">
            <summary>
            ShapeElement domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.RelativeChildShapes">
            <summary>
            Gets a list of RelativeChildShapes.
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapes.ParentShape
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.NestedChildShapes">
            <summary>
            Gets a list of NestedChildShapes.
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapes.ParentShape
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.InitializeInstanceStyleSetFonts" -->
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetDiagramFromTransactionContext">
            <summary>
            Returns the diagram from the DropTargetContext in the current transaction's context.
            This may return null.
            </summary>
            <returns>The diagram from the DropTargetContext in the current transaction's context.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AccessibilityObject">
            <summary>
            Gets the AccessibleObject assigned to the element
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AccessibleDefaultActionDescription">
            <summary>
            Gets the default action description of the element for use by accessibility client applications
            </summary>
            <value>
            A description of the default action for an element.
            </value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AccessibleDoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AccessibleDescription">
            <summary>
            Gets the description of the element used by accessibility client applications
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AccessibleName">
            <summary>
            Gets the name of the element used by accessibility client applications
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AccessibleValue">
            <summary>
            Gets the accessible value for this element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AccessibleRole">
            <summary>
            Gets the accessible role of the control
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AccessibleState">
            <summary>
            Gets the accessible state of the model element
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AccessibleHelp">
            <summary>
            Gets a description of what the element does or how the element is used.
            </summary>
            <value>A description of what the element does or how the element is used.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AccessibleHelpTopicId">
            <summary>
            Gets the help topic identifier associated with this element.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AccessibleHelpTopicFileName">
            <summary>
            Gets the path to the Help file associated with this element.
            </summary>
            <value>The path to the Help file associated with this element.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnInitialize">
            <summary>
            This method is called when a shape is inititially created, derived classes can
            override to perform shape instance initialization.  This method is always called within a transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.MinimumSize">
            <summary>
            Gets the minimum size of a ShapeElement in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.MaximumSize">
            <summary>
            Gets the maximum size of a ShapeElement in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DefaultSize">
            <summary>
            Gets the default size of a ShapeElement in world units.
            </summary>
            <remarks>The base class behavior is to have default size of a ShapeElement be its minimum size.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GridSize">
            <summary>
            Gets the size of the grid in world units that this shape is on.
            By default, the parent shape's GridSize is used.
            </summary>
            <remarks>The size of the grid in world units that this shape is on.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.NestedShapesMargin">
            <summary>
            Gets the margin between this ShapeElement's bounding box 
            perimeter and its nested node shapes.  The margin is in
            world units.
            This margin is to provide a region along the perimeter
            of this ShapeElement where connection lines can route through.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.EnsureVisiblePreference">
            <summary>
            Preferences for the EnsureVisible method for this Shape.
            Default value is to return the VisiblePreference for the Diagram hosting this Shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Invalidate">
            <summary>
            Invalidates the ShapeElement.
            </summary>
            <remarks>
            This method will invalidate the ShapeElement
            including (1) the outline pen that exceeds
            the bounds of the ShapeElement and (2) the
            the shadow of the ShapeElement.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Invalidate(System.Boolean)">
            <summary>
            Invalidates the ShapeElement.
            </summary>
            <remarks>
            This method will invalidate the ShapeElement
            including (1) the outline pen that exceeds
            the bounds of the ShapeElement and (2) the
            the shadow of the ShapeElement.
            </remarks>
            <param name="refreshBitmap">Whether backing bitmap also needs to be refreshed as part of this invalidate.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Invalidate(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Invalidates the ShapeElement with the specified rectangle used as its absolute bounds.
            </summary>
            <remarks>
            This method will invalidate the ShapeElement
            including (1) the outline pen that exceeds
            the bounds of the ShapeElement and (2) the
            the shadow of the ShapeElement.
            
            The bounds passed in will be used as the
            ShapeElement bounds.  This method is particularly
            useful for invalidating this ShapeElement at a  
            previous location and size.  The bounds 
            passed in is relative to the diagram's 
            top left corner and is in world units.
            </remarks>
            <param name="absoluteShapeBounds">The ShapeElement bounds relative to the diagram's top left corner and in world units.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DrawResizeFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Draws the ShapeElement's resizing feedback using the given absolute bounds for the ShapeElement.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="bounds">Bounds to use for the geometry in world units relative to the top-left of the diagram.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindFreeArea(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Find a free area in the shape or diagram's graph.
            </summary>
            <param name="aimForX">initial center X to aim for</param>
            <param name="aimForY">initial center Y to aim for</param>
            <param name="averageConnectivityX">connectivity X</param>
            <param name="averageConnectivityY">connectivity Y</param>
            <param name="spacingX">grid X to use for increment</param>
            <param name="spacingY">grid Y to use for increment</param>
            <param name="areaDeltaX">delta X of the area to find</param>
            <param name="areaDeltaY">delta Y of the area to find</param>
            <param name="boundsX0">bound LEFT not to exceed when searching (very large - no bounds)</param>
            <param name="boundsY0">bound BOTTOM not to exceed when searching (very large - no bounds)</param>
            <param name="boundsX1">bound RIGHT not to exceed when searching (very large - no bounds)</param>
            <param name="boundsY1">bound TOP not to exceed when searching (very large - no bounds)</param>
            <returns>Center position of free area found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DoHitTestSelection(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Performs a hittest on the selection surrounding the ShapeElement
            given a point relative to the Diagram's top-left in world units.
            </summary>
            <param name="point">Point in world coordinates relative to the Diagram's top-left.</param>
            <param name="hitTestInfo">the object that will receive the return values</param>
            <returns>true if a grab handle was hit, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Performs a hittest given a point relative to the 
            Diagram's top-left in world units.
            </summary>
            <param name="point">Point in world coordinates relative to the parent ShapeElement's top-left.</param>
            <param name="hitTestInfo">the object that will receive the return values for which (sub)shape, which field, and which grabHandle</param>
            <returns>true if a ShapeElement was hit, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Performs a hittest given a point relative to the 
            Diagram's top-left in world units.
            </summary>
            <param name="point">Point in world coordinates relative to the parent ShapeElement's top-left.</param>
            <param name="hitTestInfo">the object that will receive the return values for which (sub)shape, which field, and which grabHandle</param>
            <param name="includeTolerance">true if the tolerance around the shape should be included when determining if the shape was hit.</param>
            <returns>true if a ShapeElement was hit, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DoFoldToShape(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculates the point along the ShapeElement perimeter where the given vector will intersect
            </summary>
            <param name="potentialPoint">Point (in world coordinates) along the bounding rectangle to be folded in to the perimeter of the ShapeElement</param>
            <param name="vectorEndpoint">Point (in world coordinates) defining the endpoint of the vector along which folding to the perimeter must take place</param>
            <returns>Point (in world coordinates) along the ShapeElement perimeter where the vector will intersect.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Events">
            <summary>
            Returns the list of event handlers attached to this ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnBeforePaint">
            <summary>
            OnBeforePaint is called at the start of the ShapeElement's painting.
            It provides an opportunity for developers to update and override resources
            before they're used in painting.
            </summary>
            <remarks>
            You can override existing resources by calling StyleSet.OverrideXXX and 
            changing the specific setting that you would like.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnPaintShape(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Draws the ShapeElement.
            This is called by the control's OnPaint().
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ClipWhenDrawingFields">
            <summary>
            Gets a value indicating whether the clipping region should
            be set to the bounding box of this shape when drawing its
            child ShapeFields.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnPaintSelection(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Draws the selection of this ShapeElement.
            By default, the ShapeElement's ShapeGeometry
            will draw the selection.
            The coordinate system of the Graphics object is in
            world units and relative to the parent shape. 
            </summary>
            <param name="e">
            A DiagramPaintEventArgs that contains event data. 
            The coordinate system of the Graphics object is in
            world units and relative to the parent shape. 
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnPaintEmphasis(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Draws visual emphasis on the shape.  This does not indicate selection, it
            only draws the user's attention to this shape when another shape is selected.
            (See ShapeElement.RelatedShapeToEmphasize.)
            </summary>
            <param name="e">
            A DiagramPaintEventArgs that contains event data. 
            The coordinate system of the Graphics object is in
            world units and relative to the parent shape. 
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnPaintSelectionInternal(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Draws the selection surrounding this ShapeElement.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnPaintFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Draws the drag/drop feedback when this ShapeElement (or possibly one of its
            descendents) is under the mouse.
            This is called by the control's OnPaint().
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.MouseDown">
            <summary>
            Event fired when a mouse button is pressed on the shape.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.MouseUp">
            <summary>
            Event fired when a mouse button is released on the shape.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.MouseMove">
            <summary>
            Event fired when the cursor moves over the shape.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.MouseWheel">
            <summary>
            Event fired when the mouse wheel moves while the cursor is over the shape.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Click">
            <summary>
            Event fired when the shape is clicked.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DoubleClick">
            <summary>
            Event fired when the shape is double-clicked.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseDown().
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseMove().
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnMouseUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseUp().
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DetermineHighlightShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Goes up the parent shape chain, until it finds a shape that has highlighting
            turned on, or it has reached the top of the parent chain.
            </summary>
            <param name="shape">Shape at which to start the search.</param>
            <returns>Shape with highlighting, or null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnMouseEnter(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Default implementation of ShapeElement event for OnMouseEnter.
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnMouseLeave(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Default implementation of ShapeElement event for OnMouseLeave.
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnMouseHover(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Default implementation of ShapeElement event for OnMouseHover.
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called by the control's OnClick().
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnDoubleClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called by the control's OnDoubleClick()
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnMouseWheel(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseWheel().
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnDragEnter(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Event raised when an IDataObject drag enters the ShapeElement's bounds. 
            </summary>
            <param name="e">The drag arguments to be set to indicate how to handle the drag.</param>
            <remarks>
            A hit test is performed by the DiagramClientView and the event is fired to the most relevant ShapeElement. 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnDragLeave(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Event raised when an IDataObject drag leaves the ShapeElement's bounds. 
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
            <remarks>
            A hit test is performed by the DiagramClientView and the event is fired to the most relevant ShapeElement. 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnDragOver(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Event raised when an IDataObject is dragged over the ShapeElement's bounds. 
            </summary>
            <param name="e">The drag arguments to be set to indicate how to handle the drag.</param>
            <remarks>
            A hit test is performed by the DiagramClientView and the event is fired to the most relevant ShapeElement. 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnDragDrop(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Event raised when an IDataObject is dragged over and then dropped into the ShapeElement. 
            </summary>
            <param name="e">The drag arguments to be used to update the model with the IDataObject dropped.</param>
            <remarks>
            A hit test is performed and the event is fired to the most relevant ShapeElement. 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.RunInOptionalLinkedUndoTransaction(System.String,System.Boolean,System.Action)">
            <summary>
            Run the given action on this shape in a linked undo transaction if one is available and the useTransaction flag is set
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.HasCachedDragOverResult(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Returns true if the Drag Over result is cached.
            </summary>
            <param name="e">The DiagramDragArgs to use.</param>
            <returns>true if the Drag Over result is cached, else false.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.KeyDown">
            <summary>
            Event fired when the shape has focus and a keyboard key is down.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.KeyUp">
            <summary>
            Event fired when the shape has focus and a keyboard key is released.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.KeyPress">
            <summary>
            Event fired when the shape has focused and a character is typed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.IsNavigationKey(System.Windows.Forms.Keys)">
            <summary>
            Returns a value indicating whether the specified key data corresponds to
            a navigational command.
            </summary>
            <param name="keyData"></param>
            <returns>true if the specified key data corresponds to a navigational command.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.IsNavigationKey(System.Char)">
            <summary>
            Returns a value indicating whether the specified character corresponds to
            a navigational command.
            </summary>
            <param name="keyCharacter"></param>
            <returns>true if the specified character corresponds to a navigational command.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DoKeyboardNavigation(System.Windows.Forms.Keys,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Calls the appropriate navigation method on the shape.
            </summary>
            <param name="keyData">Keyboard data indicating keys that are currently pressed (includes modifier keys).</param>
            <param name="diagramClientView">Diagram client view where navigation should occur.</param>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DoKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Called from the DiagramClientView control.  Default key processing should go here, rather than
            in OnKeyDown.  OnKeyDown should do nothing more than fire the KeyDown event, so it can be called
            from OnKeyDown overrides in derived classes without side effects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Called when a key is pressed.
            </summary>
            <param name="e">A DiagramKeyEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DoKeyUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Called from the DiagramClientView control.  Default key processing should go here, rather than
            in OnKeyUp.  OnKeyUp should do nothing more than fire the KeyUp event, so it can be called
            from OnKeyDown overrides in derived classes without side effects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnKeyUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Called when a key is released.
            </summary>
            <param name="e">A DiagramKeyEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DoKeyPress(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs)">
            <summary>
            Called from the DiagramClientView control.  Default key processing should go here, rather than
            in OnKeyPress.  OnKeyPress should do nothing more than fire the KeyDown event, so it can be called
            from OnKeyPress overrides in derived classes without side effects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnKeyPress(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs)">
            <summary>
            Called between a key down and key up.
            </summary>
            <param name="e">A DiagramKeyPressEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnBeginEdit(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            Called when in-place editing has begun.
            </summary>
            <param name="field">The ShapeField that this event is for.</param>
            <param name="e">A DiagramItemEventArgs containing event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnEndEdit(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            Called when in-place editing has ended.
            </summary>
            <param name="field">The ShapeField that this event is for.</param>
            <param name="e">A DiagramItemEventArgs containing event data.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.DefaultShapeField">
            <summary>
            Gets the first ShapeField that can receive focus. The
            field returned should be used as the default shape field 
            to receive key events when the ShapeElement has the focus 
            and the ShapeElement doesn't respond to the key events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CanMoveByRepositioning(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Returns a value indicating whether the shapes in the IDataObject 
            should be moved.
            The determination is based on the following conditions being true:
              (1) the DragDropEffects.Move is an allowed effect;
              (2) the user wants to move, not duplicate;
              (3) there is an ElementGroupPrototype in the IDataObject;
              (4) the shapes represented by the ElementGroupPrototype
               can be moved simply by changing their bounds OR
              (5) the drop target is a swimlane and the shapes are reparentable
            </summary>
            <param name="diagramDragArgs">A DiagramDragEventArgs that contains event data.</param>
            <returns>true if the shapes in the IDataObject should be repositioned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.MoveByRepositioning(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Repositions the shapes in the ElementGroupPrototype 
            by the amount determined by the mouse position.
            </summary>
            <param name="diagramDragArgs">A DiagramDragEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.MoveByRepositioning(Microsoft.VisualStudio.Modeling.ElementGroupPrototype,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Repositions the shapes in the given prototype to the specified point.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype containing the shapes being moved.</param>
            <param name="topLevelItems">Collection of DiagramItems, constructed from the top-level shapes in the EGP.</param>
            <param name="moveDelta">The new placement of the shapes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CanMerge(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Returns a value indicating whether the shapes in the IDataObject 
            should be merged.
            The determination is based on the following conditions being true:
              (1) the DragDropEffects.Copy is an allowed effect;
              (2) the user wants to perform a Copy;
              (3) there is an ElementGroupPrototype in the IDataObject;
              (4) CanMerge( ElementGroupPrototype ) returns true.
            </summary>
            <param name="diagramDragArgs">A DiagramDragEventArgs that contains event data.</param>
            <returns>true if the shapes in the IDataObject should be duplicated.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CanMergeOnDragDropUsingExtensions(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Determines if GestureExtensions can hande the DragDrop Event
            </summary>
            <param name="diagramDragArgs">DiagramDragEventArgs object that contains event data.</param>		
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetDragMoveModifiedMousePosition(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the mouse position. The mouse position may be modified by the shift key.
            </summary>
            <param name="diagramDragArgs">The DiagramDragEventArgs that contain event data.</param>
            <param name="dragStartingPoint">The original drag location in absolute world coordinates.</param>
            <returns>The mouse position.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetDiagramItemsFromIds(System.Collections.ICollection)">
            <summary>
            Gets a collection of DiagramItems given a collection of ModelElement Ids.
            </summary>
            <param name="elementIds">A collection of Guids corresponding to ModelElement Ids.</param>
            <returns>The collection of DiagramItems.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetTopLevelShapes(System.Collections.IList)">
            <summary>
            Returns a list of top level ShapeElements from the passed list of Elements.
            </summary>
            <param name="elementList">An ArrayList of Elements to test if they are ShapeElements without parents.</param>
            <returns>A list of ShapeElements without parents from the passed list of Elements.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ShouldTryParentShapeForMergeOnToolboxDoubleClick">
            <summary>
            Controls what happens when this ShapeElement is selected and the user double-clicks a toolbox item.
            By default, if CanMerge() fails for this ShapeElement, the double-click action will walk up to this
            ShapeElement's ParentShape and try the CanMerge() again.
            If a shape overrides this method to return false, the toolbox double-click will terminate if CanMerge()
            fails.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.NavigateToFirst(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeElement to set focus to this shape's first sibling 
            (i.e., the parent's first child) in the navigation sequence.
            </summary>
            <param name="selection">The current selection whose focus will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.NavigateToNext(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeElement to set focus to the next object in the navigation sequence.
            The selection's focused item is ignored; this shape is assumed to be the ShapeElement 
            from which to start navigating.
            </summary>
            <param name="selection">The current selection whose focus will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.NavigateToPrevious(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeElement to set focus to the previous object in the navigation sequence.
            The selection's focused item is ignored; this shape is assumed to be the ShapeElement 
            from which to start navigating.
            </summary>
            <param name="selection">The current selection whose focus will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.NavigateToLast(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeElement to set focus to this shape's last sibling 
            (i.e., the parent's last child) in the navigation sequence.
            </summary>
            <param name="selection">The current selection whose focus will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.NavigateAscend(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeElement to set focus to its first 
            focusable ancestor in the navigation sequence.
            </summary>
            <param name="selection">The current selection whose focus will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.NavigateDescend(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeElement to set focus to its first 
            focusable descendant in the navigation sequence.
            </summary>
            <param name="selection">The current selection whose focus will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.NavigateTo(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by the Navigate methods to set the focus to the specified DiagramItem.
            </summary>
            <param name="newFocusItem">The DiagramItem to receive the focus.</param>
            <param name="selection">The selection to update. (The selection maintains the focus.)</param>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindFirstChild(System.Boolean)">
            <summary>
            Called by this ShapeElement to get its first 
            descendant in the navigation sequence.
            
            Called by the child ShapeElement or ShapeField to get 
            this shape's first descendant in the navigation sequence.
            </summary>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>
            The first descendant DiagramItem of this ShapeElement.
            </returns>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindNextChild(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean)">
            <summary>
            Called by the child ShapeElement or ShapeField to get 
            the child's first sibling item following it in the navigation 
            sequence.
            </summary>
            <param name="startFromChildItem">
            The DiagramItem representing the child ShapeElement or
            ShapeField from which to start the search.  
            (This DiagramItem is not included in the search.)
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>
            The next DiagramItem in the navigation sequence.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindPreviousChild(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean)">
            <summary>
            Called by the child ShapeElement or ShapeField to get 
            the child's first focusable sibling item preceding it in the navigation 
            sequence.
            </summary>
            <param name="startFromChildItem">
            The DiagramItem representing the child ShapeElement or
            ShapeField from which to start the search.  
            (This DiagramItem is not included in the search.)
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>
            The preceding DiagramItem in the navigation sequence.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindLastChild(System.Boolean)">
            <summary>
            Called by the child ShapeElement or ShapeField to get 
            this shape's last descendant in the navigation sequence.
            </summary>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>
            The last descendant of this ShapeElement.
            </returns>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindNextInChildFields(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,System.Boolean)">
            <summary>
            Finds the first DiagramItem following the specified ShapeField.
            The search is confined to this shape's ShapeField collection, including its subfields.
            </summary>
            <param name="startFromField">
            The field from which to start the search. 
            (This field is not included in the search.)
            If null, the search begins with the first field in the ShapeFields collection.
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>The first DiagramItem following the specified ShapeField.</returns>
            <remarks>
            This method may traverse descendents of the child fields  
            looking for a viable next item.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindPreviousInChildFields(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,System.Boolean)">
            <summary>
            Finds the first DiagramItem preceding the specified ShapeField.
            The search is confined to this shape's ShapeField collection, including its subfields.
            </summary>
            <param name="startFromField">
            The field from which to start the search. 
            (This field is not included in the search.)
            If null, the search begins with the last field in the ShapeFields collection.
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>The first DiagramItem preceding the specified ShapeField.</returns>
            <remarks>
            This method may traverse descendents of the child fields 
            looking for a viable previous item.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindNextInChildShapes(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Boolean)">
            <summary>
            Finds the next DiagramItem in this ShapeElement's child shapes collection 
            starting from (but not including) the specified child shape.  
            </summary>
            <param name="startFromChildShape">
            The child shape of this ShapeElement from which to start the search. 
            (This child shape is not included in the search.)
            If null, the search begins with the first child shape of this ShapeElement.
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>The next DiagramItem in this ShapeElement's child shapes collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindPreviousInChildShapes(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Boolean)">
            <summary>
            Finds the previous DiagramItem in this ShapeElement's child shapes collection 
            starting from (but not including) the specified child shape.  
            </summary>
            <param name="startFromChildShape">
            The child shape of this ShapeElement from which to start the search. 
            (This child shape is not included in the search.)
            If null, the search begins with the last child shape in the children collection.
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>The previous DiagramItem in this ShapeElement's child shapes collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindNextInLineSegments(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Finds the first DiagramItem following the specified starting point.
            </summary>
            <param name="startFrom">
            The item from which to start the search. 
            (This item is not included in the search.)
            If null, the search begins with the first item.
            </param>
            <returns>The first DiagramItem following the specified item.</returns>
            <remarks>If the line is not manually routable, then the segments in the line won't be selectable.
            If the anchor points can't be moved, then they won't be selectable either.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindPreviousInLineSegments(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Finds the first DiagramItem preceding the specified starting point.
            </summary>
            <param name="startFromField">
            The item from which to start the search. 
            (This item is not included in the search.)
            If null, the search begins with the last item.
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>The first DiagramItem preceding the specified item.</returns>
            <remarks>If the line is not manually routable, then the segments in the line won't be selectable.
            If the anchor points can't be moved, then they won't be selectable either.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.PurgeLayoutObjects">
            <summary>
            Purge all graph layout objects in this hierarchy.
            Purge all points from wires - the point collection off the shape, not the graph
            points as the are already gone.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnShapeInserted">
            <summary>
            Called when this ShapeElement is made a child ShapeElement 
            of its parent ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnShapeRemoved">
            <summary>
            Called when this ShapeElement is no longer a child ShapeElement 
            of its parent ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnAssociatedPropertyChanged(Microsoft.VisualStudio.Modeling.Diagrams.PropertyChangedEventArgs)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            This method will be called when the value changes for an 
            IMS property that has been associated with a shape field.
            See ShapeField.AssociateValueWith for more detail.
            </remarks>
            <remarks>
            This method should be called from the setter of any CLR property 
            (i.e., a non-IMS property on this shape) that has been associated 
            with a shape field.
            See ShapeField.AssociateValueWith for more detail.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor that is displayed when the mouse pointer is over the ShapeElement.
            </summary>
            <param name="currentCursor"></param>
            <param name="diagramClientView"></param>
            <param name="mousePosition">Relative to diagram's top, left.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetPotentialMouseAction(System.Windows.Forms.MouseButtons,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Retrieves a mouse action that should be made active on this (or the next)
            MouseDown event if the mouse is over the specified point.
            </summary>
            <param name="mouseButtons"></param>
            <param name="point">mouse position relative to Diagram's top-left in world units.</param>
            <param name="hitTestInfo"></param>
            <returns>The mouse action that should be made active on the next MouseDown event.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ShapeFields">
            <summary>
            A collection of shape fields for this type of shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CreateShapeFields">
            <summary>
            Instantiates the collection of shape fields for this type of shape.
            </summary>
            <returns>The shape field collection initialized with the shape fields for this shape.</returns>
            <remarks>
            This method calls InitializeShapeFields() 
            after instantiating an empty shape field collection.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.InitializeShapeFields(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.ShapeField})" -->
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Decorators">
            <summary>
            A collection of decorators for this type of shape.  Return null if this type has no decorators.
            By default, shapes do not have decorators.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CreateDecorators">
            <summary>
            Instantiates the collection of decorators for this type of shape.
            </summary>
            <remarks>
            This method calls InitializeDecorators() 
            after instantiating an empty decorator collection.
            
            Like shape fields, decorators are instantiated per-type, not per-instance.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.InitializeDecorators(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.ShapeField},System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.Decorator})">
            <summary>
            Instantiates and adds shape fields (such as text and images) to this shape type.
            </summary>
            <param name="shapeFields">List containing shape fields for this type.  This list must be initialized prior to calling InitializeDecorators.</param>
            <param name="decorators">List that should be filled by this method with decorators for this shape type.</param>
            <remarks>
            Override this method to add decorators to this shape type.  Decorators wrap shape fields, and may appear
            either inside or outside of the bounds of a shape (shape fields are restricted to appearing within a shape). 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindShapeField(System.String)">
            <summary>
            Returns the first ShapeField with the given name in the ShapeFields collection.
            If a field with the given name is not found, this method returns null.
            </summary>
            <param name="fieldName">Identifier for the field to return.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FindDecorator(System.String)">
            <summary>
            Finds the Decorator with the given name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.PaintMoveableDecoratorSelectionLines">
            <summary>
            When this shape is selected, whether to draw one selection line to each moveable decorator attached to this
            shape, if the decorator has been manually placed or sized.
            The base implementation returns true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Diagram">
            <summary>
            Gets the diagram that this ShapeElement belongs to.
            (This can be null.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.IsConnectedToDiagram">
            <summary>
            Gets a value indicating whether the shape is connected to a diagram.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.PerformResizeParentRule">
            <summary>
            Sets up and fires the ResizeParentRule with the appropriate information
            for this shape's parent.  It only fires the event once per iteration and
            keeps a list of all of the changes that will be handled later.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.PerformResizeParentRule(System.Boolean,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Sets up and fires the ResizeParentRule with the appropriate information
            for this shape's parent.  It only fires the event once per iteration and
            keeps a list of all of the changes that will be handled later.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ParentShape">
            <summary>
            ParentShape DomainRole
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.InvalidateParentShapeCache">
            <summary>
            Called whenever the relationship between this child shape and its 
            parent shape changes.  This will be called in Undo, Redo, Do, and 
            Rollback.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ParentShapeCacheEnabled">
            <summary>
            Gets or sets a value indicating whether the ParentShape caching is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.IsNestedChild">
            <summary>
            Gets a value indicating whether this shape is a nested child of its parent rather than a relative child.
            A nested child is clipped by its parent shape, whereas a relative child is not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.IsRelativeChild">
            <summary>
            Gets a value indicating whether this shape is a relative child of its parent rather than a nested child.
            A nested child is clipped by its parent shape, whereas a relative child is not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.RelatedShapeToEmphasize">
            <summary>
            Gets the related ShapeElement that should be visually emphasized
            to the user when this shape is selected.  This appearance is
            different from selection and does not indicate that the related
            shape is selected.  The intent is to draw the user's attention
            to the related shape to help provide context.
            This property returns null if no shape should be emphasized.
            
            An example usage: The user may not be clear as to which shape a
            label is associated with, so by visually emphasizing the label's 
            parent shape when the label is selected, the user can quickly 
            identify the related shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.IsDescendantOf(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns a value indicating whether this shape is a descendant of the specified shape.
            </summary>
            <param name="potentialAncestor"></param>
            <returns>true if this shape is a descendant of the specified shape.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.HasChildren">
            <summary>
            Gets a value indicating whether the ShapeElement has one or more child ShapeElements
            with either a relative or nested relationship.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ShouldReparentOnMove">
            <summary>
            Decides whether or not a shape should be reparented when it's moved.
            </summary>
            <returns>true means it should reparent; false means it should not.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Perimeter">
            <summary>
            Gets the graphics path which encompasses the ShapeElement outline, including the 
            thickness of the outline pen that lies outside of the ShapePath.
            The points in the path are in world units relative to the parent ShapeElement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OutlinePenWidth">
            <summary>
            Gets the outline pen width in world units.  
            This is useful for inflating the ShapeElement bounding 
            rectangle for invalidation purposes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.MaximumShadowOffset">
            <summary>
            Gets the maximum shadow offset in world units.  
            All shadow offsets must be less than this amount.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ModifyLuminosity(System.Int32,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Calculates highlight luminosity based on:
            	if L >= 160, then L = L * 0.9
            	else, L += 40.
            </summary>
            <param name="currentLuminosity">Current luminosity</param>
            <returns>New luminosity value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetShapeLuminosity(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Drawing.Color)">
            <summary>
            Calculates shape's luminosity based on current color's luminosity, and
            whether or not it's in the highlight list.
            </summary>
            <param name="view">Current DiagramClientView to query for highlighting.</param>
            <param name="color">Color to update.</param>
            <returns>Updated color.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ExcludeFromClipRegion(System.Drawing.Graphics,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Excludes this ShapeElement and its descendent ShapeElements from the clipping region in 
            the specified Graphics object.
            </summary>
            <param name="graphics">Graphics object with valid clipping region</param>
            <param name="matrix">The matrix is used to translate the ShapeElement's ShapeGeometry's 
            graphics path to compensate for the parent-relative location of the ShapeElement.
            </param>
            <param name="perimeter">The perimeter path of this ShapeElement (For optimization purposes only; it can be null, in which case it will be recalculated.)</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Center">
            <summary>
            Gets the center point of the ShapeElement's bounds.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AbsoluteCenter">
            <summary>
            Gets the Center of the ShapeElement's Absolute Bounds relative to the Diagram's top-left corner
            regardless of the parent ShapeElement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CanMove">
            <summary>
            Gets a value indicating whether the user is allowed to reposition the ShapeElement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CanSelect">
            <summary>
            Gets a value indicating whether the user is allowed to select the ShapeElement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CanFocus">
            <summary>
            Gets a value indicating whether the ShapeElement can receive the focus.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Focused(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether this shape is focused in the specified view.
            </summary>
            <param name="view">The DiagramClientView to be checked.</param>
            <returns>true if this shape is focused.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Selected(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether this shape is selected in the specified view.
            </summary>
            <param name="view">The DiagramClientView to be checked.</param>
            <returns>true if this shape is selected.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AllowsChildrenInSelection">
            <summary>
            Gets whether or not this shape's children are allowed in the same
            selection group as this parent.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CoerceSelection(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Boolean)">
            <summary>
            Allows a shape to change the selected items. Called from the select action.
            </summary>
            <param name="item">Diagram item that's being affected.</param>
            <param name="view">View that we're operating on.</param>
            <param name="isAddition">Whether selection is being added or removed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ParentLink">
            <summary>
            Gets the relationship to the parent ShapeElement. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ShapeGeometry">
            <summary>
            Gets the ShapeGeometry object associated with this ShapeElement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AllowsChildrenToResizeParent">
            <summary>
            Gets value which determines if child shapes are allowed to resize this shape.
            </summary>
            <value>true - this shape resizes based on its children; false - children are clipped.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AllowsChildrenToShrinkParent">
            <summary>
            Gets value which determines if this shape can be shrunk as well as grown by
            changes to its nested children.
            </summary>
            <value>direction in which it can be shrunk.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.HasShadow">
            <summary>
            Gets a value indicating whether to draw the ShapeElement's shadow
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.HasOutline">
            <summary>
            Gets a value indicating whether to draw the outline 
            of the shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.HasFilledBackground">
            <summary>
            Gets a value indicating whether to draw the background 
            of the shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.HasHighlighting">
            <summary>
            Gets a value indicating whether to draw the ShapeElement's highlight
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OutlinePenId">
            <summary>
            Gets the pen resource id that will be used to
            draw the outline of the geometry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.BackgroundBrushId">
            <summary>
            Gets the brush resource id that will be used to
            fill the background of the geometry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.localVisible">
            <summary>
            Whether this shape has explicitly been set visible or invisible
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.derivedVisible">
            <summary>
            Whether this shape has been calculated to be visible or invisible based on its parent shape hierarchy
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.IsVisible">
            <summary>
            Gets the visibility attribute of this shape.
            </summary>
            <value>true means this shape is visible; otherwise it's invisible.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.UpdateDerivedVisible(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Update the derived visible state of this shape
            </summary>
            <param name="source">The shape causing this shape to re-evaluate its state</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CalculateDerivedVisible(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Calculate the DerivedVisible value for this shape, assuming the parent is correct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.PermitChildVisibility(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Opportunity to influence the visibility of your child shapes
            </summary>
            <param name="relatedShape">The child shape to constrain</param>
            <returns>Whether the given child shape should be visible</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Show">
            <summary>
            Show (Make visible) the shape and all its children
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.Hide">
            <summary>
            Hide (make invisible) the shape and all its children
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.SetShowHideState(System.Boolean)">
            <summary>
            Set the visibility state of the shape and all its children
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.SetShowHideStateImplementation(System.Boolean)">
            <summary>
            Main impementation for Show and Hide
            </summary>
            <param name="show">Whether to show or hide the shape</param>
            <param name="recurse">Include all children in the operation</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ProcessVisibilityChange(System.Boolean)">
            <summary>
            Process the consequential change from a change in the visibility of this shape
            </summary>
            <param name="show">The new visibility state of the shape</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.SetGraphLayoutVisibility(Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject,System.Boolean)">
            <summary>
            Helper to set the necessary flags on the GLO
            </summary>
            <param name="show"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GeometryStyleSet">
            <summary>
            Gets the style set to use for the geometry.
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GeometryBoundingBox">
            <summary>
            Gets the bounding box of the geometry.
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GeometryHasShadow">
            <summary>
            Gets a value indicating whether the geometry displays a shadow.
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GeometryHasOutline">
            <summary>
            Gets a value indicating whether the outline of the geometry
            will be drawn.
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GeometryHasFilledBackground">
            <summary>
            Gets a value indicating whether the background of the geometry 
            will be filled.
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GeometryOutlinePenId">
            <summary>
            Gets the pen resource id that will be used to
            draw the outline of the geometry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GeometryBackgroundBrushId">
            <summary>
            Gets the brush resource id that will be used to
            fill the background of the geometry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.UpdateGeometryLuminosity(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Drawing.Pen)">
            <summary>
            Modifies the luminosity of the specified pen.
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
            <param name="view">The DiagramClientView which may maintain useful highlighting information.</param>
            <param name="pen">The pen whose luminosity is to be updated.</param>
            <returns>The old color for the caller to reset if needed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.UpdateGeometryLuminosity(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Drawing.Brush)">
            <summary>
            Modifies the luminosity of the specified brush.
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
            <param name="view">The DiagramClientView which may maintain useful highlighting information.</param>
            <param name="brush">The brush whose luminosity is to be updated.</param>
            <returns>The old color for the caller to reset if needed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ExcludeGeometryFromClipRegion(System.Drawing.Graphics,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Excludes from the clipping region this geometry,
            including geometries of descendant IGeometryHost objects. 
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
            <param name="graphics">
            Graphics object with valid clipping region.
            </param>
            <param name="matrix">
            The matrix used to translate the geometry's graphics path 
            to compensate for the parent-relative location of the geometry's 
            corresponding diagram item.
            </param>
            <param name="perimeter">
            The perimeter path of this geometry (For optimization purposes 
            only; it can be null, in which case it will be recalculated.)
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.TranslateGeometryToAbsoluteBounds(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Translates a rectangle from coordinates relative to the top-left 
            of the IGeometryHost's parent to absolute world coordinates.
            </summary>
            <param name="relativeBounds">
            The bounds of the geometry relative to the top-left of the 
            IGeometryHost's parent to the top-left of the diagram.
            </param>
            <returns>The absolute bounds of the geometry.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.TranslateGeometryToRelativeBounds(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Translates a rectangle from absolute world coordinates to 
            coordinates relative to the top-left of the IGeometryHost's parent.
            </summary>
            <param name="absoluteBounds">
            The rectangle in world units relative to the Diagram's top-left.
            </param>
            <returns>The rectangle relative to the top-left of the IGeometryHost's parent.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AbsoluteBoundingBox">
            <summary>
            Gets the bounding rectangle in world units and 
            relative to the top-left of the diagram.
            </summary>
            <remarks>
            The coordinate system increases positively down and to the right.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AbsoluteBoundingBoxToEnsureVisible">
            <summary>
            Gets the bounding rectangle that DiagramClientView.EnsureVisible will use.
            The rectangle is in world units and relative to the top-left of the diagram. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.BoundingBox">
            <summary>
            Gets the bounding rectangle in world units and 
            relative to the top-left of this ShapeElement's parent.
            </summary>
            <remarks>
            The coordinate system increases positively down and to the right.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.TranslateToAbsoluteBounds(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Translates a rectangle from coordinates relative to the 
            parent shape to absolute world coordinates.
            </summary>
            <param name="relativeBounds">
            The rectangle in world units relative to the parent ShapeElement's top-left corner.
            </param>
            <returns>The rectangle relative to the Diagram's top-left corner.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.TranslateToRelativeBounds(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Translates a rectangle from absolute world coordinates to 
            coordinates relative to the parent shape.
            </summary>
            <param name="absoluteBounds">
            The rectangle in world units relative to the Diagram's top-left corner.
            </param>
            <returns>The rectangle relative to the parent ShapeElement's top-left corner.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GraphWrapperChange">
            <summary>
            Changes (or initially sets) the cached GraphWrapper object for this ShapeElement.
            (This can return null if the ShapeElement does not belong to a diagram.)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.EnsureGraphLayoutObjectForNextedShapes">
            <summary>
            This method is needed for nested shapes fixup
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CreateSubGraphWrapper(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Creates GraphWrapper for parentShape, GraphLayoutObject for parentShape and assosiates the SubGraph with the SubGraphsWrappers' Graph
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.IsGraphLayoutObjectValid(Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject)">
            <summary>
            Returns whether the specified graph object is valid
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.SubGraphWrapper">
            <summary>
            Gets or sets the subGraphWrapper object for this ShapeElement.
            (This can return null if the ShapeElement does not belong to a diagram.)
            Note that this will retrieve the Parent's subgraph and cache it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GraphWrapper">
            <summary>
            Gets or sets the GraphWrapper for this ShapeElement's subgraph.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GraphLayoutObject">
            <summary>
            Gets the graph layout object associated with this ShapeElement.
            (This can be null if the ShapeElement does not belong to a diagram.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.LineAffinityDefault">
            <summary>
            Gets or sets a value that indicates whether intermediate line segments
            of child link shapes should try to align when the link shapes
            share a common connected shape.  Intermediate line segments are the
            segments that do not contain either LinkShape endpoints.  This
            property does not affect affinity of this shape with sibling shapes; it
            only applies to link shapes that are children of this shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.LineAdjustAwayDefault">
            <summary>
            Gets or sets a value that indicates whether intermediate line segments
            of child link shapes should try to align when the link shapes
            share a common connected shape.  Intermediate line segments are the
            segments that do not contain either LinkShape endpoints.  This
            property does not affect affinity of this shape with sibling shapes; it
            only applies to link shapes that are children of this shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.LineToLineClearance">
            <summary>
            Gets or sets the clearance in world units between child link shapes.
            This property does not affect line-to-line clearance of this shape 
            with sibling shapes; it only applies to link shapes that are children 
            of this shape.
            This value must be greater than 1e-6.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.LineToNodeClearance">
            <summary>
            Gets or sets the clearance in world units between child link shapes
            and child node shapes.  
            This property does not affect line-to-node clearance of this shape 
            with sibling shapes; it only applies to shapes that are children 
            of this shape.
            This value must be greater than 1e-6.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.NodeToNodeClearance">
            <summary>
            Gets or sets the clearance in world units between child node shapes.
            This property does not affect node-to-node clearance of this shape 
            with sibling shapes; it only applies to node shapes that are children 
            of this shape.
            This value must be greater than 1e-6.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.RemoveLayoutObject">
            <summary>
            removes (deletes) this ShapeElement from the GraphWrapper as well as
            its relative and nested child shapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CreateGraphLayoutObject">
            <summary>
            This method creates the GraphLayoutObject for 'this' - via the overridden methods.
            </summary>
            <returns>the created layout object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.BaseCreateGraphLayoutObject">
            <summary>
            Do common tasks associated with creating a new layout object
            </summary>
            <returns>true - o.k. to proceed, false - stop</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.BaseCreateGraphLayoutObjectEnd">
            <summary>
            Do common tasks associated with end of creating a new layout object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.SetInitialGraphLayoutVisibility">
            <summary>
            If this shape's visibility has been adjusted before the graph layout object 
            is created then make sure the two are in sync.
            </summary>
            <remarks>Should be called by all overrides for CreateGraphLayoutObject</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CreateGraphLayoutObjectParentage">
            <summary>
            Creates a life support chain of corresponding layout objects in the
            Graph Object for this ShapeElement.  Creates this any needed parent objects
            in the nested or relative shape hierarchy.
            Naturally, the creation will recurse on itself until the entire
            parent hierarchy (nested and relative) is created.
            This WILL NOT create the actual 'this' layout object.  Just the parents.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CreateGraphLayoutObjectsRelative">
            <summary>
            Creates the relative and nested children of the graph layout object
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ZOrder">
            <summary>
            Gets the relative Z-Order for this ShapeElement.
            If this is a diagram then this is the most recent z-order number used to renumber.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ClassStyleSet">
            <summary>
            Gets the style set shared amongst all instances of this class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CreateClassStyleSet">
            <summary>
            Creates the class style set for this ShapeElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ResetClassStyleSet(System.Boolean)">
            <summary>
            Resets the class style set information depending on whether we're going into 
            high contrast mode or not.
            </summary>
            <param name="highContrast">Whether or we're going into high contrast.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.InitializeResources(Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Adds new resources or overrides existing resources for this type of ShapeElement.
            This method is called after the class style set has been instantiated.
            Override this method to add new resources or modify existing resources 
            for this ShapeElement type.
            </summary>
            <param name="classStyleSet"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.StyleSet">
            <summary>
            Gets the instance StyleSet if this ShapeElement has one, otherwise gets the ClassStyleSet.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.InitializeInstanceResources">
            <summary>
            Overrides existing resources for this instance of ShapeElement.
            This method is called after the instance style set has been instantiated.
            Override this method to modify existing resources for this ShapeElement instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CreateInstanceStyleSet">
            <summary>
            Create this instance's style set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AssociateValueWith(Microsoft.VisualStudio.Modeling.Store,System.Guid)">
            <summary>
            Associates this shape's resource with an IMS property value on the ShapeElement itself.
            </summary>
            <param name="store">Store containing the element instances that should be associated.</param>
            <param name="domainPropertyId">The guid supplied in the MetaObject attribute of a property on this ShapeElement.</param>
            <remarks>
            ShapeElement resources can be associated with an IMS property.
            The associated ShapeElements will automatically update by receiving 
            Invalidate calls when the IMS property value changes.  You can change resources in response
            to the changes by overriding the OnPrePaint method and changing the resources there.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.AssociateValueWith(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo)">
            <summary>
            Associates this shape's resource value with an IMS property value.
            Use this method when the IMS property exists on an element that is not this ShapeElement.
            </summary>
            <param name="store">Store containing the element instances that should be associated.</param>
            <param name="propertyGuid">The guid of a Property on a DomainClass</param>
            <param name="domainPresentationNavigator">Deletegate to traverse from domain element to presentation element.</param>
            <param name="presentationDomainNavigator">Deletegate to traverse from presentation element to domain element.</param>
            <remarks>
            ShapeElement resources can be associated with an IMS property.
            The associated ShapeElements will automatically update by receiving 
            Invalidate calls when the IMS property value changes.  You can change resources in response
            to the changes by overriding the OnPrePaint method and changing the resources there.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetAccessibilityObject(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Gets the AccessibleObject assigned to the element
            </summary>
            <param name="diagramClientView">DiagramClientView</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetFieldAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetFieldAccessibleValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetFieldAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetSubFieldAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="subfield"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetSubFieldAccessibleValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="subfield"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetSubFieldAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="subfield"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetFieldRepresentedElement(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Gets the primary ModelElement that the specified child ShapeField represents.
            </summary>
            <param name="field">A child ShapeField of this ShapeElement.</param>
            <returns>
            The primary ModelElement that the specified child ShapeField represents.
            </returns>
            <remarks>
            This is intended to be used by accessibility, selection, and in-place editing.
            For example, the specified ShapeField may be part of a selection (as a DiagramItem),
            but the selection is only interested in the ModelElement that the ShapeField represents.
            Similarly, the specified ShapeField (as a DiagramItem) may be queried by an Accessibility 
            client for the accessible name and description, which is automatically handled by the ModelElement.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetFieldRepresentedProperty(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Gets property information that the specified ShapeField represents.
            </summary>
            <param name="field"></param>
            <returns></returns>
            <remarks>
            This is intended to be used by accessibility, selection, and in-place editing.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetFieldValueRepresentedElement(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Gets the element that hosts the value represented by the specified ShapeField.
            </summary>
            <param name="field">The ShapeField</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetSubFieldRepresentedElements(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Gets a collection of ModelElements that the specified ShapeSubField represents.
            </summary>
            <param name="field">A child ShapeField of this ShapeElement.</param>
            <param name="subField">A child ShapeSubField of the specified ShapeField.</param>
            <returns>
            A collection of ModelElements that the specified child ShapeSubField represents.
            </returns>
            <remarks>
            This is intended to be used by accessibility, selection, and in-place editing.  
            For example, the specified ShapeSubField (as a DiagramItem) may be part of a selection,
            but the selection is only interested in the ModelElement that the ShapeField represents.
            Similarly, the specified ShapeSubField (as a DiagramItem) may be queried by an Accessibility 
            client for the accessible name and description, which is automatically handled by the ModelElement.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetSubFieldRepresentedProperty(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Gets the property descriptor associated with the specified subfield.
            </summary>
            <param name="field">A child ShapeField of this ShapeElement.</param>
            <param name="subField">A child ShapeSubField of the specified ShapeField.</param>
            <returns>The property descriptor associated with the specified subfield.</returns>
            <remarks>
            This is intended to be used by in-place editing.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetSubFieldRepresentedPropertyElements(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Gets the element that hosts the property displayed by a subfield. This
            may be different from the element returned by GetSubFieldRepresentedElements
            because the actual DomainPropertyInfo returned by GetSubFieldRepresentedProperty
            may be hosted in a child of the represented element. 
            </summary>
            <param name="field"></param>
            <param name="subField"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.HasToolTip">
            <summary>
            Get/Set whether or not the Shape shows a mouse hover tooltip by default
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetToolTipText(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Gets the tooltip text for the PEL element under the cursor
            </summary>
            <param name="diagramitem">this contains the shape,field, and subfield under the cursor</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.HasDragOverToolTip">
            <summary>
            Returns whether drag-over tooltip is supported by this shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetDragOverToolTipText(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Returns mouse drag over tooltip text to show.
            </summary>
            <param name="item">Diagram item under the mouse.</param>
            <returns>Tooltip text.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.HasCustomToolTip">
            <summary>
            Returns whether this shape has a custom rendering of a tooltip
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.HideCustomToolTip(System.Windows.Forms.IWin32Window)">
            <summary>
            Hide the shape's custom tooltip
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ShowCustomToolTip(System.String,System.Windows.Forms.IWin32Window,System.Drawing.Point)">
            <summary>
            Show the shape's custom tooltip with the given hints on text and position
            </summary>
            <param name="text">Hint as to what text to show in the tooltip</param>
            <param name="window"></param>
            <param name="point"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FixUpChildShapes(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Called by Diagram.FixUpDiagram() to provide the opportunity to 
            create and/or configure child shapes in response to adding
            the specified child element to the model.
            </summary>
            <param name="childElement">The child element recently added to the model.</param>
            <returns>
            The root ShapeElement configured for the given childElement.  If no shape was configured, then
            null is returned.
            </returns>
            <remarks>
            This method calls ShouldAddShapeForElement() to determine if a child 
            ShapeElement should be added automatically to this ShapeElement.  
            </remarks>
            <remarks>
            If a shape should be added, then this method will create a ShapeElement 
            with a type chosen by ChooseShape().  If the ShapeElement already
            exists (such as from a paste operation) and is not yet connected to the 
            Diagram, then a new ShapeElement will not be created and the existing one 
            will be added to the Diagram instead. 
            </remarks>
            <remarks>
            After the ShapeElement has been made a child of this shape, this 
            method calls OnChildConfiguring() and OnChildConfigured(), providing an
            opportunity for this shape to configure the new child shape.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.PurgePoints">
            <summary>
            This method removes any points present
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ConfigureAndPlaceChildShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.ModelElement,System.Boolean)">
            <summary>
            This method configures and places the new childShape.
            </summary>
            <param name="childShape">The new childPel to configure and place.</param>
            <param name="childElement">Optional MEL that the childPel is associated with.  If provided, its children elements will be userFixed up, as well.</param>
            <param name="createdDuringViewFixup">Set to true if the childShape was created during view fixup.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.FixUpGrandChildShapes(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Fixes up the children of shape/modelElement
            </summary>
            <param name="shape"></param>
            <param name="modelElement"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.IsViewFixupPlacementContextApplicable(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Returns true if we can place shapes using view fixup context.
            </summary>
            <param name="parentDiagram">For the child shape we're trying to place, this is the child shape's parent shape's diagram.</param>
            <returns>True if we can place shapes using view fixup context.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.PlaceChildShapeUsingContext(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Places the specified child shape using transaction context.
            </summary>
            <param name="childNodeShape">The child shape to place.</param>
            <param name="parentDiagram">The child shape's parent shape's diagram.</param>
            <returns>True if the child was placed, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.MarkChildShapeAsUnplaced(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Boolean)">
            <summary>
            Add the child node shape to the UnplacedShapesContext collection, thereby marking it as unplaced.
            It will be automatically placed later during view fixup.
            </summary>
            <param name="childNodeShape">The child node shape to mark as unplaced.</param>
            <param name="parentDiagram">The child shape's parent shape's diagram.</param>
            <param name="createdDuringViewFixup">Set to true if the child node shape was created during view fixup.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.RebuildShape">
            <summary>
            Performs view fixup on this ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.IsRootElement(Microsoft.VisualStudio.Modeling.Transaction,Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            
            </summary>
            <param name="shapeElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ShouldAddShapeForElement(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to get a value indicating
            whether a ShapeElement should be created and added as a child of 
            this ShapeElement.
            </summary>
            <remarks>
            Default behavior is to route this call to the current Diagram.
            </remarks>
            <param name="element">The ModelElement recently added to the model.</param>
            <returns>true if a child ShapeElement should be added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ChooseParentShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to determine which shape should
            be the parent shape for the new child shape.  By default, this ShapeElement
            will be the parent, but there may be cases where a different shape should be.
            </summary>
            <param name="childShape">The new child shape that needs to be wired up.</param>
            <returns>The shape that should be a parent shape for the child.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.RelationshipType">
            <summary>
            Defines the type of parent-child relationships allowed by the 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.RelationshipType.Nested">
            <summary>
            A relationship type characterized by the child ShapeElement 
            being constrained to the bounds of the parent ShapeElement.
            The child shape will maintain its relative position from the parent shape
            as the parent shape moves.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.RelationshipType.Relative">
            <summary>
            A relationship type characterized by the child ShapeElement
            being unconstrained by the parent ShapeElement's bounds.
            The child shape will maintain its relative position from the parent shape
            as the parent shape moves.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ChooseRelationship(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to get the type of relationship the
            child ShapeElement has to its parent.
            </summary>
            <param name="childShape">Child shape to be added to this shape.</param>
            <returns>The RelationshipType to create.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.CreateChildShape(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to retrieve a new instance of a child
            shape for the given model element.
            </summary>
            <remarks>
            Default behavior is to redirect the call to the current Diagram.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnChildConfiguring(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Boolean)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to allow
            this ShapeElement to pre-configure its specified child
            ShapeElement.  This is called immediately after the
            shape becomes a child of this ShapeElement, but before
            the shape has been positioned on the target shape.
            </summary>
            <remarks>
            Default behavior is to redirect the call to the current Diagram.
            </remarks>
            <param name="child">newly added child shape.</param>
            <param name="createdDuringViewFixup">True if the child shape was created by the view fixup process (via a call to CreateChildShape), false otherwise.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnChildConfigured(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Boolean,System.Boolean)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to allow
            this ShapeElement to post-configure its specified child
            ShapeElement.  After OnChildConfiguring() is called,
            the new child shape is positioned at its drop target 
            location (if applicable).  This is called next, regardless
            of whether the child shape was positioned or not.
            </summary>
            <remarks>
            Default behavior is to redirect the call to the current Diagram.
            </remarks>
            <param name="child">Newly added child shape.</param>
            <param name="childWasPlaced">True if the child shape was placed at a drop location, false otherwise.</param>
            <param name="createdDuringViewFixup">True if the child shape was created by the view fixup process (via a call to CreateChildShape), false otherwise.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnBoundsFixup(Microsoft.VisualStudio.Modeling.Diagrams.BoundsFixupState,System.Int32,System.Boolean)">
            <summary>
            Allows last opportunity for bounds to be userFixed during view and diagram fixup.
            You can override this method to apply any specific bounds fixup changes you want to apply.
            </summary>
            <param name="fixupState">specifies when OnBoundsFixup is being called.</param>
            <param name="iteration">iteration through the diagram fixup loop for parent resize and
            shape anchoring.</param>
            <param name="createdDuringViewFixup">True if the child shape was created by the view fixup process (via a call to CreateChildShape), false otherwise.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetChildElements(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to get a 
            collection of ModelElements that are considered child
            elements of the specified ModelElement.  The child 
            elements returned should have corresponding shape types 
            that can be instantiated as child shapes of this 
            ShapeElement.
            </summary>
            <param name="parentElement">The element for which to find child elements.</param>
            <returns>A collection of ModelElements that are considered children of the specified ModelElement.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.TargetToolboxItemFilterAttributes">
            <summary>
            Returns a collection of ToolboxItemFilterAttribute objects for this shape.  These attributes are used
            to determine items that are enabled/disabled in the toolbox.  The collection returned here becomes
            part of the collection that toolbox items must match in order to be enabled.  To define the collection
            that is part of the toolbox item itself, apply ToolboxItemFilterAttribute(s) to the ModelElement that
            represents the toolbox item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.IterateShapes(Microsoft.VisualStudio.Modeling.Diagrams.IShapeIterator)">
            <summary>
            A method to help iterator through a shape and all its child shapes. The method will recursively go through all the child shapes of this shape
            and call the given iterator with each shape encountered. 
            Note: The base implementation is that the traversal is depth-first, and NestedChildShapes are iterated before 
            RelativeChildShapes.
            </summary>
            <param name="iterator">A shape iterator that will be called with each iterated shapes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.OnOrphaned(Microsoft.VisualStudio.Modeling.SerializationResult)">
            <summary>
            During deserialization, if a shape is not connected to any model element through PresentationViewsSubject relationship when it should, 
            it is considered "orphaned". This method is called when such a shape is encountered during deserialization.
            Note: The base implementation will remove the shape.
            </summary>
            <param name="serializationResult">SerializationResult that can store any serialization warning/error in case the derived shapes choose to override the base behavior.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.ToString">
            <summary>
            Returns the accessible-name of this object, plus its subtype.
            </summary>
            <returns>accessibleName, plus type name of the object.</returns>
            <remarks>Useful for debugging..</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.GetTypedPelOnDiagram``1(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            For the given model element and the diagram object, this method tries to find the PEL associated with this MEL which resides in the passed in diagram
            </summary>
            <typeparam name="T">PEL type</typeparam>
            <param name="diagram">diagram where the returned pel resides</param>
            <param name="mel">model element of the PresentationElement.Subject</param>
            <returns>PresentationElement of the passed in model element under the passed in diagram. null if there's no PEL can be found under the diagram.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape">
            <summary>
            DomainClass NodeShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.NodeShape
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.DomainClassId">
            <summary>
            NodeShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.IsExpandedDomainPropertyId">
            <summary>
            IsExpanded domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.IsExpanded">
            <summary>
            Gets or sets the value of IsExpanded domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.Is Expanded
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.IsExpandedPropertyHandler">
            <summary>
            Value handler for the NodeShape.IsExpanded domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.IsExpandedPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the NodeShape.IsExpanded domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.IsExpandedPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the NodeShape.IsExpanded domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.IsExpandedPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.IsExpandedPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AbsoluteBoundsDomainPropertyId">
            <summary>
            AbsoluteBounds domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AbsoluteBounds">
            <summary>
            Gets or sets the value of AbsoluteBounds domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.Absolute
            Bounds
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AbsoluteBoundsPropertyHandler">
            <summary>
            Value handler for the NodeShape.AbsoluteBounds domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AbsoluteBoundsPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the NodeShape.AbsoluteBounds domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AbsoluteBoundsPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the NodeShape.AbsoluteBounds domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AbsoluteBoundsPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AbsoluteBoundsPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.Link">
            <summary>
            Gets a list of Link.
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.Nodes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.portPlacementHelper">
            <summary>
            Helper class to position ports
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.BackgroundGradientFieldName">
            <summary>
            Unique identifier for the background gradient field for this shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.InitializeShapeFields(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.ShapeField})">
            <summary>
            Overriden to provide support for background gradients.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.PortPlacementHelper">
            <summary>
            Gets the helper class that encapsulates all of the port placement required
            for its parent shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.BackgroundGradientMode">
            <summary>
            Gets the gradient mode for the shape background area.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.HasBackgroundGradient">
            <summary>
            Returns whether a GeometryShape has a background gradient
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.OnParentNodeShapeChanged(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            This method is invoked if
            a) ParentShape is NodeShape
            b) ParentShape either moved or resized.
            </summary>
            <param name="oldParentAbsoluteBounds">old AbsoluteBounds of Parent</param>
            <param name="newParentAbsoluteBounds">new AbsoluteBounds of Parent</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CreateBackgroundGradientField(System.String)">
            <summary>
            Creates the AreaField which covers the background area of the shape and displays the
            gradient fill.  Derived classes may override this to change the type of field that is created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AbsoluteBoundingBox">
            <summary>
            Gets the bounding rectangle in world units relative to the top-left of the diagram.
            </summary>
            <remarks>
            The coordinate system is in world units and increases 
            positively down and to the right.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.BoundingBox">
            <summary>
            Gets the bounding rectangle in world units relative to the top-left of the parent shape.
            </summary>
            <remarks>
            The coordinate system increases positively down and to the right.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.Bounds">
            <summary>
            Gets or sets the shape's bounds in world units relative to the top-left of the parent shape.
            </summary>
            <remarks>
            The coordinate system is in world units and increases 
            positively down and to the right.
            
            The BoundingBox is only gettable and refers to the calculated 
            rectangular space that a shape is entirely within.
            The Bounds, on the other hand, is both settable and gettable, 
            and the BoundingBox is based on the Bounds.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.InitialBounds">
            <summary>
            Holds the cached initial bounds that a NodeShape may be set to before it has
            been added to a parent.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of the 
            shape's bounds relative to the upper-left corner of its parent.
            </summary>
            <remarks>
            The coordinate system is in world units and increases 
            positively down and to the right.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.Size">
            <summary>
            Gets or sets the size of the shape's size.
            </summary>
            <remarks>
            The coordinate system is in world units and increases 
            positively down and to the right.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.GetAbsoluteBoundsValue">
            <summary>
            Provides backing storage for the NodeShape.AbsoluteBounds property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.SetAbsoluteBoundsValue(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Provides backing storage for the NodeShape.AbsoluteBounds property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.GetIsExpandedValue">
            <summary>
            Provides storage for the NodeShape.IsExpanded property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.SetIsExpandedValue(System.Boolean)">
            <summary>
            Provides storage for the NodeShape.IsExpanded property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.GetCompliantAnchorPoint(Microsoft.VisualStudio.Modeling.Diagrams.AnchorPoint,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGRoutingStyle)">
            <summary>
            Calculates compliant AnchorPoint based of the proposedAnchorPoint parameter.
            This method completely ignores the co-ordinates of the anchorPoint parameter.
            Calculations are done based on the co-ordinates of the proposedAnchorPoint and the anchorPoint at opposite end of the link corresponding
            to the anchorPoint parameter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.PerformShapeAnchoringRule">
            <summary>
            Sets up and fires the ShapeAnchoringRule with the appropriate information
            for this shape's parent.  It only fires the event once per iteration and
            keeps a list of all of the changes that will be handled later.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.Anchoring">
            <summary>
            Gets the Anchoring behavior for this NodeShape.
            </summary>
            <remarks>
            The AnchoringBehavior describes how the NodeShape should
            position and size itself as the parent NodeShape moves and
            resizes.
            
            Alter the returned BoundsBehavior object to describe
            how the NodeShape should reposition and resize itself.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.HasAnchoring">
            <summary>
            Gets whether or not this NodeShape has anchoring to its parent turned enabled.
            </summary>
            <value>If true this shape is anchored to its parent; otherwise no anchoring exists.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CalculateAnchoredBounds(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            Calculates the relative bounding box for this shape based on its parent's size and the
            anchoring rules set on this NodeShape.
            </summary>
            <param name="parentShape">Parent NodeShape to anchor this shape to.</param>
            <returns>A RectangleD with an anchored bounds for this shape.  The bounds is relative, not absolute.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CalculateMinimumSizeBasedOnChildren">
            <summary>
            Calculates the minimum size needed for this shape to fit all of its children within it.
            </summary>
            <returns>Returns the minimum size needed for this shape.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.MinimumSize">
            <summary>
            The minimum size of this shape
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CalculateSizeBasedOnChildren">
            <summary>
            Calculates the expected size for this shape so that it fits all of its children within it.
            This method really only makes sense if this shape's AllowsChildrenToResizeParent property 
            returns true.
            
            This shape's AllowsChildrenToShrinkParent property is used to determine the expected size.
            The AllowsChildrenToShrinkParent property indicates which direction the parent can be 
            shrunk: horizontally, vertically, or both.
            
            If this property is set to ResizeDirection.Height or ResizeDirection.Both, then 
            the returned height will be just large enough to show all of its children.
            Otherwise, the returned height will minimally be the shape's current height.
            
            If this property is set to ResizeDirection.Width or ResizeDirection.Both, then 
            the returned width will be just large enough to show all of its children.
            Otherwise, the returned width will minimally be the shape's current width.
            
            If this property is set to ResizeDirection.None, then the returned size will minimally 
            be the current size.
            </summary>
            <returns>Returns the minimum size needed for this shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CalculateRelativeShapeBounds">
            <summary>
            Returns the calculated size of this shape based on its contents.
            </summary>
            <returns>The calculated size of all relative shapes to this shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.ExcludeShapeFromSizeCalculation(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            If true the shape will not be taken into account to calculate the size of the parent shape
            </summary>
            <remarks>
            By default all port shapes are excluded
            </remarks>
            <returns>True if the shape needs to be excluded from the size calculation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CalculateSizeBasedOnChildren(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns the calculated size of this shape based on its contents.
            </summary>
            <param name="bounds">
            The rectangle in absolute world coordinates whose size is 
            the minimum allowable size and whose location is 
            the resultant location of this shape.</param>
            <returns>The calculated size of this shape based on its contents.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.DefaultContainerMargin">
            <summary>
            Gets the default margin allowed between nested shapes and the bounds of
            their parent shape.
            </summary>
            <value>SizeD for margin height and width.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AutoResizeParentOnBoundsChange">
            <summary>
            Gets or sets whether parent shape(s) should be automatically resized
            via a rule when this shape's absolute bounds are changed due to move
            or resize operation.
            </summary>
            <remarks>
            If a shape doesn't require this functionality, it's better to override
            this property and return false - this will save some cycles spent in the rule.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NodeShapeChangedRule">
            <summary>
            Rule to call Expand() or Collapse() on a NodeShape when the IsExpanded
            flag changes. 
            Note: Expand() or Collapse() can only be called when the nodeshape
            is linked up to a parent diagram. If it is only linked up after IsExpanded
            is changed, then Expand() or Collapse() will be called by the next rule (ExpandCollapseNodeShapeWhenAddedToDiagramRule)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.BoundsRules">
            <summary>
            Gets the object which constrains the bounds of this shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.GetCompliantBounds(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns a rectangle adjusted to comply with bounds rules
            </summary>
            <param name="proposedBounds">proposed rectangle in internal units relative to the diagram's top-left</param>
            <returns>rectangle (in internal units relative to the diagram's top-left) adjusted to comply with bounds rules</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.OnBoundsFixup(Microsoft.VisualStudio.Modeling.Diagrams.BoundsFixupState,System.Int32,System.Boolean)">
            <summary>
            Allows last opportunity for bounds to be userFixed during view and diagram fixup.
            Base implementation just applies the currently set BoundsRules on this shape.
            You can override this method to apply other specific bounds fixup as well.
            </summary>
            <param name="fixupState">specifies when OnBoundsFixup is being called.</param>
            <param name="iteration">iteration through the diagram fixup loop for parent resize and
            shape anchoring.</param>
            <param name="createdDuringViewFixup">True if the child shape was created by the view fixup process (via a call to CreateChildShape), false otherwise.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.OnChildConfiguring(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Boolean)">
            <summary>
            Configure ports on shape when it is added
            </summary>
            <param name="child"></param>
            <param name="createdDuringViewFixup">True if the child shape was created by the view fixup process (via a call to CreateChildShape), false otherwise.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.OnChildConfigured(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Boolean,System.Boolean)">
            <summary>
            Configure ports on shape when it is added
            </summary>
            <param name="child"></param>
            <param name="childWasPlaced"></param>
            <param name="createdDuringViewFixup">True if the child shape was created by the view fixup process (via a call to CreateChildShape), false otherwise.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.ConfiguredChildPortShape(Microsoft.VisualStudio.Modeling.Diagrams.Port,System.Boolean)">
            <summary>
            Configure the child PortShape.
            position the child shape if necessary.
            </summary>
            <param name="child">the new child shape</param>
            <param name="childWasPlaced">indicates if the child shape has already been placed on the target shape</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.ChooseRelationship(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to get the type of relationship the
            child ShapeElement has to its parent.
            </summary>
            <param name="childShape">Child shape to be added to this shape.</param>
            <returns>The RelationshipType to create.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CreateDefaultBounds(System.Double,System.Double)">
            <summary>
            Creates and returns a default Bounds that can used by the NodeShape.
            </summary>
            <param name="x">The suggested X position of the bounds.</param>
            <param name="y">The suggested Y position of the bounds.</param>
            <returns>A RectangleD defining the default bounds of the NodeShape.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AbsoluteBoundsChanged">
            <summary>
            Event for changes to the property AbsoluteBounds for this element
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.OnAbsoluteBoundsChanged(Microsoft.VisualStudio.Modeling.Diagrams.AbsoluteBoundsChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.FromRoleLinkShapes">
            <summary>
            Gets a collection of the LinkShapes where this NodeShape plays a From role.
            </summary>
            <value>Collection of LinkShapes</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.ToRoleLinkShapes">
            <summary>
            Gets a collection of the LinkShapes where this NodeShape plays a To role.
            </summary>
            <value>Collection of LinkShapes</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.Expand">
            <summary>
            Grows the NodeShape to fit all of its nested children.
            This can only be called from within a transaction.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.Collapse">
            <summary>
            Shrinks the NodeShape to hide all of its nested children.
            This can only be called from within a transaction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CanExpandAndCollapse">
            <summary>
            Gets a value indicating whether this shape has a distinct collapsed and expanded state.
            This value must be set to true if the NodeShape's expand and collapse capabilities 
            are used.
            </summary>
            <value>true if this shape has a distinct collapsed and expanded state.</value>
            <remarks>
            This property is used by accessibility to determine whether this shape
            has an expanded state to report.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.UpdateChildVisibility">
            <summary>
            Recalculates the visibility states of the descendent shapes based on
            overrides of the method PermitChildVisibility.  The default behavior
            is to base the child's visibility state on the parent's IsExpanded property.
            Internal note: this also syncs the visibility states of any descendent 
            subgraphs in the graph object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.GraphNode">
            <summary>
            Convienience function that creates the GraphNode object for this Shape
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.SubGraphNode">
            <summary>
            Returns the GraphNode representation for this shape on a SubGraph that it exists on.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.IsPlaceRouteNode">
            <summary>
            See if we are a placeable/routable node
            </summary>
            <returns>true if placeable and routable</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.FixedFlags">
            <summary>
            Gets the FixedFlags properties for a GraphNode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.PortFixedFlags">
            <summary>
            Gets the FixedFlags properties for a GraphNode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.Side(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Assigns a side to the port
            </summary>
            <param name="portRect">Rectangle of interest.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.IsPort">
            <summary>
            Indicate if this is a port shape
            </summary>
            <returns>false by default</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CreateLayoutObject">
            <summary>
            Creates a corresponding layout object in the
            Graph Object for this shape.
            </summary>
            <returns>the created layout object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CreateGraphLayoutObject">
            <summary>
            Creates a corresponding layout object in the Graph Object for this shape.
            A side effect is to create the necessary
            parent layout objects (both relative and nested) as well as any required sub-graphs
            for the nested relationships.  Creating the parentage (if necessary) is due to
            the unpredicable nature of layout object creation.  We are only guaranteed to
            have the correct IMS relationships in place at the time this method is called.
            Secondary note:  Do not call the GraphWrapper getter before object creation as
            the latter depends on the graph layout object having been created in the first.
            </summary>
            <returns>the created layout object</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.HasConnectionPoints">
            <summary>
            Gets whether or not this NodeShape requires the use of connection points.
            </summary>
            <value>true means this shape requires connection points; otherwise, they're not used.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.ConnectionPoints">
            <summary>
            Gets the list of connection points on this NodeShape.
            </summary>
            <value>The collection of ConnectionPoints on this shape.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CreateConnectionPoint(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Creates a connection point with the given center point, and adds it to the ConnectionPoints collection for this shape.
            </summary>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.EnsureConnectionPoints(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape)">
            <summary>
            Ensures that appropriate connection points exist for the given link. This method will be called before a the given link is connected to this shape.
            The default implementation creates a connection point which is midway through the left side of the shape.
            Derived classes that use connection points can override this to create different connection point(s).
            </summary>
            <param name="link">LinkShape that will connect to this ConnectionPoint.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.OnKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Called when a key is pressed.
            </summary>
            <param name="e">A DiagramKeyEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.OnKeyPress(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs)">
            <summary>
            Called when a key is pressed.
            </summary>
            <param name="e">A DiagramKeyPressEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.ProcessExpandCollapseCommand(System.Boolean)">
            <summary>
            Process keyboard expand collapse commands.
            </summary>
            <param name="expand">Expand or collapse the shape.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NavigateAcrossLinks(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection,System.Boolean)">
            <summary>
            Selects shapes that are connected to this shape.
            </summary>
            <param name="selection">The selection to update.</param>
            <param name="focusOnly">Indicates whether to set focus only.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.CanResize">
            <summary>
            Gets a value indicating whether the user is allowed to resize the ShapeElement.
            (To modify this value, override the ResizableSides property.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.ResizableSides">
            <summary>
            Gets the sides of the node shape which can be resized by the user.
            Default behavior is that all sides may be resized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.MinimumResizableSize">
            <summary>
            Gets the minimum size in world units that a user can resize this node shape at the current state.
            </summary>
            <value>The minimum size in world units that a user can resize this node shape.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NodeSides">
            <summary>
            Indicates one or more sides of a node shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NodeSides.None">
            <summary>
            No sides.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NodeSides.Left">
            <summary>
            Left side of the node shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NodeSides.Top">
            <summary>
            Top side of the node shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NodeSides.Right">
            <summary>
            Right side of the node shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NodeSides.Bottom">
            <summary>
            Bottom side of the node shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NodeSides.Horizontal">
            <summary>
            Left and right sides of the node shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NodeSides.Vertical">
            <summary>
            All sides of the node shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NodeSides.All">
            <summary>
            All sides of the node shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.GeometryCanResizeLeft">
            <summary>
            Gets a value indicating whether the user is permitted to resize the geometry.
            (Intended to be called only by the NodeShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.GeometryCanResizeTop">
            <summary>
            Gets a value indicating whether the user is permitted to resize the geometry.
            (Intended to be called only by the NodeShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.GeometryCanResizeRight">
            <summary>
            Gets a value indicating whether the user is permitted to resize the geometry.
            (Intended to be called only by the NodeShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.GeometryCanResizeBottom">
            <summary>
            Gets a value indicating whether the user is permitted to resize the geometry.
            (Intended to be called only by the NodeShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.ShouldAutoPlaceChildShapes">
            <summary>
            Determines if view fixup should auto-place nested child shapes of this shape when they are created.
            By default, this returns false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AutoLayoutChildShapes(System.Collections.IDictionary)">
            <summary>
            Position the specified collection of ShapeElements using the graph object.
            </summary>
            <remarks>
            If the collection contains shapes with relative geometry (for example, pasting two shapes A and B,
            where component shape B is to the above-and-right of component shape A), we will maintain their 
            relative geometry, and position them in an area that can accommodate their geometry.  
            This area may be off-screen.  If pasting inside a compound shape, that compound shape will grow 
            as needed to fit the new children.  (This scenario will generally happen for copy/paste.)
            </remarks>
            <param name="shapeElementMap">Collection of ShapeElements to layout.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.FindFreeArea(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Finds a free area inside this shape.
            </summary>
            <param name="freeArea">The free area needed.</param>
            <returns>Top-left position of free area found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.EnsureGraphLayoutObjectsExist(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Make sure the underlying graph object shape and its children are present.
            </summary>
            <param name="shapeElement"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.ProcessVisibilityChange(System.Boolean)">
            <summary>
            Process the consequential change from a change in the visibility of this shape
            </summary>
            <param name="show">The new visibility state of the shape</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.PermitChildVisibility(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Opportunity to influence the visibility of your child shapes
            </summary>
            <param name="relatedShape">The child shape to constrain</param>
            <remarks>
            Collapsed nodes hide their nested children
            </remarks>
            <returns>Whether the given child shape should be visible</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.AccessibleState">
            <summary>
            Gets additional accessible states of this shape.  
            By default, the following states are pre-determined: 
            (1) AccessibleStates.Selected, 
            (2) AccessibleStates.Focused,
            (3) AccessibleStates.Selectable,
            (4) AccessibleStates.Focusable
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.ExpandCollapseNodeShapeWhenAddedToDiagramRule">
            <summary>
            Rule to call Collapse() on a new NodeShape if its IsExpanded flag is
            false when it is parented (directly or indirectly) by the diagram.
            This rule calls Collapse() for the node shape that is added to the diagram
            and all other node shapes that are descendents of that node shape, because
            then got parented by the diagram too.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram">
            <summary>
            DomainClass Diagram
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Diagram
            </summary>
            <summary>
            DomainClass Diagram
            Code to enable GestureExtensions
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DomainClassId">
            <summary>
            Diagram domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.IsCompleteViewDomainPropertyId">
            <summary>
            IsCompleteView domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.isCompleteViewPropertyStorage">
            <summary>
            Storage for IsCompleteView
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.IsCompleteView">
            <summary>
            Gets or sets the value of IsCompleteView domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Is Complete
            View
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.IsCompleteViewPropertyHandler">
            <summary>
            Value handler for the Diagram.IsCompleteView domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.IsCompleteViewPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Diagram.IsCompleteView domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.IsCompleteViewPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Diagram.IsCompleteView domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.IsCompleteViewPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.IsCompleteViewPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DiagramIdDomainPropertyId">
            <summary>
            DiagramId domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.diagramIdPropertyStorage">
            <summary>
            Storage for DiagramId
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DiagramId">
            <summary>
            Gets or sets the value of DiagramId domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Diagram Id
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DiagramIdPropertyHandler">
            <summary>
            Value handler for the Diagram.DiagramId domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DiagramIdPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Diagram.DiagramId domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DiagramIdPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Diagram.DiagramId domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DiagramIdPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DiagramIdPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.String)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.NameDomainPropertyId">
            <summary>
            Name domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.namePropertyStorage">
            <summary>
            Storage for Name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Name">
            <summary>
            Gets or sets the value of Name domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Name
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.NamePropertyHandler">
            <summary>
            Value handler for the Diagram.Name domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.NamePropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Diagram.Name domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.NamePropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Diagram.Name domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.NamePropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.NamePropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.String)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontNameDomainPropertyId">
            <summary>
            BaseFontName domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.baseFontNamePropertyStorage">
            <summary>
            Storage for BaseFontName
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontName">
            <summary>
            Gets or sets the value of BaseFontName domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Base Font Name
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontNamePropertyHandler">
            <summary>
            Value handler for the Diagram.BaseFontName domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontNamePropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Diagram.BaseFontName domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontNamePropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Diagram.BaseFontName domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontNamePropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontNamePropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.String)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontSizeDomainPropertyId">
            <summary>
            BaseFontSize domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.baseFontSizePropertyStorage">
            <summary>
            Storage for BaseFontSize
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontSize">
            <summary>
            Gets or sets the value of BaseFontSize domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Base Font Size
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontSizePropertyHandler">
            <summary>
            Value handler for the Diagram.BaseFontSize domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontSizePropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Diagram.BaseFontSize domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontSizePropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Diagram.BaseFontSize domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontSizePropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontSizePropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Double)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoLineRoutingDomainPropertyId">
            <summary>
            DoLineRouting domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.doLineRoutingPropertyStorage">
            <summary>
            Storage for DoLineRouting
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoLineRouting">
            <summary>
            Gets or sets the value of DoLineRouting domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Do Line Routing
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoLineRoutingPropertyHandler">
            <summary>
            Value handler for the Diagram.DoLineRouting domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoLineRoutingPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Diagram.DoLineRouting domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoLineRoutingPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Diagram.DoLineRouting domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoLineRoutingPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoLineRoutingPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.PlaceUnplacedShapesDomainPropertyId">
            <summary>
            PlaceUnplacedShapes domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.placeUnplacedShapesPropertyStorage">
            <summary>
            Storage for PlaceUnplacedShapes
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.PlaceUnplacedShapes">
            <summary>
            Gets or sets the value of PlaceUnplacedShapes domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Place Unplaced
            Shapes
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.PlaceUnplacedShapesPropertyHandler">
            <summary>
            Value handler for the Diagram.PlaceUnplacedShapes domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.PlaceUnplacedShapesPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Diagram.PlaceUnplacedShapes domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.PlaceUnplacedShapesPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Diagram.PlaceUnplacedShapes domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.PlaceUnplacedShapesPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.PlaceUnplacedShapesPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoResizeParentDomainPropertyId">
            <summary>
            DoResizeParent domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.doResizeParentPropertyStorage">
            <summary>
            Storage for DoResizeParent
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoResizeParent">
            <summary>
            Gets or sets the value of DoResizeParent domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Do Resize
            Parent
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoResizeParentPropertyHandler">
            <summary>
            Value handler for the Diagram.DoResizeParent domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoResizeParentPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Diagram.DoResizeParent domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoResizeParentPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Diagram.DoResizeParent domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoResizeParentPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoResizeParentPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoShapeAnchoringDomainPropertyId">
            <summary>
            DoShapeAnchoring domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.doShapeAnchoringPropertyStorage">
            <summary>
            Storage for DoShapeAnchoring
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoShapeAnchoring">
            <summary>
            Gets or sets the value of DoShapeAnchoring domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Do Shape
            Anchoring
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoShapeAnchoringPropertyHandler">
            <summary>
            Value handler for the Diagram.DoShapeAnchoring domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoShapeAnchoringPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Diagram.DoShapeAnchoring domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoShapeAnchoringPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Diagram.DoShapeAnchoring domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoShapeAnchoringPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoShapeAnchoringPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoViewFixupDomainPropertyId">
            <summary>
            DoViewFixup domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.doViewFixupPropertyStorage">
            <summary>
            Storage for DoViewFixup
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoViewFixup">
            <summary>
            Gets or sets the value of DoViewFixup domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Do View Fixup
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoViewFixupPropertyHandler">
            <summary>
            Value handler for the Diagram.DoViewFixup domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoViewFixupPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the Diagram.DoViewFixup domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoViewFixupPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the Diagram.DoViewFixup domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoViewFixupPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoViewFixupPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ViewFixupDataList">
            <summary>
            Stores a per-diagram list of ViewFixupData objects, consumed by the ShapeElementViewFixupRule.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.SubscribeToEvents">
            <summary>
            Subscribes to ShapeElement-class level events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.UnsubscribeFromEvents">
            <summary>
            Unsubscribes from ShapeElement-class level events.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DiagramAdded">
            <summary>
            Event sink to signal when this instance of Microsoft.VisualStudio.Modeling.Diagrams.Diagram has been added
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DiagramRemoved">
            <summary>
            Event sink to signal when this instance of Microsoft.VisualStudio.Modeling.Diagrams.Diagram has been removed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Finalize">
            <summary>
            Frees resources and performs other cleanup operations
            before the Object is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Disposed">
            <summary>
            Indicates whether this object has been disposed
            </summary>
            <value>true if object has been disposed</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Dispose">
            <summary>
            implement the IDisposable.Dispose() method
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Dispose(System.Boolean)">
            <summary>
            Internal class to release all the resource relates to this class
            </summary>
            <param name="disposing">false if finalizing</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BaseFontFromEnvironment">
            <summary>
            Gets the font from the environment that should be used to determine the BaseFont.  
            The default behavior is to return ths systems IconTitleFont.  
            This property is also used by the auto-zoom feature to determine if a diagram should 
            be opened or created at an initial zoom factor higher than 100%.  
            The resultant BaseFont may be a different size from this environment font.  
            This property should be overridden to get a font other than the systems IconTitleFont.
            </summary>
            <value>The font from the environment that should be used to determine the BaseFont.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.InitializeZoom">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.EstablishBaseFont">
            <summary>
            Called during initial diagram creation to set the properties 
            BaseFontName and BaseFontSize.
            By default, this method gets the base fonts initial settings 
            from the property BaseFontFromEnvironment, and then adjusts the 
            base font size so that it does not exceed the maximum base font size.  
            After initial diagram creation, these properties cannot be altered for V1.
            The base font should be per diagram, and its font family name and font size 
            should be stored with the diagram.  
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.AutoZoomFactor">
            <summary>
            Specifies the zoom factor to use when a diagram is initially viewed.
            This zoom factor is applied when a diagram is associated with a view.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.MaximumBaseFontSize">
            <summary>
            Gets the maximum BaseFontSize allowed in world units (inches).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ApplyDiagramDefaultFonts(Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Overrides all diagram fonts of the supplied StyleSet to use
            the diagram's default font family, and to be scaled to the 
            diagram's "normal" font size.
            </summary>
            <param name="styleSet"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ApplyDiagramDefaultFont(Microsoft.VisualStudio.Modeling.Diagrams.StyleSet,Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Overrides the specifed font of the supplied StyleSet to use
            the diagram's default font family, and to be scaled to the 
            diagram's "normal" font size.
            </summary>
            <param name="styleSet"></param>
            <param name="id">font resource id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ScaleToDiagramDefaultFontSize(System.Single)">
            <summary>
            Scales the given font size to that of the diagram's default font's normal size.
            </summary>
            <param name="fontSize"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DefaultSize">
            <summary>
            Gets the default size of a ShapeElement in world units.
            </summary>
            <remarks>The base class behavior is to have default size of a ShapeElement be its minimum size.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.HasOutline">
            <summary>
            Gets a value indicating whether to draw the outline 
            of the shape.  Diagrams by default have no border.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.MinimumSize">
            <summary>
            Gets the minimum size of a ShapeElement in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.AllowsChildrenToResizeParent">
            <summary>
            Gets value which determines if child shapes are allowed to resize this shape.
            </summary>
            <value>true - this shape resizes based on its children; false - children are clipped.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ShapeGeometry">
            <summary>
            Gets the geometry of the Diagram.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OutlinePenId">
            <summary>
            Gets the pen resource id that will be used to
            draw the outline of the geometry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.BackgroundBrushId">
            <summary>
            Gets the brush resource id that will be used to
            fill the background of the geometry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.NestedShapesMargin">
            <summary>
            Gets the margin between this Diagram's bounding box
            perimeter and its nested node shapes.  The margin is in
            world units.
            This margin is to provide a region along the perimeter
            of this Diagram where connection lines can route through.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.HasShadow">
            <summary>
            Gets a value indicating whether to draw the ShapeElement's shadow
            Drawing the shadow will make diagram printing very slow, especially for a job with multiple pages.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnChildAssociatedPropertyChanged(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.PropertyChangedEventArgs)">
            <summary>
            When a property associated with a child shape changes, this method is called to allow derived
            classes to update the shape's resources.  For example, if a property in the model were associated with the
            shape's background color, then a derived class could override this method to change the background color.
            </summary>
            <param name="shape">Shape associated with the model element whose property changed.</param>
            <param name="e">Event args describing the property that changed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.EnsureVisiblePreference">
            <summary>
            Preference for the EnsureVisible method for this Diagram.
            By default, all ShapeElements nested in this Diagram will use 
            this preference. 
            ShapeElements can override this preference and choose their own.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.HasSwimlanes">
            <summary>
            Gets whether or not swimlanes are supported in this Diagram.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DefaultContainerMargin">
            <summary>
            Gets the margin that's required around the diagram between it's nested shapes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreatableSwimLaneSubjects">
            <summary>
            Gets a collection of domain classes which are mapped to swimlane shapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.HandleNewSwimLaneInsertion(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.DomainClassInfo,Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape,System.Boolean)">
            <summary>
            Handles insertion of a new swimlane into the diagram.
            </summary>
            <param name="view">Client view which originated the command.</param>
            <param name="selectedDomainClass">Domain class of the model element to be inserted.</param>
            <param name="selectedSwimLane">Swim lane specifying insertion position.</param>
            <param name="insertAfter">Whether to insert before or after specified swimlane.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CopyOrigin">
            <summary>
            The text that represents the diagram
            as the originator of the copy operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.WatermarkText">
            <summary>
            Gets the watermark text associated with this diagram.
            Override this method to provide specific watermarks for derived diagram types.
            </summary>
            <value>Watermark text to display.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.RequiresWatermark">
            <summary>
            Gets whether or no this diagram requires a watermark to be shown.  The default
            implementation returns true.  Override this method to turn off the watermark
            for your diagram.
            </summary>
            <value>true means this diagram needs a watermark; false means no watermark.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.IsWatermarkNeeded">
            <summary>
            Checks the current state of the diagram to determine if the watermark text should
            be displayed.
            </summary>
            <value>true means that the current state of the diagram requires the watermark to be visible.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.SelectAction">
            <summary>
            Gets the mouse action responsible for selecting shapes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.InvokeEditorAction">
            <summary>
            Gets the mouse action that invokes the field or 
            subfield's editor on mouse down.  After it invokes 
            the editor, the MouseAction is deactivated.
            </summary>
            <value>The mouse action that invokes the field or subfield's editor on mouse down.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DragDropPendingAction">
            <summary>
            Gets the mouse action responsible for initiating drag/drop.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.LassoAction">
            <summary>
            Gets the mouse action responsible for lasso selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.PanZoomAction">
            <summary>
            Gets the mouse action responsible for zooming.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ResizeAction">
            <summary>
            Gets the mouse action responsible for resizing shapes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ManualRouteAction">
            <summary>
            Gets the mouse action responsible for manually routing lines.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateManualRouteAction">
            <summary>
            Creates the mouse action for manual line routing.
            </summary>
            <returns>The created mouse action for manual line routing.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ToolboxAction">
            <summary>
            Gets the mouse action responsible for toolbox click.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.AnchorPointAction">
            <summary>
            Gets the mouse action responsible for manually moving link endpoints.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GetPotentialMouseAction(System.Windows.Forms.MouseButtons,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Retrieves a mouse action that should be made active on the next
            MouseDown event if the mouse is over the specified point.
            </summary>
            <param name="mouseButtons">The mouse button pressed.</param>
            <param name="pt">mouse position relative to Diagram's top-left in world units.</param>
            <param name="hitTestInfo">The hit-test information corresponding to the mouse position.</param>
            <returns>The mouse action that should be made active on the next MouseDown event.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GridColor">
            <summary>
            Gets or sets the grid color.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GridSize">
            <summary>
            Gets or sets the grid size in world units.
            Each child shape's GridSize defaults to its parent's GridSize.
            Ultimately, the diagram's GridSize property is the
            default grid size for these shapes unless the shape's
            GridSize property has been overridden.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DefaultGridSize">
            <summary>
            Gets the default size of the grid in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.SnapToGrid">
            <summary>
            Gets or sets a value indicating whether shapes snap to the grid.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ShowGrid">
            <summary>
            Gets or sets a value indicating whether the grid is visible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DrawShadowBitmap(System.Drawing.Graphics,System.Drawing.Rectangle,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Single,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Draws the diagram's ShadowBitmap to the specified Graphics object.
            </summary>
            <param name="g">The graphics object to use for drawing.</param>
            <param name="clipRectangle">
            The destination clipping region in device units.
            </param>
            <param name="sourceLocation">
            Top-left of the bounding box on the diagram (in world units
            relative to the top-left of the diagram) that should be drawn
            to the destination clipping region.
            </param>
            <param name="scale">Scale (100% is 1.0f)</param>
            <param name="view">
            The DiagramClientView that the Graphics object belongs to.
            This may be null if the Graphics object does not belong to one.
            The view provides additional view state information such as
            selected shapes, highlighted shapes, and focus information.
            </param>
            <remarks>
            This method will set the PageUnit, PageScale, SmoothingMode, and TextRenderingHint of
            the Graphics object.  This method will also translate the Graphics object based on the
            sourceLocation argument.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ConfigureGraphicsSettings(System.Drawing.Graphics,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Single)">
            <summary>
            Configures the Graphics object settings for drawing the diagram.
            </summary>
            <param name="g">Graphics object to configure.</param>
            <param name="sourceLocation">Amount to offset the translation.</param>
            <param name="scale">Current scale of the diagram.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Print(System.Drawing.Graphics,System.Drawing.Rectangle,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Single)">
            <summary>
            Draws the diagram using the specified printer Graphics object.
            </summary>
            <param name="graphics">The graphics object to use for drawing.</param>
            <param name="clipRectangle">
            The clipping rectangle in which to draw.  The rectangle is in device units.
            </param>
            <param name="sourceLocation">
            Top-left of the bounding box on the diagram (in world units
            relative to the top-left of the diagram) that should be drawn
            to the destination clipping rectangle.
            </param>
            <param name="scale">Scale (100% is 1.0f).</param>
            <remarks>
            This method will set the PageUnit, PageScale, SmoothingMode, and TextRenderingHint of
            the Graphics object.  This method will also translate the Graphics object based on the
            sourceLocation argument.
            </remarks>
            <remarks>
            The sourceLocation maps to the clipRectangle.Location.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.HitTest(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,System.Boolean)">
            <summary>
            Gets the list of shapes that are contained within the specified rectangle
            </summary>
            <param name="clipRectangle">rectangle to hit test within (in diagram units)</param>
            <param name="requireCompleteContainment">true if a shape has to be completely contained within the specified rectangle to hit test positive</param>
            <returns>A collection of shapes that intersect the rectangle</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GetHitShapesList(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Gets a list of Shapes that are contained within the specified rectangle.
            </summary>
            <param name="g">Graphics object that we're currently associated with.</param>
            <param name="clipRectangle">Rectangle to hit test within.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DrawDiagramShapes(System.Drawing.Graphics,System.Drawing.Rectangle,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Collections.ArrayList,System.Boolean)">
            <summary>
            Draws the child shapes of the Diagram.
            </summary>
            <param name="g">Graphics object to draw into.</param>
            <param name="clipRectangle">
            The destination clipping region in device units.
            </param>
            <param name="view">
            The DiagramClientView that the Graphics object belongs to.
            This may be null if the Graphics object does not belong to one.
            The view provides additional view state information such as
            selected shapes, highlighted shapes, and focus information.
            </param>
            <param name="shapeList">List of hit shapes that need to be painted.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DrawDiagramSelection(System.Drawing.Graphics,System.Drawing.Rectangle,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Collections.ArrayList)">
            <summary>
            Draws the selection state of the shapes in this Diagram.
            </summary>
            <param name="g">Graphics object to draw into.</param>
            <param name="clipRectangle">
            The destination clipping region in device units.
            </param>
            <param name="view">
            The DiagramClientView that the Graphics object belongs to.
            This may be null if the Graphics object does not belong to one.
            The view provides additional view state information such as
            selected shapes, highlighted shapes, and focus information.
            </param>
            <param name="shapeList">List of hit shapes that need to be painted.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DrawDiagram(System.Drawing.Graphics,System.Drawing.Rectangle,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Single,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Draws the diagram to the specified Graphics object.
            </summary>
            <param name="g">The graphics object to use for drawing.</param>
            <param name="clipRectangle">
            The destination clipping region in device units.
            </param>
            <param name="sourceLocation">
            Top-left of the bounding box on the diagram (in world units
            relative to the top-left of the diagram) that should be drawn
            to the destination clipping region.
            </param>
            <param name="scale">Scale (100% is 1.0f)</param>
            <param name="view">
            The DiagramClientView that the Graphics object belongs to.
            This may be null if the Graphics object does not belong to one.
            The view provides additional view state information such as
            selected shapes, highlighted shapes, and focus information.
            </param>
            <remarks>
            This method will set the PageUnit, PageScale, SmoothingMode, and TextRenderingHint of
            the Graphics object.  This method will also translate the Graphics object based on the
            sourceLocation argument.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DrawGrid(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Draws the grid.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnPaintShape(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Paints the diagram background including the grid.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnViewMouseEnter(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Occurs when the mouse pointer enters the DiagramClientView.
            </summary>
            <param name="pointArgs">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnViewMouseLeave(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the DiagramClientView.
            </summary>
            <param name="pointArgs">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnViewMouseHover(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Occurs when the mouse pointer hovers over the DiagramClientView.
            </summary>
            <param name="pointArgs">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Called when a key is pressed when the Diagram itself has the focus.
            </summary>
            <param name="e">A DiagramKeyEventArgs that contains event data.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.NavigationRoot">
            <summary>
            Gets the root navigational shape for the diagram.  Normally, this is just the diagram itself.
            If the diagram is not selectable, then its nested child shapes will be searched for the first
            selectable child.  The grand children are not searched.
            </summary>
            <value>The root navigational shape for the diagram.</value>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.lastDiagramZOrder">
            <summary>
            Last used Z order in the diagram.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.NextZOrder">
            <summary>
            Increment and return the ZOrder.
            <returns>Current ZOrder</returns>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.needsRenumber">
            <summary>
            Renumbering status of the diagram.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.NeedsRenumber">
            <summary>
            Indicates whether the diagram needs renumbering.
            </summary>
            <returns>true if diagram needs renumbering</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Renumber">
            <summary>
            Renumbers the diagram shapes if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.RenumberChildren(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            The parent is not included in the renumber.  All nested child shapes
            Are first renumber with increasing 'z' and then all relative shapes
            are renumbered (as the contents should not overlap shape elements.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.RenumberSwimlanes(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            The parent is not included in the renumber.  All swimlane shapes
            Are first renumber with decreasing 'z'.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Performs a hit test and returns the information in the DiagramHitTestInfo argument.
            The Diagram itself is considered a ShapeElement and will be returned if hit.
            </summary>
            <param name="point">Point is in world units, relative to the Diagram's top-left.</param>
            <param name="hitTestInfo">Object that will receive the results of the hit test.</param>
            <param name="includeTolerance">true if the tolerance around the shape should be included when determining if the shape was hit.</param>
            <returns>true if a shape was hit, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Collections.Generic.List{Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement},System.Boolean)">
            <summary>
            Performs a hit test and returns the information in the shapesHit argument.
            </summary>
            <param name="point">Point is in world units, relative to the Diagram's top-left.</param>
            <param name="shapesHit">Object that will receive the list of hit shapes.</param>
            <param name="includeTolerance">true if the tolerance around the shape should be included when determining if the shape was hit.</param>
            <returns>true if a shape was hit, false otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.SupportsPorts">
            <summary>
            Indicates whether the diagram contains any ports.  Hit testing will not
            check for ports if this is false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoHitTest(System.Collections.ArrayList,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Calls the DoHitTest method of each shape in the shape list 
            until a shape returns true.
            </summary>
            <param name="shapeList">z-order-sorted shape list returned from the Graph Object. The list is expected to be sorted from front-to-back.</param>
            <param name="point"></param>
            <param name="hitTestInfo"></param>
            <param name="includeTolerance"></param>
            <returns>true if a shape was found whose DoHitTest method returned true.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DoDragDrop(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            This method is called by DragDropPendingAction when the user has initiated drag/drop.
            </summary>
            <param name="diagramClientView">The view initiating the drag/drop operation.</param>
            <param name="dragStartingPoint">The mouse-down location in world units relative to the Diagram's top-left.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ElementOperations">
            <summary>
            Gets the object used to perform selection operations.
            </summary>
            <remarks>
            Override this property to return your own ElementOperations-derived
            object which you can customize Copy, Delete, and Merge methods.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.maxBitmapCopyPixels">
            <summary>Max bitmap size to fit on clipboard - Bug/HACK: should find max clipboard size from system</summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.MaxBitmapCopyPixels">
            <summary>
            Gets the number of pixels allowed in copy operation.
            </summary>
            <returns>Number allowed</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.imageHorizontalMargin">
            <summary>
            The distance between the left side of the image and the left side of the left-most shape in the image. It is also
            the distance between the right side of the image and the right side of the right-most shape in the image.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.imageVerticalMargin">
            <summary>
            The distance between the top side of the image and the top side of the top-most shape in the image. It is also
            the distance between the bottom side of the image and the bottom side of the bottom-most shape in the image.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateBitmapPreference">
            <summary>
            Preferences for Diagram.CreateBitmap()
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateBitmapPreference.FavorClarityOverSmallSize">
            <summary>
            The bitmap will be created at 100%.  If there is not enough memory
            to complete the operation, then the bitmap will be scaled down to the
            maximum allowed number of pixels.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateBitmapPreference.FavorSmallSizeOverClarity">
            <summary>
            The size of the bitmap will be guaranteed to be less than the maximum allowed number of pixels.
            This is achieved by scaling the bitmap down if it exceeds the maximum.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateBitmap(System.Collections.ICollection,Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateBitmapPreference)">
            <summary>
            Constructs a bitmap representation of the selected ShapeElements.
            </summary>
            <param name="selectedElements">The collection of ShapeElements to include in the image.</param>
            <param name="creationPreference">Preference as to how the bitmap should be created.</param>
            <returns>Bitmap representation of the selected shapes, or null if selectedElements is empty.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateBitmap(System.Collections.ArrayList,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Drawing.Rectangle,System.Single)">
            <summary>
            Creates the bitmap.
            </summary>
            <param name="shapeList"></param>
            <param name="sourceLocation"></param>
            <param name="destinationRectangle"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CalculateDestinationRectangleForBitmap(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Calculates the destination rectangle for the bitmap in device units, 
            given the source rectangle in world units and assuming 100% scaling factor.
            </summary>
            <param name="sourceRectangle">The source rectangle in world units relative to the top-left of the diagram.</param>
            <returns>The destination rectangle for the bitmap in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CalculateScalingInfoForBitmap(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,System.Drawing.Rectangle@,System.Single@)">
            <summary>
            Calculates the scale to use so that the resultant bitmap is 
            less than the maximum number of pixels allowed.  The maximum
            is intended to prevent the creation of large bitmaps, typically for
            clipboard usage.
            </summary>
            <param name="sourceRectangle">
            The source rectangle in world units relative to the top-left of 
            the diagram.
            </param>
            <param name="destinationRectangle">
            The destination rectangle in device units.
            </param>
            <param name="scalingFactor">
            The scaling factor required to stay within the maximum number of 
            pixels allowed.
            </param>
            <returns>The scale required to create a bitmap that is less than the maximum number of pixels allowed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateMetafile(System.Collections.ICollection)">
            <summary>
            Creates a metafile of the specified shapes and their descendants at 100%.
            </summary>
            <param name="selectedShapesToDraw">The collection of shapes to draw.</param>
            <returns>A metafile of the specified shapes and their descendants.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateMetafile(System.Collections.ICollection,System.String)">
            <summary>
            Creates a metafile of the specified shapes and their descendants at 100%.
            </summary>
            <param name="selectedShapesToDraw">The collection of shapes to draw.</param>
            <param name="fileName">
            The metafile file name to create. If this is null,
            then the metafile will be created in memory.
            </param>
            <returns>A metafile of the specified shapes and their descendants.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateMetafile(System.Collections.ICollection,System.String,System.Boolean)">
            <summary>
            Creates a metafile of the specified shapes and their descendants at 100%.
            </summary>
            <param name="selectedShapesToDraw">The collection of shapes to draw.</param>
            <param name="fileName">
            The metafile file name to create. If this is null,
            then the metafile will be created in memory.
            </param>
            <param name="paintDiagram">true if diagram will also be painted when meta file is created.</param>
            <returns>A metafile of the specified shapes and their descendants.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GetShapesToDraw(System.Collections.ICollection,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD@)">
            <summary>
            Returns a Z-order sorted list of shapes given a collection of top-level shapes.  
            All descendent shapes of the top-level shapes will be added to the returned 
            list.  If the collection of top-level shapes includes non-top-level shapes, the 
            non-top level shapes will be ignored.
            This differs from GetHitShapesList which returns a list of shapes that occupy a given 
            rectangle.
            </summary>
            <param name="topLevelShapes">The top-level shapes to be drawn.</param>
            <param name="boundingBoxForShapes">Receives the absolute bounding box in world units of the shapes to draw.</param>
            <returns>A Z-order sorted list of shapes given a collection of top-level shapes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CollectShapeAndDescendants(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Collections.Generic.Dictionary{Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement},Microsoft.VisualStudio.Modeling.Diagrams.RectangleD@)">
            <summary>
            Adds the specified shape and its descendants to the 
            specified dictionary if they haven't already been added.
            Both relative and nested child shapes comprise the descendants.
            </summary>
            <param name="shape">The shape to add to the dictionary.</param>
            <param name="shapesToDraw">The dictionary to which to add the specified shape and its descendants.</param>
            <param name="absoluteBounds">Receives the absolute bounding box of the shape and its descendants.</param>
            <returns>
            true if the shape and its descendants were collected.  
            Otherwise, false is returned to indicate that the shape 
            and its descendants are already collected.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.MetafileCreationContext">
            <summary>
            MetaFileCreationContext class 
            This class provides the support for visualy correct meta file rendering
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.MetafileCreationContext.modifiedShapes">
            <summary>
            list of modifications
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.MetafileCreationContext.styleResources">
            <summary>
            list of styles that needed to be modified
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.MetafileCreationContext.#ctor(System.Collections.ICollection)">
            <summary>
            Create the context for the collection of shapes needed to rendered to metafile
            </summary>
            <param name="selectedShapes">shape collection</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.MetafileCreationContext.Dispose(System.Boolean)">
            <summary>
            Actual disposal method
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.MetafileCreationContext.Dispose">
            <summary>
            Just for the undo part
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.MetafileCreationContext.MetaFileModificationChange">
            <summary>
            MetaFileModificationChange struct
            This class holds the undo information need to perform
            after meta file creation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.RunInShapeFixupContextForMetafileCreation(System.Collections.ICollection,System.Action)">
            <summary>
            Performs a temporary fixup needed to create the metafile. After the creationLogic is called the fixup undone.
            </summary>
            <param name="collection">collection of shapes</param>
            <param name="creationLogic">metafile creation action</param>
            <exception cref="T:System.ArgumentNullException">When creationLogic is null</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CopyImageToClipboard(System.Collections.ICollection)">
            <summary>
            Copies the specified shapes and their descendants to the clipboard 
            as images.
            </summary>
            <param name="selectedShapes">The collection of ShapeElements to copy as images.</param>
            <returns>true if an image was copied to the clipboard.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GetCompatibleBitmap(System.Drawing.Bitmap)">
            <summary>
            Borrowed from WinForms' DataObject.cs
            </summary>
            <param name="bm"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.AddImageFormat(System.Windows.Forms.IDataObject,System.Collections.ICollection)">
            <summary>
            Adds the bitmap data format to the IDataObject.
            </summary>
            <param name="data">The IDataObject to add the image data formats to.</param>
            <param name="selectedElements">The collection of ModelElements to include in the image.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.EndDragDrop(System.Windows.Forms.DataObject,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.ModelElement},System.Windows.Forms.DragDropEffects)">
            <summary>
            This method is called after OLE drag/drop is complete.  It is useful for deleting
            the source when DragDropEffects.Move is returned.  The default behavior will...
            </summary>
            <param name="data">The data object used during OLE drag/drop.</param>
            <param name="selectedElements">The selected ModelElements.</param>
            <param name="dragDropEffect">The resultant effect of the drag/drop.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            The GiveFeedback event allows the source of a drag event (i.e., this
            diagram) to modify the appearance of the mouse pointer in order
            to give the user visual feedback during a drag-and-drop operation.
            </summary>
            <param name="e"></param>
            <remarks>
            OnGiveFeedback is responsible for changing the cursor based
            on the value of GiveFeedbackEventArgs.Effect.  If OnGiveFeedback
            does not alter the cursor, then GiveFeedbackEventArgs.UseDefaultCursors
            should be true.
            GiveFeedbackEventArgs.Effect is the drop effect value returned
            by the most recent call to OnDragEnter, OnDragOver, or OnDragLeave.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CanMove">
            <summary>
            Gets a value indicating that the user is not allowed to reposition this diagram.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.RepositionShapes(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Moves the specified DiagramItems by the specified moveDelta.  These DiagramItems
            should be top-level DiagramItems, otherwise the move may not perform as expected.
            This method calls GetCompliantGroupBounds to determine the destination of each
            DiagramItem.
            </summary>
            <param name="topLevelItems">
            The top-level DiagramItems to move.
            </param>
            <param name="moveDelta">
            The amount to move the DiagramItems by in world units.
            </param>
            <param name="ghostShapes">
            The collection of GhostShapes to move. This will be passed to GetCompliantGroupBounds
            to calculate the destination.
            The GhostShapes represent the DiagramItems at their original location.
            This parameter can be null, in which case a collection of GhostShapes will be created
            for the call to GetCompliantGroupBounds.
            </param>
            <param name="hitDiagramItem">DiagramItem that the mouse is currently over.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GetFilteredTopLevelItemsForRepositioning(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection)">
            <summary>
            Returns a list of Top Level Items to be deliberately repositioned without the help of Rules.
            There are two main rules that are fired when an item is repositioned.
            - one rule ensures that the children are repositioned when a parent shape is repositioned.
            - the other ensures that connectors are repositioned when the connector end shape is respositioned.
            Given the two rules, we prune the topLevelItems parameter using the following criteria
            - any topLevelItem in the topLevelItems collection which has an ancestor in the collection is removed. (this pruning is done already and not done again in the function)
            - any topLevelItem in the topLevelItems collection which has an ancestorLink that connects to a node which is in the collection is removed. (this pruning is done already and not done again in the function)
            - any topLevelItem in the topLevelItems collection that is a link and connects to a node in the collection is removed.
            </summary>
            <param name="topLevelItems">collection is such that no item in the collection parameter has its parent in the same collection parameter</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GetAncestors(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Return the ancestor (parent, grandparent and so on..) shapes of the parameter
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ReparentSwimlaneChild(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.GhostShape,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Reparents a node shape from one swimlane to another.
            </summary>
            <param name="child">The node shape.</param>
            <param name="newParent">New swimlane parent.</param>
            <remarks>
            This method must be called within a modeling transaction.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CanReparentShape(Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Determine whether a child shape can be moved under a new parent shape
            </summary>
            <param name="proposedParent">New parent swimlane</param>
            <param name="child">The child shape to be reparented</param>
            <returns>True if the reparenting is possible, else false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.DisconnectNestedChild(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            Removes graph layout objects for a swimlane child shape, its children and links recursively.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ConnectNestedChild(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Restores graph layout objects for a nested child shape, its children and links recursively.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GetCompliantGroupBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Updates the GhostShapeCollection so that it complies with
            the GroupBoundsRules after the proposed location
            delta is applied.
            </summary>
            <param name="ghostShapes">
            A collection of ghost shapes which describe ShapeElements
            prior to the proposed location delta.
            This method should modify the ghost shape properties such
            that the properties are compliant with this rule after
            the proposed location delta is applied.
            </param>
            <param name="proposedLocationDelta">
            The proposed location delta in world units
            to apply to each shape in the group.
            </param>
            <param name="targetShape">
            The target parent shape if the source shapes are being reparented
            or duplicated.  This parameter can be null, in which case the
            source shapes are being repositioned.
            </param>
            <remarks>
            If this shape has a null GroupBoundsRules, then the shape's diagram's GroupBoundsRules will be used instead.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnTransactionBeginning(Microsoft.VisualStudio.Modeling.TransactionBeginningEventArgs)">
             <summary>
            
             </summary>
             <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnTransactionCommitting(Microsoft.VisualStudio.Modeling.TransactionCommitEventArgs)">
             <summary>
            
             </summary>
             <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnTransactionRollingBack(Microsoft.VisualStudio.Modeling.TransactionRollbackEventArgs)">
            <summary>
            Called before the transaction has rolled back.
            </summary>
            <param name="e">A TransactionRollbackEventArgs containing event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnTransactionRolledBack(Microsoft.VisualStudio.Modeling.TransactionRollbackEventArgs)">
            <summary>
            Called after the transaction has rolled back.
            </summary>
            <param name="e">A TransactionRollbackEventArgs containing event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnTransactionRolledBackInternal(Microsoft.VisualStudio.Modeling.TransactionRollbackEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.StoreDiagramMappingData)">
            <summary>
            Synchronizes the graph object and then calls OnTransactionRolledBack().
            </summary>
            <param name="e">A TransactionRollbackEventArgs containing event data.</param>
            <param name="storeDiagramMap">StoreDiagramMappingData holding details of shape 
            changes in the store associated with the transaction being rolled back</param>
            <remarks>Note that this does not clear the StoreDiagramMappingData as this is not
            per-diagram information. It is expected that the caller will do this after
            invoking this function for all relevant diagrams associated with the store.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.RollBackShapeList(System.Collections.ArrayList)">
            <summary>
            Removes graph layout objects that were added during the rolled-back transaction.
            </summary>
            <param name="list">A list of ElementEventArgs.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.EnsureGraphLayoutObjectsExist">
            <summary>
            Ensures that every shape in the diagram has a corresponding GraphLayoutObject 
            in the graph object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnElementEventsEnding(Microsoft.VisualStudio.Modeling.ElementEventsEndedEventArgs)">
             <summary>
            
             </summary>
             <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnElementEventsEnded(Microsoft.VisualStudio.Modeling.ElementEventsEndedEventArgs)">
             <summary>
            
             </summary>
             <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnDiagramRemoved(System.Object,Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Handles event when diagram is deleted.  Note that this handler is registered for this diagram instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnDiagramAdded(System.Object,Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Handles event when diagram is added.  Note that this is handler is registered at the domain class level.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CanDeserializationReroute">
            <summary>
            Gets whether or not this diagram type allows rerouting during serialization.
            Typically, that is not allowed, but some designers might need that behavior
            if all of their lines are always calculated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.PostDeserialization(System.Boolean)">
            <summary>
            Called after deserialization of the diagram to allow some additional adjustment.
            The base implementation will try to resolve all BinaryLinkShapes that are not connected 
            to the underlying ElementLink, if the deserialization was successful.
            </summary>
            <param name="succeeded">True if the deserialization was successful, false otherwise.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ResolveBinaryLinkShapeIterator">
            <summary>
            An iterator to go through BinaryLinkShapes and resolve those are not connected to the back-end element link.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ResolveBinaryLinkShapeIterator.diagram">
            <summary>
            Diagram that contains the shapes to be iterated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ResolveBinaryLinkShapeIterator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Constructor.
            </summary>
            <param name="diagram">Diagram that contains the shapes to be iterated.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ResolveBinaryLinkShapeIterator.OnShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Called when a shape is encountered during iteration.
            </summary>
            <param name="shape">Shape encountered.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ClientViews">
            <summary>
            Gets the DiagramClientViews that this Diagram has.
            </summary>
            <returns>An IList containing the DiagramClientViews that this Diagram has.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GetService(System.Type)">
            <summary>
            Gets the requested service by first querying the store, and if not found, 
            then querying the diagram's ActiveDiagramView. 
            The DiagramView will need to have been sited in order for this method 
            to perform the query on the view. If the query fails, a null value is returned.
            </summary>
            <param name="serviceType"></param>
            <returns>The requested service or null (Nothing) if the query fails.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Associate(Microsoft.VisualStudio.Modeling.Diagrams.DiagramView)">
             <summary>
             Displays this diagram in the specified DiagramView.
             </summary>
             <param name="diagramView">The DiagramView to associate with.</param>
             <remarks>
             This method associates this Diagram with the specified DiagramView.
            
             This Diagram may be associated with multiple DiagramViews.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Disassociate(Microsoft.VisualStudio.Modeling.Diagrams.DiagramView)">
             <summary>
             Removes this diagram from the specified DiagramView.
             </summary>
             <param name="diagramView">The DiagramView from which to disassociate.</param>
             <remarks>
             This method breaks the association between this Diagram and the specified DiagramView.
            
             This method will do nothing if the association has already been broken.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnAssociated(Microsoft.VisualStudio.Modeling.Diagrams.DiagramAssociationEventArgs)">
            <summary>
            Called when the diagram is associated with diagram view. Designers can override this
            method to handle this event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnDisassociated(Microsoft.VisualStudio.Modeling.Diagrams.DiagramAssociationEventArgs)">
            <summary>
            Called when the diagram is disassociated from diagram view. Designers can override this
            method to handle this event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.HasAssociatedViews">
            <summary>
            Gets a value indicating whether this diagram is associated with any DiagramView.
            </summary>
            <value>
            true if the diagram is associated with any DiagramView; otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.FocusedDiagramView">
            <summary>
            The design surface associated with this diagram
            which has the focus (if any).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ActiveDiagramView">
            <summary>
            Gets the active DiagramView for this Diagram.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.SetActiveDiagramView(Microsoft.VisualStudio.Modeling.Diagrams.DiagramView)">
            <summary>
            Sets the active diagram view. For internal use only.
            </summary>
            <param name="diagramView">The DiagramView that has become active.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.LassoSelect(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,System.Boolean)">
            <summary>
            Returns a collection of DiagramItems within
            the specified rectangle in world units.
            </summary>
            <param name="rectangle">The bounding rectangle.</param>
            <param name="requireCompleteContainment">
            A value indicating whether the shape's bounding box
            must be entirely within the bounding rectangle in
            order to be added to the collection.
            </param>
            <returns>A collection of DiagramItems within the specified bounding rectangle in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.IsSelected(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a value indicating whether the specified ShapeElement is selected in any associated DiagramView.
            </summary>
            <param name="shape">The ShapeElement to look for in the selections of all associated DiagramViews.</param>
            <returns>
            true if the specified ShapeElement is selected in any DiagramView.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Invalidate">
            <summary>
            Invalidates the entire visible diagram rectangle.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.InvalidateRectangle(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Invalidates the specified rectangle.  The rectangle is relative to the
            the diagram's top-left corner and in internal units.
            The rectangle will be inflated to invalidate a potential selection
            surrounding it.
            </summary>
            <param name="rectangle">rectangle is in world units and relative to the diagram's top-left.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.InvalidatedArea">
            <summary>
            Gets an object used to track the accumulated invalidation
            rectangles of ShapeElements while IMS events are raised.
            Intended to be used to support undo/redo feedback for V1, and not intended to
            live much beyond that.
            DO NOT CHANGE THE VISIBILITY OF THIS PROPERTY.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ShouldExcludeFromInvalidationTracking(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Calculates whether or not specific types of shapes should be excluded
            from the invalidation tracking for the diagram. 
            
            The base implementation excludes Diagrams and SwimLanes.
            </summary>
            <param name="shape">shape to check</param>
            <returns>true means exclude it from the tracking; false don't exclude it.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnGridPropertyChanged">
            <summary>
            Called when the grid properties have changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GraphWrapper">
            <summary>
            Gets the root GraphWrapper for the entire diagram.
            Although this property should be null since the diagram itself is not 
            contained within another subgraph, this property returns the diagram's 
            subgraph wrapper (i.e., the root GraphWrapper) for the sake of convenience.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.SubGraphWrapper">
            <summary>
            Gets the subgraph wrapper, which is also the root GraphWrapper for the entire diagram.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.RoutingStyle">
            <summary>
            Gets/Sets the routing style for the graph.
            </summary>
            <value>Routing style</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.RouteJumpType">
            <summary>
            Gets/Sets the line jump style for the graph.
            </summary>
            <value>route jump type</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.AutoLayoutShapeElements(System.Collections.ICollection)">
            <summary>
            Automatically lays out the passed collection of ShapeElements.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.AutoLayoutShapeElements(System.Collections.ICollection,Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGRoutingStyle,Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.PlacementValueStyle,System.Boolean)">
            <summary>
            Automatically lays out the passed collection of ShapeElements.
            </summary>
            <param name="shapeElementCollection">The collection of ShapeElements to automatically layout.</param>
            <param name="routingStyle">The line routing style to use.  If this is different from the diagram's current routing style, calling this method will change the routing style to match.</param>
            <param name="placementStyle">The placement style to use when repositioning shapes.</param>
            <param name="route">True if lines should be re-routed, false otherwise.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.selectionCleared">
            <summary>
            Ensures that the appropriate ShapeElements are
            created and configured correctly for the specified child
            ModelElement and the child ModelElement's descendants.
            </summary>
            <param name="existingParent">
            The ancestor element which has just been linked, either
            directly or indirectly, to the specified child
            element.
            </param>
            <param name="newChild">
            The descendant element which has just been linked, either
            directly or indirectly, to the specified parent
            element.
            </param>
            <remarks>
            Call this method if you know that the new child element can
            have a ShapeElement associated with it in the diagram. This
            method will ensure that the appropriate ShapeElements are
            created and configured correctly for the specified child
            element by finding the ShapeElements associated with
            the specified parent element and calling their
            OnChildElementAdded() to fix themselves up.
            </remarks>
            <remarks>
            The existing parent model element need not have a direct
            link with the new child element.
            The term "parent" really refers to the first model element ancestor
            of the child element which has an associated ShapeElement.
            </remarks>
            <remarks>
            You do not need to call this method for any descendants of the specified
            child ModelElement.
            </remarks>
            <remarks>
            If this method is given a shape to select by FixUpChildShapes, it will do so.  Prior to
            selecting any items, the owning diagram's current selection will be cleared.  This will only
            be done once for each diagram in the current transaction.  The effect is that all new shapes
            added in the same transaction will be made part of the diagram's current selection.  This is
            then subject to the diagram selection rules applied by each designer (so the end result might
            be somewhat different).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.FixUpDiagramSelection(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Updates the selection during FixUpDiagram.  Default behavior is to select
            the newChildShape on the active diagram view if there is one, or on all
            views if there is no active view.
            </summary>
            <param name="newChildShape">The new child shape that is added by FixUpDiagram</param>
            <returns>A non-null list of DiagramClientViews that had their selection modified.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.IsConnectorMappedToLink(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape)">
            <summary>
            Most connectors are mapped to element links, but there can be exceptions. This method tell if a connector should be
            mapped to an element link.
            Note: the base implementation always assumes that a connector is mapped to an element link and returns true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.IsOrphaned(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Determines if a shape is orphaned. A shape is considered "orphaned" if it should be backed by a ModelElement, but it is not.
            If a shape is determined to be "orphaned", it's OnOrphaned() method will be called, which will remove the shape with the base
            implementation.
            The base implementation consider a shape under following two cases "orphaned":
            1) It has a PresentationViewsSubject link out of it, but the Subject cannot be resolved.
            2) It is a connector that should be mapped to an element link, but the underlying link cannot be found. (We special-case 
            connectors because its PresentationViewsSubject link is not serialized by default).
            </summary>
            <param name="shapeElement">Shape to check</param>
            <returns>True if the shape is orphaned, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GetSourceRolePlayerForLinkMappedByConnector(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape)">
            <summary>
            Connectors are mapped to ElementLinks, but the PresentationViewsSubject relationship between them are not serialized 
            directly, so during deserialization, we need to re-establish the link. This method gives the source role-player of the
            link mapped by the given connector.
            The base implementation just returns the Subject of the FromShape of the given connector.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GetTargetRolePlayerForLinkMappedByConnector(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape)">
            <summary>
            Connectors are mapped to ElementLinks, but the PresentationViewsSubject relationship between them are not serialized 
            directly, so during deserialization, we need to re-establish the link. This method gives the target role-player of the
            link mapped by the given connector.
            The base implementation just returns the Subject of the ToShape of the given connector.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ResetSelectionClearedList">
            <summary>
            Method used to reset the list of diagrams whoes selection we have cleared.  This is invoked from
            the transaction rules.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.SetAbsoluteBoundsValue(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
             <summary>Function name: SetValueForCustomStoredProperty
             Description:
              </summary>
              <returns> void </returns>
              <param name = "attribute">DomainPropertyInfo attribute</param>
              <param name = "newValue">object newValue</param>
            
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CanShapeContainConnectors(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Method used to check if a shape can host a connector. Normally, this would only
            be the Diagram or a Swimlane, but this behavior can be overridden by the diagram.
            </summary>
            <param name="parentCandidate">Element to test if it can host a connector</param>
            <returns>True if parentCandidate is a type that can host a connector, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnToolboxSelectionChanged(Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem)">
            <summary>
            Called when the selection on toolbox changed (through a single-click, or pressing up/down arrow keys).
            Base implementation does nothing.
            </summary>
            <param name="toolboxItem">New toolbox item with selection. This can be null, if "Pointer" mode is selected.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnToolboxItemSelected(Microsoft.VisualStudio.Modeling.Design.ModelingToolboxItem)">
            <summary>
            Called on selection of a ToolboxItem. (A selection is a double-click, or pressing Enter).
            Base implementation simply returns false, which means the selection action is not handled.
            </summary>
            <param name="toolboxItem">Selected toolbox item. This will not be null; this method is not called when "Pointer" mode is selected.</param>
            <returns>True if the toolbox selection action is handled, false otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ConnectActionFilterString">
            <summary>
            Toolbox Filter string that identifies the connect action for the diagram.
            Moved up from SdmDiagram. Used in ToolboxAction.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.TargetToolboxItemFilterAttributes">
            <summary>
            Diagrams return the collection of ToolboxItemFilterAttributes applied to the diagram's type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.PerformLineRoutingRule">
            <summary>
            Sets up and fires the LineRoutingRule with the appropriate information
            for this diagram.  It only fires the event once per iteration and
            keeps a list of all of the changes that will be handled later.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnBeforeReroute">
            <summary>
            Virtual method that allows derived diagrams to perform certain operations before a reroute
            of lines occurs on this diagram.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.Reroute">
            <summary>
            Public way to force a reroute.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.AccessibleName">
            <summary>
            Diagrams return their own name, not their MEL's name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.UnhandledException(System.Exception)">
            <summary>
            Called when a transaction created by the core design surface throws an exception. If this method returns true the exception is
            swallowed. Otherwise it ripples up to the default .Net Framework exception handling code.
            Derived classes can override this method to customise exception handling and error messages.
            The base class returns false, meaning that all exceptions will be thrown up.
            </summary>
            <param name="ex">An exception thrown durign a core design surface transaction.</param>
            <returns>True if core design surface can't swallow the exception;  otherwise false (yes we can swallow it)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ShouldReportException(System.Exception)">
            <summary>
            Called when a transaction created by the core design surface throws an exception.
            Derived classes can override this method to customise whether the error is reported
            if it is being swallowed.  Note that critical exceptions will be thrown upwards and
            won't be reported - so there is no additional check required.
            </summary>
            <param name="ex">An exception thrown durign a core design surface transaction.</param>
            <returns>True if the error should be reported</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GroupBoundsRules">
            <summary>
            Gets the group bounds rules for the diagram. If the diagram supports
            port shapes, then it returns the PortGroupBoundsRules; otherwise, it just
            calls the base class implementation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.OnChildConfiguring(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Boolean)">
            <summary>
            Configure new child shapes as they are added
            </summary>
            <param name="createdDuringViewFixup">True if the child shape was created by the view fixup process (via a call to CreateChildShape), false otherwise.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateChildShape(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to retrieve a new instance of a child
            shape for the given model element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.ShouldAddShapeForElement(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to get a value indicating
            whether a ShapeElement should be created and added as a child of 
            this ShapeElement.
            </summary>
            <remarks>
            Default behavior is to return true if this is the drop target diagram.
            </remarks>
            <param name="element">The ModelElement recently added to the model.</param>
            <returns>true if a child ShapeElement should be added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.FindShape(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Find a shape corresponding to this given element on this diagram
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.GestureExtensionController">
            <summary>
            Property holds the GestureExtenstionController.
            This object is invoked on the various Diagram events that can be handled by GestureExtensions.
            This object passes on control to various GestureExtensions to hande the events.
            The first time this property is called, a GestureExtensionController is created and added to the Store's CompositionContainer
            If the CompositionContainer is null, or if the created GestureExtensionController is null, this property will return null.
            </summary>
            <remarks>
            There is an overridable Factory method to for Dsl authors to Create a custom GestureExtensionController.
            A default GestureExtensionController is not provided.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Diagram.CreateGestureExtensionController">
            <summary>
            Overridable Factory method to create a GestureExtensionController for the Diagram.
            </summary>		
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape">
            <summary>
            DomainClass LinkShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LinkShape
            </summary>
            <summary>
            Base class of all lines on the design surface.  It contains information about the Line and its
            EdgePoints.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.DomainClassId">
            <summary>
            LinkShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.EdgePointsDomainPropertyId">
            <summary>
            EdgePoints domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.EdgePoints">
            <summary>
            Gets or sets the value of EdgePoints domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.Edge Points
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.EdgePointsPropertyHandler">
            <summary>
            Value handler for the LinkShape.EdgePoints domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.EdgePointsPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the LinkShape.EdgePoints domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.EdgePointsPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the LinkShape.EdgePoints domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.EdgePointsPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.EdgePointsPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.EdgePointCollection)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.ManuallyRoutedDomainPropertyId">
            <summary>
            ManuallyRouted domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.manuallyRoutedPropertyStorage">
            <summary>
            Storage for ManuallyRouted
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.ManuallyRouted">
            <summary>
            Gets or sets the value of ManuallyRouted domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.Manually
            Routed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.ManuallyRoutedPropertyHandler">
            <summary>
            Value handler for the LinkShape.ManuallyRouted domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.ManuallyRoutedPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the LinkShape.ManuallyRouted domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.ManuallyRoutedPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the LinkShape.ManuallyRouted domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.ManuallyRoutedPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.ManuallyRoutedPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.Nodes">
            <summary>
            Gets a list of Nodes.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.Link
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.CanManuallyRoute">
            <summary>
            Gets a value indicating whether the user is allowed to manually route this LinkShape.
            </summary>
            <remarks>By default, straight lines cannot be manually routed.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.CanMoveAnchorPoints">
            <summary>
            Gets a value indicating whether the user is allowed to move the endpoints of this LinkShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.GridSize">
            <summary>
            Gets or sets the size of the grid that this LinkShape is on.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.EndSegmentBreakFactor">
            <summary>
            Gets the factor to use when break the end segment of a LinkShape.
            </summary>
            <value>double with break factor.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.EdgePointsNoJumps">
            <summary>
            Gets the edge points in world units with no jumps
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.HasShadow">
            <summary>
            Determines whether or not to draw the shape's shadow
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.OutlinePenId">
            <summary>
            Gets the pen resource id that will be used to
            draw the outline of the geometry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.AbsoluteBoundingBox">
            <summary>
            The bounding rectangle relative to the top-left of the Diagram.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.AbsoluteBoundingBoxToEnsureVisible">
            <summary>
            Gets the bounding rectangle that EnsureVisible will use.
            The rectangle is the same as AbsoluteBoundingBox but with height adjusted to be non-zero when width is non-zero.
            This is done because for single segment Links, the Height is 0 by default and can cause the selection bounds to 
            return as 'empty' even when a link is truly selected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.BoundingBox">
            <summary>
            The bounding rectangle relative to the top-left of this shape's parent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.CanMove">
            <summary>
            Gets a value indicating whether the user is allowed to reposition the shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.DecoratorsSize">
            <summary>
            The total size of the decorators
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.Invalidate">
            <summary>
            This method will invalidate the linkshape
            including (1) the outline pen that exceeds
            the bounds of the shape and (2) the
            linkshape's decorators.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.UpdateEdgePoints(Microsoft.VisualStudio.Modeling.Diagrams.EdgePointCollection)">
            <summary>
            Sets the EdgePoints collection, updates related members appropriately,
            and invalidates the associated views.
            </summary>
            <param name="newValue">the new collection of edge points.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.DefaultRoutingStyle">
            <summary>
            Specifies the default routing style to use
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.CreateGraphLayoutObject">
            <summary>
            Creates a corresponding layout object in the
            Graph Object for this shape.
            </summary>
            <returns>the created layout object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.Disconnect">
            <summary>
            Disconnects the current LinkShape from nodes on the graph.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.GraphEdge">
            <summary>
            Convienience function that creates the GraphEdge object for this Shape
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.HasEdgeCreated">
            <summary>
            Determine whether GraphEdge associated with this link shape has been defined or not. Return false if the edge has not been created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.RoutingStyle">
            <summary>
            Gets/Sets the routing style.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.RouteJumpType">
            <summary>
            Gets/Sets the line jump style.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.UserFixed">
            <summary>
            Gets/sets the edge's userFixed flag.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.IsRouted">
            <summary>
            Returns whether this LinkShape has been routed yet or is still ripped up
            and awaiting a reroute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.NavigateToFirst(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeElement to set focus to this shape's first sibling 
            (i.e., the parent's first child) in the navigation sequence.
            This also handles NavigateToFirst for LineSegments and AnchorPoints since
            key events are not routed to them.
            </summary>
            <param name="selection">The current selection whose focus will be updated.</param>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.NavigateToNext(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this LinkShape to set focus to the next segment in the navigation sequence.
            This also handles NavigateToNext for LineSegments and AnchorPoints since
            key events are not routed to them.
            </summary>
            <param name="selection">The current selection whose focus will be updated.</param>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.NavigateToPrevious(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this LinkShape to set focus to the previous segment in the navigation sequence.
            This also handles NavigateToPrevious for LineSegments and AnchorPoints since
            key events are not routed to them.
            </summary>
            <param name="selection">The current selection whose focus will be updated.</param>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.NavigateToLast(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeElement to set focus to this shape's last sibling 
            (i.e., the parent's last child) in the navigation sequence.
            This also handles NavigateToPrevious for LineSegments and AnchorPoints since
            key events are not routed to them.
            </summary>
            <param name="selection">The current selection whose focus will be updated.</param>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShape.NavigateAscend(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this LinkShape to set focus to its first 
            focusable ancestor in the navigation sequence.
            </summary>
            <param name="selection">The current selection whose focus will be updated.</param>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase">
            <summary>
            Double-derived base class for DomainClass BinaryLinkShape
            </summary>
            <summary>
            BinaryLinkShape is a class that represents a line which connects two NodeShapes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.DomainClassId">
            <summary>
            BinaryLinkShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedFromDomainPropertyId">
            <summary>
            FixedFrom domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedFrom">
            <summary>
            Gets or sets the value of FixedFrom domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape.Fixed
            From
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedFromPropertyHandler">
            <summary>
            Value handler for the BinaryLinkShape.FixedFrom domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedFromPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the BinaryLinkShape.FixedFrom domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedFromPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the BinaryLinkShape.FixedFrom domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedFromPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedFromPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase,Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGFixedCode)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedToDomainPropertyId">
            <summary>
            FixedTo domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedTo">
            <summary>
            Gets or sets the value of FixedTo domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape.Fixed
            To
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedToPropertyHandler">
            <summary>
            Value handler for the BinaryLinkShape.FixedTo domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedToPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the BinaryLinkShape.FixedTo domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedToPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the BinaryLinkShape.FixedTo domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedToPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FixedToPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase,Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGFixedCode)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.DefaultDecoratorSize">
            <summary>
            The default decorator - before any modifications
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.ShapeGeometry">
            <summary>
            The ShapeGeometry class for the LinkShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.DecoratorsSize">
            <summary>
            The total size of the decorators - needed for UI invalidation calculations
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.SetDecorators(Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator,Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator,System.Boolean)">
            <summary>
            Set the decorators for the line. User can optionally invalidate the line when called.
            </summary>
            <param name="newFromDecorator"></param>
            <param name="newToDecorator"></param>
            <param name="invalidate"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.SetDecorators(Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator,Microsoft.VisualStudio.Modeling.Diagrams.SizeD,Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator,Microsoft.VisualStudio.Modeling.Diagrams.SizeD,System.Boolean)">
            <summary>
            Set the decorators for the line. User can optionally invalidate the line when called.
            </summary>
            <param name="newFromDecorator">from decorator</param>
            <param name="newFromDecoratorSize">Size for the from decorator</param>
            <param name="newToDecorator">to decorator</param>
            <param name="newToDecoratorSize">Size for the to decorator</param>
            <param name="invalidate">invalidate or not</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.DecoratorFrom">
            <summary>
            Gets or sets the decorator on the From end of the relationship.
            </summary>
            <value>LinkDecorator representing the decorator on this end on the BinaryLinkShape</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GeometryDecoratorFromSize">
            <summary>
            Gets the size for the decorator on the From end of the relationship.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.DecoratorTo">
            <summary>
            Gets or sets the decorator on the To end of the relationship.
            </summary>
            <value>LinkDecorator representing the decorator on this end on the BinaryLinkShape</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GeometryDecoratorToSize">
            <summary>
            Gets the size for the decorator on the To end of the relationship.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FromLinkConnectsToNode">
            <summary>
            Gets the ElementLink on the From end of the relationship.
            </summary>
            <value>LinkConnectsToNode representing the ElementLink on this end on the BinaryLinkShape</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.ToLinkConnectsToNode">
            <summary>
            Gets the ElementLink on the To end of the relationship.
            </summary>
            <value>LinkConnectsToNode representing the ElementLink on this end on the BinaryLinkShape</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FromShape">
            <summary>
            Gets the NodeShape on the From end of the relationship.
            </summary>
            <value>NodeShape representing the shape on this end on the BinaryLinkShape</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.ToShape">
            <summary>
            Gets the NodeShape on the To end of the relationship.
            </summary>
            <value>NodeShape representing the shape on this end on the BinaryLinkShape</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.Connect(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            Creates the ElementLink relationships needed to connect the two specified NodeShapes.
            If this BinaryLinkShape is already on a Diagram, then also connect up the GraphEdge as well.
            If not, then the GraphEdge is connected up when the BinaryLinkShape is added to a Diagram.
            </summary>
            <param name="fromShape">NodeShape on the From end of the relationship.</param>
            <param name="toShape">NodeShape on the To end of the relationship.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.Disconnect">
            <summary>
            Disconnects the current LinkShape from both of its connected end points.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.ConnectEdgeToNodes">
            <summary>
            Connects the Edge representation in the Graph Object to its Nodes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.RecalculateRoute">
            <summary>
            The setter MUST be called in a transaction.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GetGraphNodeOnSubGraphWrapper(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            Substitutes a duplicate port if the link is hooking to a port in another
            portion of the hierarchy.  The 'official' port shown in the diagram lives
            at the parent level, but nested shapes attaching to the port require this
            duplicate to existing (in the graph object only) at the child level to avoid
            crossing hierarchies.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.excludePath">
            <summary>
            Cached exclude path
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.ExcludePath">
            <summary>
            get/set the graphics path
            This is a singleton on the BinaryLinkShape class.  Do not dispose.
            Use immediately.  Use Clone if another path is needed!
            </summary>
            <value>returns a GraphicsPath</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.ExcludeFromClipRegion(System.Drawing.Graphics,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Excludes this shape and its endpoint shapes from the clipping region in 
            the specified Graphics object.
            </summary>
            <param name="graphics">Graphics object with valid clipping region</param>
            <param name="matrix">The matrix is used to translate the shape's ShapeGeometry's 
            graphics path to compensate for the parent-relative location of the shape.
            </param>
            <param name="shapePath">The shape path of this shape (For optimization purposes; can be null, in which case it will be recalculated.)</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GeometryEdgePoints">
            <summary>
            Gets the edge points in world units
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GeometryEdgePointsNoJumps">
            <summary>
            Gets the edge points in world units with no jumps
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GeometryDecoratorFrom">
            <summary>
            Gets the LinkDecorator at the "from" end of the link.
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GeometryDecoratorTo">
            <summary>
            Gets the LinkDecorator at the "to" end of the link.
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GeometryCanManuallyRoute">
            <summary>
            Gets a value indicating whether the user is allowed to manually route this LinkShape.
            (Intended to be called only by the ShapeGeometry-derived classes.)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GetDefaultLineSegment">
            <summary>
            Returns the default line segment for this LinkShape, which is the first
            segment in the line.
            </summary>
            <returns>first LineSegment in the line</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GetStartLineSegment">
            <summary>
            Returns the first line segment of this LinkShape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GetEndLineSegment">
            <summary>
            Returns the line segment for the end of this LinkShape.
            </summary>
            <returns>last LineSegment in the line</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GetLineSegments">
            <summary>
            Returns a list of the LineSegments in this link shape.
            </summary>
            <returns>A list of the LineSegments in this link shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GetStartAnchorPoint">
            <summary>
            Gets the anchor point connected to the "from shape" if any.
            </summary>
            <returns>The anchor point connected to the "from shape" if any.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GetEndAnchorPoint">
            <summary>
            Gets the anchor point connected to the "to shape" if any.
            </summary>
            <returns>The anchor point connected to the "to shape" if any.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GetFixedFromValue">
            <summary>
            Gets the edge from point's userFixed flag.
            </summary>
            <value>The current VGFixedCode value</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.SetFixedFromValue(Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGFixedCode)">
            <summary>
            Sets the edge from point's userFixed flag.
            </summary>
            <param name="value">The new value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.GetFixedToValue">
            <summary>
            Gets the edge to point's userFixed flag.
            </summary>
            <value>The current VGFixedCode value</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FindOrCreateConnectorFixupDataDuringMergeAndSerialization">
            <summary>
            Return staged ConnectorFixupData data during serialization/merge. During the serialization/merge, the GraphEdge has not yet being created. 
            Hence, we will create ConnectorFixupData and stage the setting. During transaction top level commit (rule SetConnectorAnchorsOnLoad), 
            we will try to set it (the rationale is that the edge shall already be created at that juncture.).
            </summary>
            <returns>Returns ConnectorFixupData of this link shape</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.SetFixedToValue(Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGFixedCode)">
            <summary>
            Sets the edge to point's userFixed flag.
            </summary>
            <param name="value">The new value</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.FromEndPoint">
            <summary>
            Gets/sets the edge's from point.
            </summary>
            <value>PointD</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.ToEndPoint">
            <summary>
            Gets/sets the edge's to point.
            </summary>
            <value>PointD</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.CalculateDerivedVisible(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Calculate the DerivedVisible value for this shape, assuming the parent is correct.
            </summary>
            <remarks>
            Links are only visible if their end nodes are visible
            </remarks>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.AnchorBothEnds">
            <summary>
            How to anchor when we actually do the deed.
            The CD usually wants to anchor both ends but only wants to anchor one
            end if the line is a two pointer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.OnDeleted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeBase.AccessibleName">
            <summary>
            Returns the name for this shape exposed to accessibility clients.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape">
            <summary>
            DomainClass BinaryLinkShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape
            </summary>
            <summary>
            Customized part of BinaryLinkShape, to store the type of the element link connected by this binary link shape through 
            PresentationViewsSubject relationship.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape.targetRelationshipDomainClassId">
            <summary>
            Stores the target element link domain class id, which will be used in deserialization to link the binary link shape back
            to the element link.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape.TargetRelationshipDomainClassId">
            <summary>
            Stores the target element link domain class id, which will be used in deserialization to link the binary link shape back
            to the element link.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape">
            <summary>
            DomainClass GenericLinkShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.DomainClassId">
            <summary>
            GenericLinkShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.NameDomainPropertyId">
            <summary>
            Name domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.namePropertyStorage">
            <summary>
            Storage for Name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.Name">
            <summary>
            Gets or sets the value of Name domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.Name
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.NamePropertyHandler">
            <summary>
            Value handler for the GenericLinkShape.Name domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.NamePropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the GenericLinkShape.Name domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.NamePropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the GenericLinkShape.Name domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.NamePropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.NamePropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape,System.String)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.ClassStyleSet">
            <summary>
            Defines per-class stlyes for this shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShape.ShapeFields">
            <summary>
            Defines a per-class list of shape fields for this shape.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape">
            <summary>
            DomainClass LabelShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LabelShape
            </summary>
            <summary>
            Base label class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.DomainClassId">
            <summary>
            LabelShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.TextDomainPropertyId">
            <summary>
            Text domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.textPropertyStorage">
            <summary>
            Storage for Text
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.Text">
            <summary>
            Gets or sets the value of Text domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.Text
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.TextPropertyHandler">
            <summary>
            Value handler for the LabelShape.Text domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.TextPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the LabelShape.Text domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.TextPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the LabelShape.Text domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.TextPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.LabelShape)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.TextPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.LabelShape,System.String)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.LabelFieldName">
            <summary>
            Identifies the label shape field in this shape's shape fields collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.AccessibleName">
            <summary>
            Gets the name of the shape used by accessibility client applications.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.Label">
            <summary>
            Alternate way to get to the IMS Text property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.CreateTextField">
            <summary>
            Creates a new TextField derived class
            </summary>
            <returns>TextField derived class</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.InitializeShapeFields(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.ShapeField})">
            <summary>
            Creates and adds shape fields to this shape type.
            </summary>
            <param name="shapeFields">The shape fields collection for this shape type.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.ClipWhenDrawingFields">
            <summary>
            Gets a value indicating whether the clipping region should
            be set to the bounding box of this shape when drawing its
            child ShapeFields.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.CanFocus">
            <summary>
            Returns false if a child can receive the focus.
            Otherwise, it returns true. 
            This prevents the double-focused behavior that 
            would have been caused by a focusable shape 
            with a single focusable text field.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.MultipleLine">
            <summary>
            Gets a value indicating whether the label should
            be allowed to display the text in multiple lines.
            </summary>
            <value>true if the text can be multiple lines.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.FixedFlags">
            <summary>
            Gets the FixedFlags properties for a GraphNode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.ChooseRelationship(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Called by ShapeElement.FixUpChildShapes() to get the type of relationship the
            child ShapeElement has to its parent.
            </summary>
            <param name="childShape">Child shape to be added to this shape.</param>
            <returns>The RelationshipType to create.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.OnDoubleClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Invokes in-place editing
            </summary>
            <param name="e">The DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.RelatedShapeToEmphasize">
            <summary>
            Gets the related ShapeElement that should be visually emphasized
            to the user when this shape is selected.  This appearance is
            different from selection and does not indicate that the related
            shape is selected.  The intent is to draw the user's attention
            to the related shape to help provide context.
            This property returns null if no shape should be emphasized.
            
            An example usage: The user may not be clear as to which shape a
            label is associated with, so by visually emphasizing the label's 
            parent shape when the label is selected, the user can quickly 
            identify the related shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.DisplayText">
            <summary>
            Gets the text to display in this shape.  
            By default, this calls GetDisplayText on the text field within this shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.AutoSizeLabel">
            <summary>
            Automatically sizes this LabelShape.
            Must be in a transaction to call this method because it updates shape bounds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.AutoSizeLabel(System.String)">
            <summary>
            Automatically sizes this LabelShape based on the text that's passed in.
            Must be in a transaction to call this method because it updates shape bounds.
            </summary>
            <param name="labelText">text to size the LabelShape to fit.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.GetAnchorMargins(Microsoft.VisualStudio.Modeling.Diagrams.TextField)">
            <summary>
            Helper method to get the size of the Margins specified in the TextField's anchoring.
            </summary>
            <param name="field">Text field to get margins from.</param>
            <returns>SizeD with margins in both directions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.ConstrainLabelSize(Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Called to constrain the automatically calculated size of the label.
            The default implementation has no constraint.
            </summary>
            <param name="proposedSize">Size we wish to make the label.</param>
            <returns>SizeD with the constrained size.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.GetAnchorMargins(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Gets the size of the Margins specified in the TextField's anchoring.
            </summary>
            <param name="field">Text field to get margins from.</param>
            <returns>SizeD with margins in both directions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.InternalOnLabelTextChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            This method is called when the text for this LabelShape has changed.
            And calls derived classes to respond to the text change as well.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.OnLabelTextChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            This method is called when the text for this LabelShape has changed.
            Override this method to respond to the text change as well.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.LabelShapeChangedRule">
            <summary>
            A rule which executes when a LabelShape's data has changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.ClassStyleSet">
            <summary>
            Defines per-class stlyes for this shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShape.ShapeFields">
            <summary>
            Defines a per-class list of shape fields for this shape.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape">
            <summary>
            DomainClass LineLabelShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape
            </summary>
            <summary>
            LineLabelShape that automatically places itself near BinaryLinkShapes, and maintains
            its relative position as the BinaryLinkShape moves.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.DomainClassId">
            <summary>
            LineLabelShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.OffsetDomainPropertyId">
            <summary>
            Offset domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.Offset">
            <summary>
            Gets or sets the value of Offset domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.Offset
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.OffsetPropertyHandler">
            <summary>
            Value handler for the LineLabelShape.Offset domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.OffsetPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the LineLabelShape.Offset domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.OffsetPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the LineLabelShape.Offset domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.OffsetPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.OffsetPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.AlignmentDomainPropertyId">
            <summary>
            Alignment domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.Alignment">
            <summary>
            Gets or sets the value of Alignment domain property.
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.Alignment
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.AlignmentPropertyHandler">
            <summary>
            Value handler for the LineLabelShape.Alignment domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.AlignmentPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the LineLabelShape.Alignment domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.AlignmentPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the LineLabelShape.Alignment domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.AlignmentPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.AlignmentPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape,Microsoft.VisualStudio.Modeling.Diagrams.LabelAlignment)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.PlacementDomainPropertyId">
            <summary>
            Placement domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.Placement">
            <summary>
            Gets or sets the value of Placement domain property.
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.Placement
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.PlacementPropertyHandler">
            <summary>
            Value handler for the LineLabelShape.Placement domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.PlacementPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the LineLabelShape.Placement domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.PlacementPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the LineLabelShape.Placement domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.PlacementPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.PlacementPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape,Microsoft.VisualStudio.Modeling.Diagrams.LabelPlacement)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallySizedDomainPropertyId">
            <summary>
            ManuallySized domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.manuallySizedPropertyStorage">
            <summary>
            Storage for ManuallySized
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallySized">
            <summary>
            Gets or sets the value of ManuallySized domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.Manually
            Sized
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallySizedPropertyHandler">
            <summary>
            Value handler for the LineLabelShape.ManuallySized domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallySizedPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the LineLabelShape.ManuallySized domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallySizedPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the LineLabelShape.ManuallySized domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallySizedPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallySizedPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallyPlacedDomainPropertyId">
            <summary>
            ManuallyPlaced domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.manuallyPlacedPropertyStorage">
            <summary>
            Storage for ManuallyPlaced
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallyPlaced">
            <summary>
            Gets or sets the value of ManuallyPlaced domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.Manually
            Placed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallyPlacedPropertyHandler">
            <summary>
            Value handler for the LineLabelShape.ManuallyPlaced domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallyPlacedPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the LineLabelShape.ManuallyPlaced domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallyPlacedPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the LineLabelShape.ManuallyPlaced domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallyPlacedPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ManuallyPlacedPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.DefaultOffset">
            <summary>
            The default value for the offset between the line label and its anchor point.
            </summary>
            <value>PointD for the offset between the line label and its anchor point.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.MostRecentSegmentOrientation">
            <summary>
            The segment's orientation when the label position was last calculated.
            </summary>
            <value>The last valid orientation of the line segment.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.HasShadow">
            <summary>
            Determines whether or not to draw the shape's shadow
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.MaximumSize">
            <summary>
            Gets the maximum size of this LabelShape in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.MinimumSize">
            <summary>
            Gets the minimum size of this LabelShape in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ResizableSides">
            <summary>
            Gets the sides of the node shape which can be resized by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.GridSize">
            <summary>
            Gets a GridSize of zero which effectively 
            disables snap-to-grid for line labels.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.HasHighlighting">
            <summary>
            Gets a value indicating whether to draw the ShapeElement's highlight
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.HasOutline">
            <summary>
            Gets a value indicating whether to draw the outline 
            of the shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.BoundsRules">
            <summary>
            Gets the object which constrains the bounds of this shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.InternalOnLabelTextChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            This method is called when the text for this LabelShape has changed.
            And calls derived classes to respond to the text change as well.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.AutoSizeLabel(System.String)">
            <summary>
            Automatically sizes this LabelShape based on the text that's passed in.
            Must be in a transaction to call this method because it updates shape bounds.
            </summary>
            <param name="text">text to size the LabelShape to fit.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.ConstrainLabelSize(Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Called to constrain the automatically calculated size of the label.
            The default implementation has no constraint.
            </summary>
            <param name="proposedSize">Size we wish to make the label.</param>
            <returns>SizeD with the constrained size.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.Microsoft#VisualStudio#Modeling#Diagrams#ILineLabel#AdjustPosition">
            <summary>
            Use non-virtual method to implement the internal interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.AdjustPosition">
            <summary>
            Automatically adjusts this LineLabel's position based on the LinkShape that
            its connected to and the specified label properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.GetSegment(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape)">
            <summary>
            Retrieves the segment that this LineLabel is attached to from the LinkShape.
            </summary>
            <param name="linkShape">LinkShape associated with this LineLabel.</param>
            <returns>LineSegment this LineLabel is associated with.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.Microsoft#VisualStudio#Modeling#Diagrams#ILineLabel#UpdateLabelOffset(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Updates the label's offset from its anchor point based on the change in position.
            </summary>
            <param name="oldBounds">old size of the label.</param>
            <param name="newBounds">new size of the label.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShape.UpdateLabelOffset(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Updates the label's offset from its anchor point based on the change in position.
            </summary>
            <param name="oldBounds">old size of the label.</param>
            <param name="newBounds">new size of the label.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PortShape">
            <summary>
            DomainClass PortShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.PortShape
            </summary>
            <summary>
            Obsolete class that used to be for hosting ports - now any NodeShape can host ports.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PortShape.DomainClassId">
            <summary>
            PortShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ImageShape">
            <summary>
            DomainClass ImageShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.ImageShape
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ImageShape.DomainClassId">
            <summary>
            ImageShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ImageShape.geometries">
            <summary>
            List of geometries to be used for individual derived types
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ImageShape.Image">
            <summary>
            Provide the image that will be used to render all members of this class
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ImageShape.HasBackgroundGradient">
            <summary>
            Image shapes cannot have background gradients.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape">
            <summary>
            DomainClass SwimlaneShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape
            </summary>
            <summary>
            SwimlaneShape class that represents a swim lane on a Diagram. A swim land is
            nested within the diagram and break it up into areas. Child shapes are placed
            within a swim lane and can be moved between them.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.DomainClassId">
            <summary>
            SwimlaneShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.MinimumSize">
            <summary>
            The minimum size of a shape in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.HasShadow">
            <summary>
            Ports don't have shadows by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.HasOutline">
            <summary>
            Specifies whether the swimlane has outline
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.HasHighlighting">
            <summary>
            Specifies whether the swimlane has highlight
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.CanMove">
            <summary>
            Gets a value indicating whether the user is allowed to reposition the ShapeElement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.CanExpandAndCollapse">
            <summary>
            Swimlanes are not allowed to expand/collapse.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.BoundsRules">
            <summary>
            Gets the object which constrains the bounds of this shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.ResizableSides">
            <summary>
            Ports cannot be resized by the end user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.HasConnectionPoints">
            <summary>
            Gets whether or not this NodeShape requires the use of connection points.
            </summary>
            <value>true means this shape requires connection points; otherwise, they're not used.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.HeaderSize">
            <summary>
            Gets the size of the header section of the swim lane. For horizontal 
            lanes it corresponds to the height of the header. For vertical lanes
            it corresponds to the width of the header.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.ShapeGeometry">
            <summary>
            Swim lanes can only have a rectangular geometry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.NestedShapesMargin">
            <summary>
            Gets the margin between this SwimLane's bounding box
            perimeter and its nested node shapes.  The margin is in
            world units.
            This margin is to provide a region along the perimeter
            of this Diagram where connection lines can route through.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.AllowsChildrenToResizeParent">
            <summary>
            Gets value which determines if child shapes are allowed to resize this shape.
            </summary>
            <value>true - this shape resizes based on its children.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.Alignment">
            <summary>
            Gets or sets how swimlanes are aligned on the diagram.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.AllowsChildrenInSelection">
            <summary>
            Gets whether or not this shape's children are allowed in the same
            selection group as this parent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.ForwardDragDropToParent">
            <summary>
            Gets or sets whether the DragDrop message to this class should be forwarded to
            the parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.OnInitialize">
            <summary>
            When the shape is initialized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.InitializeShapeFields(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.ShapeField})">
            <summary>
            Initialize the fields within a swim lane.
            </summary>
            <param name="shapeFields"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.OnShapeInserted">
            <summary>
            Called when this ShapeElement is made a child ShapeElement 
            of its parent ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.OnDragOver(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Forwards OnDragOver message to the parent if the property is set.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.OnDragDrop(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Forwards OnDragDrop message to the parent if the property is set.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.ShouldTryParentShapeForMergeOnToolboxDoubleClick">
            <summary>
            Controls what happens when this ShapeElement is selected and the user double-clicks a toolbox item.
            By default, if CanMerge() fails for this ShapeElement, the double-click action will terminate.
            If a shape overrides this method to return true, the toolbox double-click will walk up to this
            ShapeElement's ParentShape and try the CanMerge() again.
            </summary>
            <remarks>
            Unmapped swimlanes pass to their parent by default.
            </remarks>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.OnPaintSelection(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            The standard selection is not drawn.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.GetPotentialMouseAction(System.Windows.Forms.MouseButtons,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Retrieves a mouse action that should be made active on the next
            MouseDown event if the mouse is over the specified point.
            </summary>
            <param name="mouseButtons">The mouse button pressed.</param>
            <param name="pt">mouse position relative to Diagram's top-left in world units.</param>
            <param name="hitTestInfo">The hit-test information corresponding to the mouse position.</param>
            <returns>The mouse action that should be made active on the next MouseDown event.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.CoerceSelection(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Boolean)">
            <summary>
            Allows a shape to change the selected items. Called from the select action.
            </summary>
            <param name="item">Diagram item that's being affected.</param>
            <param name="view">View that we're operating on.</param>
            <param name="isAddition">Whether selection is being added or removed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.FindHeaderBackgroundField(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.ShapeField})">
            <summary>
            Find the background field in the swimlane.
            </summary>
            <param name="shapeFields">List of subfields to look in.</param>
            <returns>The area field that was found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.CalculateLaneMinimumSize">
            <summary>
            Calculate the minimum size needed to fit all of the nested shapes.
            </summary>
            <returns>Minimum size.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape.IsLastSwimlane">
            <summary>
            Tests whether or not this is the last swimlane in the diagram.
            </summary>
            <returns>true means this is the last swimlane; false means it's not.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Port">
            <summary>
            DomainClass Port
            Description for Microsoft.VisualStudio.Modeling.Diagrams.Port
            </summary>
            <summary>
            Port shape class that represents a port on a parent shape. A port lives
            along the edge of the parent shape and moves along with it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Port.DomainClassId">
            <summary>
            Port domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Port.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Port.IsPort">
            <summary>
            Indicate this is a port shape
            </summary>
            <returns>true - this is a Port shape</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Port.DefaultSize">
            <summary>
            The default size for a Port.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Port.MinimumSize">
            <summary>
            The minimum size of a shape in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Port.HasShadow">
            <summary>
            Ports don't have shadows by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Port.BoundsRules">
            <summary>
            Gets the object which constrains the bounds of this shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Port.ResizableSides">
            <summary>
            Ports cannot be resized by the end user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Port.HasConnectionPoints">
            <summary>
            Gets whether or not this NodeShape requires the use of connection points.
            </summary>
            <value>true means this shape requires connection points; otherwise, they're not used.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Port.GridSize">
            <summary>
            Gets or sets the grid size in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Port.ActiveBoundsRules">
            <summary>
            Gets or sets the currently active bounds rules on the port.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Port.Placement">
            <summary>
            Returns the edge of the parent component shape where the port shape is currently placed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Port.InitializeResources(Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Change the outline pen to only be a single pixel width.
            </summary>
            <param name="classStyleSet">Style set for this shape class.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Port.GetPotentialMouseAction(System.Windows.Forms.MouseButtons,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Get the active MouseAction when the cursor is over the port.
            </summary>
            <param name="mouseButtons">Mouse buttons pressed</param>
            <param name="pt">Point is relative to Diagram's top-left in internal units.</param>
            <param name="hitTestInfo">Shapes that were hit.</param>
            <returns>Active mouse action.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Port.OnDragDrop(Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            On Drag Drop forward call to the parent shape.
            </summary>
            <param name="diagramDragArgs">DragDrop Args</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Port.GetChildPortPlacement(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns the edge on the given parent and given port bounds.
            This method internally calls GetChildPortPlacement(RectangleD parentShapeDimensions, RectangleD childShapeRelativeBounds)
            To override behavior for this method, override GetChildPortPlacement(RectangleD parentShapeDimensions, RectangleD childShapeRelativeBounds)
            </summary>
            <param name="parent">parent NodeShape</param>
            <param name="portBounds">port Bounds</param>
            <returns>PortPlacement</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Port.GetChildPortPlacement(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            PortPlacement Determining Logic is encapsulated in this method.
            </summary>
            <param name="parentShapeDimensions">Only the width and height are used since the other parameter is relative.</param>
            <param name="childShapeRelativeBounds">relativeBounds of child with respect to parent</param>
            <returns>PortPlacment</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Modeling.Diagrams.Port.OnParentNodeShapeChanged(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Modeling.Diagrams.Port.OnParentNodeShapeResized(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)" -->
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment">
            <summary>
            DomainClass ListCompartment
            Description for Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment
            </summary>
            <summary>
            A CompartmentShape whose region below the header is fully occupied by a single ListField.
            The region below the header can be shown and hidden.  The shape will automatically resize appropriately.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.DomainClassId">
            <summary>
            ListCompartment domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.ItemTextColorDomainPropertyId">
            <summary>
            ItemTextColor domain property Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.ItemTextColor">
            <summary>
            Gets or sets the value of ItemTextColor domain property.
            Description for Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.Item
            Text Color
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.ItemTextColorPropertyHandler">
            <summary>
            Value handler for the ListCompartment.ItemTextColor domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.ItemTextColorPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the ListCompartment.ItemTextColor domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.ItemTextColorPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the ListCompartment.ItemTextColor domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.ItemTextColorPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.ItemTextColorPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment,System.Drawing.Color)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.InitializeShapeFields(System.Collections.Generic.IList{Microsoft.VisualStudio.Modeling.Diagrams.ShapeField})">
            <summary>
            Adds the list field to the compartment shape.
            </summary>
            <param name="shapeFields"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.ListField">
             <summary>
             Gets the main list field for this compartment.
             </summary>
            
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.AccessibleName">
            <summary>
            Returns the accessibility name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.GetItemCount(Microsoft.VisualStudio.Modeling.Diagrams.ListField)">
            <summary>
            Gets the number of items in the specified list field.
            </summary>
            <param name="listField">The child list field requesting the number of items.</param>
            <returns>The number of items in the specified list field.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.GetItemDrawInfo(Microsoft.VisualStudio.Modeling.Diagrams.ListField,System.Int32,Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo)">
            <summary>
            Gets drawing information for a single list item in the list field.
            </summary>
            <param name="listField">The child list field requesting the drawing information.</param>
            <param name="row">The zero-based row number of the list item to draw.</param>
            <param name="itemDrawInfo">An ItemDrawInfo that receives the drawing information.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.SnakingInfo">
            <summary>
            Get the information necessary to snake the list
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.OnKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            When the key down is pressed, we need to see if it's Up/Down key and perform proper navigation here.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.OverrideStyles(Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Set the shape's styles into the given styleset
            </summary>
            <param name="styleset">Styleset that we're overriding.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.OnInitialize">
            <summary>
            This method is called when a shape is inititially created, Override this function so we can provide a type descriptor of its parent.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartment.Forwarder(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Forward type description to true Subject.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment">
            <summary>
            DomainClass ElementListCompartment
            Description for Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment
            </summary>
            <summary>
            A ListCompartment specialized for displaying a collection of model elements.
            The region below the header can be shown and hidden.  The shape will automatically resize appropriately.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.DomainClassId">
            <summary>
            ElementListCompartment domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.DisplayPropertyId">
            <summary>
            Gets and sets the Id of the property to be used as this list compartment's
            display property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.PropertyElementGetter">
            <summary>
            Delegate to get the element that hosts the displayed property from
            an element in the list
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.ItemDisplayNameGetter">
            <summary>
            Get/Set the delegate used to get the display string for a compartment item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.ItemDisplayImageGetter">
            <summary>
            Get/Set the delegate that provides an image for the compartment item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.ItemAccessibleNameGetter">
            <summary>
            Get/Set the delegate used to get the display string for a compartment item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.ItemAccessibleDescriptionGetter">
            <summary>
            Get/Set the delegate used to get the display string for a compartment item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.DefaultCreationDomainClass">
            <summary>
            Gets or sets the DomainClassInfo to use for new item creation.
            This is the default one that gets used when we're not sure which
            one to create.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.Items">
            <summary>
            Gets the model elements to be displayed in the list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.HasItemToolTips">
            <summary>
            Whether this compartment asks its parent shape to show tooltips for each item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.GetItemCount(Microsoft.VisualStudio.Modeling.Diagrams.ListField)">
            <summary>
            Gets the number of items in the specified list field.
            </summary>
            <param name="listField">The child list field requesting the number of items.</param>
            <returns>The number of items in the specified list field.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.GetItemDrawInfo(Microsoft.VisualStudio.Modeling.Diagrams.ListField,System.Int32,Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo)">
            <summary>
            Gets drawing information for a single list item in the list field.
            </summary>
            <param name="listField">The child list field requesting the drawing information.</param>
            <param name="row">The zero-based row number of the list item to draw.</param>
            <param name="itemDrawInfo">An ItemDrawInfo that receives the drawing information.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.GetSubFieldRepresentedElements(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Gets the primary ModelElement that the specified ShapeSubField represents.
            This is used for tracking selection and displaying the properties of the underlying element.
            </summary>
            <param name="shapeField">A child ShapeField of this ShapeElement.</param>
            <param name="subField">A child ShapeSubField of the specified ShapeField.</param>
            <returns>
            The primary ModelElement that the specified child ShapeSubField represents.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.GetSubFieldRepresentedPropertyElements(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Gets the ModelElement that hosts the property displayed in the specified ShapeSubField. 
            This may be different from the ModelElement returned from GetSubFieldRepresentedElements
            because the subfield may represent one element, but may get it's displayed property from another
            element that is related to the represented element.
            </summary>
            <param name="field"></param>
            <param name="subField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.GetSubFieldRepresentedProperty(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Gets the property descriptor associated with the specified subfield.
            </summary>
            <param name="field">A child ShapeField of this ShapeElement.</param>
            <param name="subField">A child ShapeSubField of the specified ShapeField.</param>
            <returns>The property descriptor associated with the specified subfield.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.GetSubFieldAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Gets the accessible name associated with the specified subfield.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.GetSubFieldAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Gets the accessible description associated with the specified subfield.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Overrides the DoHitTest method, so that list items are not hit detectable
            when zoomed out too far.
            </summary>
            <param name="point">Point to test.</param>
            <param name="hitTestInfo">Hit test information about that point.</param>
            <param name="includeTolerance">Whether or not tolerance values should be in hit calculation.</param>
            <returns>Whether or not this item was hit.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.OnKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            When the Insert/Enter key is pressed, add a new item. If there is a currently selected item, the new item will be of the same type,
            otherwise it will be of the default type.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.HasToolTip">
            <summary>
            Specify whether this shape has a tooltip
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.GetToolTipText(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Get the tooltip text for this shape
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.UpdateSize">
            <summary>
            Updates the compartment's size to the right size based on number of
            items in it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.HandleNewListItemInsertion(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.DomainClassInfo)">
            <summary>
            Creates a new list item based on the currently selected item. If none is selected,
            then uses the default type. Then adds the new item into the Items list and
            automatically sets it to start editing that item.
            </summary>
            <param name="view">Current view we're working with.</param>
            <param name="selectedDomainClassInfo">Select element's DomainClassInfo to create.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.CreateNewListItem(Microsoft.VisualStudio.Modeling.DomainClassInfo,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Creates a new list item based on the currently selected item. If none is selected,
            then uses the default type. 
            </summary>
            <param name="selectedElement">Select element to use a template for new one to be created.</param>
            <param name="parent">Parent model element in which the selected Element is embedded.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.SetMappedPropertyDefault(Microsoft.VisualStudio.Modeling.DomainPropertyInfo)">
            <summary>
            Sets the ListCompartmentItem's mapped property to it's default value. The base
            class implementation does nothing, but provides an entry point for derived 
            classes that want to specify a default value.
            </summary>
            <param name="property">Property value to set.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.ClassStyleSet">
            <summary>
            Defines per-class stlyes for this shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartment.ShapeFields">
            <summary>
            Defines a per-class list of shape fields for this shape.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase">
            <summary>
            Double-derived base class for DomainClass DecoratorHostShape
            </summary>
            <summary>
            Customization of DecoratorHostShapeBase.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.DomainClassId">
            <summary>
            DecoratorHostShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallyPlacedDomainPropertyId">
            <summary>
            ManuallyPlaced domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.manuallyPlacedPropertyStorage">
            <summary>
            Storage for ManuallyPlaced
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallyPlaced">
            <summary>
            Gets or sets the value of ManuallyPlaced domain property.
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.Manually Placed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallyPlacedPropertyHandler">
            <summary>
            Value handler for the DecoratorHostShape.ManuallyPlaced domain property.
            </summary>
            <summary>
            Customization of value handler for the DecoratorHostShape.ManuallyPlaced domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallyPlacedPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the DecoratorHostShape.ManuallyPlaced domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallyPlacedPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the DecoratorHostShape.ManuallyPlaced domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallyPlacedPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallyPlacedPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallyPlacedPropertyHandler.OnValueChanged(Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase,System.Boolean,System.Boolean)">
            <summary>
            Override OnValueChanged() to know when the value changes.
            </summary>
            <param name="element">DecoratorHostShape whose ManuallyPlaced property changed.</param>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallySizedDomainPropertyId">
            <summary>
            ManuallySized domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.manuallySizedPropertyStorage">
            <summary>
            Storage for ManuallySized
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallySized">
            <summary>
            Gets or sets the value of ManuallySized domain property.
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.Manually Sized
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallySizedPropertyHandler">
            <summary>
            Value handler for the DecoratorHostShape.ManuallySized domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallySizedPropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the DecoratorHostShape.ManuallySized domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallySizedPropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the DecoratorHostShape.ManuallySized domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallySizedPropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.ManuallySizedPropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase,System.Boolean)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeBase.OnManuallyPlacedChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when ManuallyPlaced property changes.
            Base implementation does nothing.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape">
            <summary>
            DomainClass DecoratorHostShape
            Description for Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape
            </summary>
            <summary>
            A simple shape class for holding ShapeFields specified by Decorators that are not positioned within the parent shape's boundary.
            </summary>
            <remarks>
            Constains no positioning logic - that is kept within the decorator itself.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.OnAssociatedPropertyChanged(Microsoft.VisualStudio.Modeling.Diagrams.PropertyChangedEventArgs)">
            <summary>
            Called when a property mapped to this shape changes.
            </summary>
            <remarks>
            Overriden to update visibility, which is not stored in IMS.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.CanMove">
            <summary>
            DecoratorHostShape cannot be moved by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.CanSelect">
            <summary>
            DecoratorHostShape cannot be selected by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.HasShadow">
            <summary>
            DecoratorHostShape has no shadow.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.HasOutline">
            <summary>
            DecoratorHostShape has no outline
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.HasFilledBackground">
            <summary>
            DecoratorHostShape doesn't have a filled background
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.HasHighlighting">
            <summary>
            DecoratorHostShape doesn't have a highlight.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.SetBoundsRules(Microsoft.VisualStudio.Modeling.Diagrams.BoundsRules)">
            <summary>
            Associates bounds rules with this host shape.  May be necessary for increased
            control over shape positioning.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.StyleSet">
            <summary>
            Defines styles for this shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.CreateClassStyleSet">
            <summary>
            DecoratorHostShape does not implement a class style set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.ClassStyleSet">
            <summary>
            DecoratorHostShape does not implement a class style set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.CreateInstanceStyleSet">
            <summary>
            DecoratorHostShape inherits its parent shape's style set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.FixedFlags">
            <summary>
            Make decorators permeable to connectors
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.Microsoft#VisualStudio#Modeling#Diagrams#ILineLabel#AdjustPosition">
            <summary>
            Auto-adjust the position of this ILineLabel.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.Microsoft#VisualStudio#Modeling#Diagrams#ILineLabel#UpdateLabelOffset(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            This method is called when the position/size of the ILineLabel is explicitly changed by the user.
            </summary>
            <param name="oldBounds">Old bounds of this ILineLabel.</param>
            <param name="newBounds">New bounds of this ILineLabel.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.ForwardEventsToParent">
            <summary>
            Gets or sets whether Key and Mouse events to this class should be forwarded to
            the parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Overrides OnMouseDown to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.OnMouseUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Overrides OnMouseUp to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.OnClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Overrides OnClick to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.OnDoubleClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Overrides OnDoubleClick to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.OnKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Overrides OnKeyDown to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.OnKeyUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Overrides OnKeyUp to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.OnKeyPress(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs)">
            <summary>
            Overrides OnKeyPress to forward events to parent shape if ForwardEventsToParent == true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.HasToolTip">
            <summary>
            Decorator has tooltip
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.GetToolTipText(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Text of tooltip
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape.AccessibleName">
            <summary>
            Provides an AccessibleName for this DecoratorHostShape using the AccessibleValue of the Field contained by the shapes Decorator.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase">
            <summary>
            Double-derived base class for DomainClass MoveableDecoratorHostShape
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.DomainClassId">
            <summary>
            MoveableDecoratorHostShape domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor.
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.AngleDomainPropertyId">
            <summary>
            Angle domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.anglePropertyStorage">
            <summary>
            Storage for Angle
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.Angle">
            <summary>
            Gets or sets the value of Angle domain property.
            Form a polar coordinate using the anchor point as pole and the direction/norm of
            parent line segment/shape as pole-axis, this is the angle of where the center of
            gravity of this host shape should be.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.AnglePropertyHandler">
            <summary>
            Value handler for the MoveableDecoratorHostShape.Angle domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.AnglePropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the MoveableDecoratorHostShape.Angle domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.AnglePropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the MoveableDecoratorHostShape.Angle domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.AnglePropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.AnglePropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase,System.Double)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.DistanceDomainPropertyId">
            <summary>
            Distance domain property Id.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.distancePropertyStorage">
            <summary>
            Storage for Distance
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.Distance">
            <summary>
            Gets or sets the value of Distance domain property.
            Form a polar coordinate using the anchor point as pole and the direction/norm of
            parent line segment/shape as pole-axis, this is the radial distance of where the
            center of gravity of this host shape should be.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.DistancePropertyHandler">
            <summary>
            Value handler for the MoveableDecoratorHostShape.Distance domain property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.DistancePropertyHandler.Instance">
            <summary>
            Gets the singleton instance of the MoveableDecoratorHostShape.Distance domain property value handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.DistancePropertyHandler.DomainPropertyId">
            <summary>
            Gets the Id of the MoveableDecoratorHostShape.Distance domain property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.DistancePropertyHandler.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase)">
            <summary>
            Gets a strongly-typed value of the property on specified element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase.DistancePropertyHandler.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeBase,System.Double)">
            <summary>
            Sets property value on an element.
            </summary>
            <param name="element">Element which owns the property.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape">
            <summary>
            DomainClass MoveableDecoratorHostShape
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape
            </summary>
            <summary>
            A simple shape class for holding ShapeFields specified by Decorators that are not positioned within the parent shape's boundary.
            The decorator is moveable, although the default positioning logic is controlled by the decorator itself.
            </summary>
            <summary>
            Even though a moveable decorator host shape is selected, we don't really want to show its properties in the property browser, we
            want to show the parent shape's properties instead. However, to make this fully working, using a custo type description provider
            on moveable decorator host shape is not enough. We also need to implement ICustomTypeDescriptor on the host shape to return the 
            parent shape as owner of the properties. Otherwise, custom property descriptors on the parent shape may not work correctly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new element is to be created.</param>
            <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.selectionChangeRegistered">
            <summary>
            True if registered with SelectionChanged events, false otherwise.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.resizableSides">
            <summary>
            Stores the resizable sides explicitly set to override the defaults.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.CanMove">
            <summary>
            MoveableDecoratorHostShape can be moved by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.CanSelect">
            <summary>
            MoveableDecoratorHostShape can be selected by the user, if it is moveable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.ResizableSides">
            <summary>
            Control which sides of this moveable decorator can be resized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.OnPaintSelection(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Override OnPaintSelection() to draw a thin line from this host shape to the
            anchor point.
            </summary>
            <param name="e">
            A DiagramPaintEventArgs that contains event data. 
            The coordinate system of the Graphics object is in
            world units and relative to the parent shape. 
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.SetAbsoluteBoundsValue(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Override SetAbsoluteBoundsValue() to handle movement through nudge.
            </summary>
            <param name="newValue">New absolute bounds.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.OnManuallyPlacedChanged(System.Boolean,System.Boolean)">
            <summary>
            Override ONManuallyPlacedChanged() to update the size/location of this decorator.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.Microsoft#VisualStudio#Modeling#Diagrams#ILineLabel#UpdateLabelOffset(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            This method is called when the position/size of the ILineLabel is explicitly changed by the user.
            </summary>
            <param name="oldBounds">Old bounds of this ILineLabel, not used.</param>
            <param name="newBounds">New bounds of this ILineLabel.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.UpdateLabelOffset(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            This method is called when the position/size of the ILineLabel is explicitly changed.
            </summary>
            <param name="newBounds">New bounds of this ILineLabel.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.SetResizableSides(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape.NodeSides)">
            <summary>
            Explicitly sets the resizable sides of this host shape, which override the default.
            </summary>
            <param name="resizableSides">Sides that are resizable.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.IsDecoratorTextEmpty">
            <summary>
            Returns true if the decorator text is empty
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.OnPaintSelectionLine(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Paint a selection line from this host shape to its anchor point. This is called when 
            either this host shape is selected, or its parent shape is selected.
            </summary>
            <param name="e">Event Args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.CalculateCenterLocation">
            <summary>
            Calculate the new location of the center of this host shape based on the location of the parent shape.
            </summary>
            <returns>The location of the center of this host shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.EstablishCoordinate(Microsoft.VisualStudio.Modeling.Diagrams.PointD@,Microsoft.VisualStudio.Modeling.Diagrams.PointD@)">
            <summary>
            Establish polar coordinate at the anchor point of this host shape.
            The coordinate can then be used to calculate/update the location of this shape.
            </summary>
            <param name="anchor">Pole point of the established polar coordinate.</param>
            <param name="axis">Pole axis vector expressed as a PointD.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.OnShapeSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            ShapeSelectionChanged callback.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.InvalidateSelectionLine">
            <summary>
            Invalidate the region covered by selection line, so the region will redraw properly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.InvalidateRegion(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Invalidate the given region.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.GetSelectionLinePosition(Microsoft.VisualStudio.Modeling.Diagrams.PointD@,Microsoft.VisualStudio.Modeling.Diagrams.PointD@)">
            <summary>
            A selection line is a thin line from this host shape to its anchor point when this host shape
            is selected. The line helps the user to figure out where the decorator hosted by this shape is
            attached to.
            </summary>
            <param name="start">Start point of the selection line, in coordinates related to parent shape.</param>
            <param name="end">End point of the selection line, in coordinates related to parent shape.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>Returns the attributes of the parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>Class name of parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>The name of parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>Converter of parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>Default event of parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>Default property of parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A System.Type that represents the editor for this object.</param>
            <returns>Editor of parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute
            array as a filter.
            </summary>
            <param name="attributes">An array of type System.Attribute that is used as a filter.</param>
            <returns>Filtered events of parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>Events of parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute
            array as a filter.
            </summary>
            <param name="attributes">An array of type System.Attribute that is used as a filter.</param>
            <returns>Filtered properties of parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>Properties of the parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShape.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property
            descriptor.
            </summary>
            <param name="pd">
            A System.ComponentModel.PropertyDescriptor that represents the property whose
            owner is to be found.
            </param>
            <returns>Owner object of the given property descriptor, which will be the parent shape.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject">
            <summary>
            DomainRelationship PresentationViewsSubject
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.DomainClassId">
            <summary>
            PresentationViewsSubject domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Constructor
            Creates a PresentationViewsSubject link in the same Partition as the given PresentationElement
            </summary>
            <param name="source">PresentationElement to use as the source of the relationship.</param>
            <param name="target">ModelElement to use as the target of the relationship.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.RoleAssignment[],Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
            <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.RoleAssignment[],Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
            <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.PresentationDomainRoleId">
            <summary>
            Presentation domain role Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.Presentation">
            <summary>
            DomainRole Presentation
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.Presentation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.GetPresentation(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Gets a list of Presentation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.SubjectDomainRoleId">
            <summary>
            Subject domain role Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.Subject">
            <summary>
            DomainRole Subject
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.Subject
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.GetSubject(Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement)">
            <summary>
            Gets Subject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.SetSubject(Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Sets Subject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.GetLinkToSubject(Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement)">
            <summary>
            Get the PresentationViewsSubject link to a PresentationElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.GetLinksToPresentation(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Get the list of PresentationViewsSubject links to a ModelElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.GetLinks(Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Get any PresentationViewsSubject links between a given PresentationElement and a ModelElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubject.GetLink(Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Get the one PresentationViewsSubject link between a given PresentationElementand a ModelElement.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode">
            <summary>
            DomainRelationship LinkConnectsToNode
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.DomainClassId">
            <summary>
            LinkConnectsToNode domain class Id.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            Constructor
            Creates a LinkConnectsToNode link in the same Partition as the given LinkShape
            </summary>
            <param name="source">LinkShape to use as the source of the relationship.</param>
            <param name="target">NodeShape to use as the target of the relationship.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.RoleAssignment[],Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="store">Store where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
            <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.RoleAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.#ctor(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.RoleAssignment[],Microsoft.VisualStudio.Modeling.PropertyAssignment[])">
            <summary>
            Constructor
            </summary>
            <param name="partition">Partition where new link is to be created.</param>
            <param name="roleAssignments">List of relationship role assignments.</param>
            <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.LinkDomainRoleId">
            <summary>
            Link domain role Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.Link">
            <summary>
            DomainRole Link
            Description for Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.Link
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.GetLink(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            Gets a list of Link.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.NodesDomainRoleId">
            <summary>
            Nodes domain role Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.Nodes">
            <summary>
            DomainRole Nodes
            Description for
            Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.Nodes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.GetNodes(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape)">
            <summary>
            Gets a list of Nodes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.GetLinksToNodes(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape)">
            <summary>
            Get the list of LinkConnectsToNode links to a LinkShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.GetLinksToLink(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            Get the list of LinkConnectsToNode links to a NodeShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNode.GetLinks(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            Get any LinkConnectsToNode links between a given LinkShape and a NodeShape.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CreateAction">
            <summary>
            CreateAction responds to select items from toolbox to create them on the diagram.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CreateAction.cursor">
            <summary>
            Cursor to use when this action is activated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CreateAction.stickyMode">
            <summary>
            Whether this action is in sticky mode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CreateAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Constructor.
            </summary>
            <param name="diagram">Diagram to create action on.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CreateAction.StickyMode">
            <summary>
            Whether this action is in sticky mode or not.
            If in sticky mode, after creating one element, the action will not be deactivated, so the user can
            keep creating more elements of the same type without selecting the item from toolbox again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CreateAction.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor to display at the specified mouse position.
            </summary>
            <param name="currentCursor">The existing cursor.</param>
            <param name="diagramClientView">The DiagramClientView requesting the cursor.</param>
            <param name="mousePosition">The cursor position in world units relative to the top-left of the diagram.</param>
            <returns>The cursor to display at the specified mouse position.</returns>
            <remarks>
            This method is called by the DiagramClientView if this MouseAction is active or
            if it is the potential MouseAction.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CreateAction.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called when a MouseMove event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
            <remarks>
            This method selects the mouse cursor because DiagramMouseEventArgs contains
            important hit-test information. The selected cursor is set via GetCursor.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CreateAction.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called when a MouseHover event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CreateAction.OnDragCompleted(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction's drag operation has completed.
            When in Sticky mode doesn’t end the action
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CreateAction.OnClicked(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction has received a non-dragging 
            MouseDown + MouseUp combination or when it has received a 
            Complete event.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
            <remarks>
            Set e.ActionRequest to ActionRequest.CompleteAction to complete the
            MouseAction and deactivate it.
            </remarks>
            <remarks>
            Set e.ActionRequest to ActionRequest.CancelAction to cancel the
            MouseAction and deactivate it.
            </remarks>
            <remarks>
            Set e.ActionRequest to ActionRequest.ContinueAction to keep the
            MouseAction active.  This will place the MouseAction in the
            hovering state.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CreateAction.ResetToolboxOnDragDrop">
            <summary>
            Override ResetToolboxOnDragDrop to keep the same toolbox selection if this is in
            sticky mode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.#ctor">
            <summary>
            Private constructor to prevent instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.AddClrElementRulePriority">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.AddOrphanedLinkForPresentationViewsSubjectLink">
            <summary>
            Rules that add an orphaned PEL link when a PresentationViewsSubject link is added.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.AddPresentationViewsSubjectLinkForOrphanedLink">
            <summary>
            Rules that add a PresentationViewsSubject link when an orphaned PEL link is added.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.AddShapeRulePriority">
            <summary>
            Rules that add child shapes fire at this priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.AddShapeParentExistRulePriority">
            <summary>
            Rules that need to have a diagram shape association present
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.AddConnectionRulePriority">
            <summary>
            Rules that add connections between shapes fire at this priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.AutoLayoutShapesRulePriority">
            <summary>
            Rules that auto-layout shapes fire at this priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.ResizeParentRulePriority">
            <summary>
            Rules that resize parents of nested shapes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.ShapeAnchoringRulePriority">
            <summary>
            Rules that resize parents of nested shapes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.LineReroutingRulePriority">
            <summary>
            Rules that reroute lines on a diagram.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFixupConstants.LoopMax">
            <summary>
            Gets or sets the maximum amount of times that the auto fixup code is allowed to loop
            through trying to position and size everything correctly.  It defaults to the above, but is
            settable per designer.
            </summary>
            <value>Maximum number of times auto fixup code is allowed to loop.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BoundsFixupState">
            <summary>
            Enum that specifies the state when OnBoundsFixup is called.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ResizeParentRule">
            <summary>
            Custom rule to tell the design surface when a parent of nested shapes needs to be resized
            to fit its children.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResizeParentRule.ElementPropertyChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            This method handles the custom rule.  When the rule is fired, this method will
            be called by the IMS rules engine.
            </summary>
            <param name="e">Event arguments specified when it is fired.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAnchoringRule">
            <summary>
            Custom rule to tell the design surface when anchored shapes need to have then position and
            size adjusted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LineRoutingRule">
            <summary>
            Custom rule to tell the design surface when the lines on the diagram need to be rerouted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineRoutingRule.ElementPropertyChanged(Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            This method handles the custom rule.  When the rule is fired, this method will
            be called by the IMS rules engine.
            </summary>
            <param name="e">Event arguments specified when it is fired.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineRoutingRule.ReparentChildren(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Reparent the child shapes in the graph object.
            </summary>
            <param name="shape">ShapeElement to reparent the nested and relative children of</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementViewFixupRule">
            <summary>
            Custom rule to tell the 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ViewFixupData">
            <summary>
            The ViewFixupEventArgs contains information about shapes that need
            special fixup during the view fixup phase.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ViewFixupData.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Constructor allows user to specify the shapes that need fixing up.
            </summary>
            <param name="store">Store that this is working against.</param>
            <param name="eventId">The eventId.</param>
            <param name="parentShape">The proposed parent shape for the new child shape.</param>
            <param name="childShape">The new child shape.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ViewFixupData.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Constructor allows user to specify the shapes that need fixing up.
            </summary>
            <param name="store">Store that this is working against.</param>
            <param name="eventId">The eventId.</param>
            <param name="parentShape">The proposed parent shape for the new child shape.</param>
            <param name="childShape">The new child shape.</param>
            <param name="childElement">ModelElement associated with ChildShape.  May be null.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ViewFixupData.ParentShape">
            <summary>
            The proposed parent shape for the new child shape.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ViewFixupData.ChildShape">
            <summary>
            The new child shape.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ViewFixupData.ChildElement">
            <summary>
            ModelElement associated with ChildShape.  May be null.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PlaceUnplacedShapesRule">
            <summary>
            Custom rule to tell the 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DashStyleTypeConverter">
            <summary>
            Type converter for displaying DashStyle values in the property grid.  Filters out the "Custom" value since 
            it doesn't make sense for this value to appear in the target designer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.Decorator">
            <summary>
            Class to encapsulate the way ShapeFields and child shapes are used to represent Notation Decorators
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.field">
            <summary>
            The field that this Decorator wraps
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.offset">
            <summary>
            The decorator offset.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.canMove">
            <summary>
            Whether this decorator can be moved. A decorator can be moved only if it is instantiated as moveable and
            also requires a host.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.Field">
            <summary>
            The ShapeField item that this decorator specifies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.Offset">
            <summary>
            Gets or sets the offset used to modify the default position of the decorator specified by position.
            How it works:
            
            For non-centered shape positions the X and/or Y offset coordinate
            is simply added to the X and/or Y position of the decorator.
            
            For centered shape positions, the X and/or Y offset coordinate is treated as
            a percentage in the range 0 to 1.0, and is added to 0.5 to modify the position of the decorator.
            
            For connector decorators, the X and/or Y offset coordinates modify the distance between the decorator and
            the line and/or shape the line connects to.  The greater the offset, the greater the distance.
            
            For example, if a shape decorator position of OuterMiddleLeft is specified, and the offset is (-0.1, 0.1), 
            then the decorator will be shifted 0.1 units to the left and placed 60% of the way between
            the top and bottom of the shape.
            </summary>
            <remarks>
            Changing the decorator offset does not automatically cause
            the diagram to update.  If the decorator exists inside the shape, all shapes
            using the decorator must be invalidated after the change.  If the decorator exists
            outside the shape, ConfigureHostShape and RepositionHostShape must be called for all
            host shapes hosting this decorator.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.OnAfterOffsetChanged">
            <summary>
            Hook for derived classes to make modifications to the decorator after the
            offset changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Constructs a new decorator.
            </summary>
            <param name="field">ShapeField corresponding to this decorator.</param>
            <param name="offset">Offset for position adjustment.</param>
            <param name="canMove">Whether this decorator can be moved.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Boolean)">
            <summary>
            Constructs a new decorator.
            </summary>
            <param name="field">ShapeField corresponding to this decorator.</param>
            <param name="offset">Offset for position adjustment.</param>
            <param name="canMove">Whether this decorator can be moved.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.RequiresHost">
            <summary>
            Does this position require that the parent shape have a host added?
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.CanMove">
            <summary>
            Whether this decorator can be moved. A decorator can be moved only if it is instantiated as moveable and
            also requires a host.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.ConfigureHostShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Configures a host shape for use with this decorator.  
            If the given parent does not have a host shape for this decorator,
            a new one will be created.  If a host shape already exists,
            settings for this decorator will be re-applied to the existing host shape; 
            a new host shape will not be created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.DecoratorAnchorMargins">
            <summary>
            Helper to get the size of the Margins specified in the ShapeField's anchoring.
            </summary>
            <param name="field">Text field to get margins from.</param>
            <returns>SizeD with margins in both directions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.UpdateDecoratorHostShapes(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Given a model element, finds all mapped presentation elements, and updates the corresponding decorator host shape bounds.
            </summary>
            <param name="element">Starting point for navigation to presentation elements</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.UpdateDecoratorHostShapes(Microsoft.VisualStudio.Modeling.ModelElement,System.Guid)">
            <summary>
            Given a model element, finds all mapped presentation elements, and updates the corresponding decorator host shape bounds.
            </summary>
            <param name="element">Starting point for navigation to presentation elements</param>
            <param name="domainClassId">Domain class identifier of class presentation elements are mapped to.  In the case that
            this decorator has multiple associated domain class types, domainClassId is used to specify which association to use.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.RepositionHostShape(Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape)">
            <summary>
            Method to reposition host shape and set its visibility.
            </summary>
            <param name="hostShape"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.AssociateValueWith(Microsoft.VisualStudio.Modeling.Store,System.Guid)">
            <summary>
            Associates this decorator with an IMS property on the ShapeElement hosting the decorator.
            </summary>
            <param name="store"></param>
            <param name="propertyGuid">The guid of a Property on the ShapeElement.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.AssociateValueWith(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo)">
            <summary>
            Associates this decorator with a domain property.
            </summary>
            <param name="store"></param>
            <param name="propertyInfo">Provides information about the property association.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.AssociateValueWith(Microsoft.VisualStudio.Modeling.Store,System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo)" -->
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.AssociateVisibilityWith(Microsoft.VisualStudio.Modeling.Store,System.Guid)">
            <summary>
            Associates this decorator's visibility with an IMS property on the ShapeElement hosting the decorator.
            </summary>
            <param name="store"></param>
            <param name="propertyId">The guid of a Property on a ShapeElement.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.AssociateVisibilityWith(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo)">
            <summary>
            Associates this decorator's visibility with domain property.
            </summary>
            <param name="store"></param>
            <param name="propertyInfo">Provides information about the property association.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.AssociateVisibilityWith(Microsoft.VisualStudio.Modeling.Store,System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo)">
            <summary>
            Associates this decorator's visibility with a domain property,
            when the shape is mapped to an instance of the given domain class.
            Use this method when there are multiple domain classes that this decorator can be mapped to.
            </summary>
            <param name="store"></param>
            <param name="domainClassId">Domain class id.</param>
            <param name="propertyInfo">Provides information about the property association.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.PelMelNavigationWrapper.innerPelMelNavigator">
            <summary>
            Inner delegate to navigate the PEL->MEL relationship, which doesn't know about
            the host shape.  If this decorator requires a host, we'll wrap this in a second
            delegate to do the host->parent shape navigation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.PelMelNavigationWrapper.isShapeProperty">
            <summary>
            indicates whether the property exists on the shape or the underlying model element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the value associated with this decorator and the given parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Object)">
            <summary>
            Sets the value associated with this decorator and the given parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.GetVisible(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the visibility of this decorator in the context of the given parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.Decorator.SetVisible(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Object)">
            <summary>
            Sets the visibility of this decorator in the context of the given parent shape.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ContextMenuRequestedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ScrollPositionChangedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ScrollRangeChangedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ZoomChangedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView">
            <summary>
            This is an IMS-based design surface which is capable
            of rendering any IMS Diagram.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnsureVisiblePreferences">
            <summary>
            Preferences for the EnsureVisible method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnsureVisiblePreferences.ScrollHorizontally">
            <summary>
            Scrolls the view horizontally first; if the rectangle is
            still not visible, the view will be scrolled vertically.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnsureVisiblePreferences.ScrollVertically">
            <summary>
            Scrolls the view vertically first; if the rectangle is
            still not visible, the view will be scrolled horizontally.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnsureVisiblePreferences.ScrollIntoViewCenter">
            <summary>
            Scrolls the view both vertically and horizontally such that
            the rectangle is centered in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnsureVisiblePreferences.MinimalScrollWithNoZoom">
            <summary>
            Minimal scroll required to get the rectangle in view without zooming out, if the rectangle doesn't fit.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ContextMenuRequested">
            <summary>
            Occurs when the control's context menu has been requested.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnContextMenuRequested(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the ContextMenuRequested event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollPositionChanged">
            <summary>
            Occurs when the value of either the HorizontalScrollPosition 
            property or VerticalScrollPosition property changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnScrollPositionChanged(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Raises the ScrollPositionChanged event.
            </summary>
            <param name="e">A DiagramEventArgs that contains the event data.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollRangeChanged">
            <summary>
            Occurs when the value of either the MaximumHorizontalScrollRange
            property or MaximumVerticalScrollRange property changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnScrollRangeChanged(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Raises the ScrollRangeChanged event.
            </summary>
            <param name="e">A DiagramEventArgs that contains the event data.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ZoomChanged">
            <summary>
            Occurs when the the value of the ZoomFactor property changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnZoomChanged(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Raises the ZoomChanged event.
            </summary>
            <param name="e">A DiagramEventArgs that contains the event data.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DiagramAssociated">
            <summary>
            Event fired after a diagram is associated with the client view
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnDiagramAssociated">
            <summary>
            Raises the DiagramAssociated event
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DiagramDisassociating">
            <summary>
            Event fired before a diagram is disassociated with the client view
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnDiagramDisassociating">
            <summary>
            Raises the DiagramDisassociating event
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.#ctor">
            <summary>
            Initializes a new instance of the DiagramClientView class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.Dispose(System.Boolean)">
            <summary>
            Releases all resources, managed and unmanaged, related to this class.
            </summary>
            <param name="disposing">
            A value of true indicates that all resources (managed and unmanaged) should be disposed.
            A value of false indicates that Dispose has been called 
            by the runtime from within the finalizer, so you should 
            not reference other managed objects.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.AssociateDiagram(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Called when a Diagram is associated with this 
            DiagramClientView.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.RefreshShadowBitmap">
            <summary>
            Gets or sets the flag for whether the diagram's ShadowBitmap needs to be refreshed.
            </summary>
            <value>true means the shadow bitmap needs to be refreshed; false means it doesn't.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ShadowBitmap">
            <summary>
            Gets the ShadowBitmap associated with this design surface.
            </summary>
            <value>Bitmap that represents the ShadowBitmap for this design surface.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ResetShadowBitmap(System.Drawing.Rectangle)">
            <summary>
            Resets the ShadowBitmap by getting rid of the old one and creating a new bitmap.
            </summary>
            <param name="imageSize">Contains the size for the new bitmap.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DiscardAndRefreshCachedBitmap">
            <summary>
            Set refreshShadowBitmap to true so we will refresh the bitmap during Diagram.DrawDiagram. Also, this method will also reset cachedImageSize size. When paint comes, 
            the old bitmap will be wiped (due to size difference - cachedImageSize is now set to 0, see the size comparision in method ResetShadowBitmap which compares 
            cachedImageSize) and a new one will be created. 
            This is to address a bug where one scroll down/up and right/left from the scroll bar and there're tiny residual bitmap on the top left side of the window. 
            This appears to be repainting issue. If we don't reuse the bitmap, the problem goes away. To fix this, we will discard the cached bitmap when user scrolls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the control.
            </summary>
            <param name="e">A PaintEventArgs that contains information about the control to paint.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnPaintDelayTimer(System.Object,System.EventArgs)">
            <summary>
            Failsafe to keep from painting when the diagram is in a transaction.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            See comments above.  This used to be a work-around but is now a failsafe
            to avoid trying to paint during an unstable period. We can't repaint during
            a transaction because we cannot safely query the store and expect it to
            be stable.
            To work Around this, the OnPaint method will start a timer that will
            invalidate the view after a short delay.
            The origin of this was the Graph Object's COM interop layer dispatching WM_PAINT
            messages.  The graph object is now managed so the problem should not appear.  However,
            it is valid failsafe logic so it is being kept. sml 9/22/03
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.InvalidateRectangle(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Invalidates the specified rectangle in world units.
            </summary>
            <param name="rectangle">Rectangle to invalidate in world units and relative to the Diagram's top-left.</param>
            <remarks>
            The rectangle is assumed to be a shape's rectangle, so it is inflated
            by the size of the surrounding selection rectangle.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnUserPreferenceChanged(System.Object,Microsoft.Win32.UserPreferenceChangedEventArgs)">
            <summary>
            Notification for this control of when the system colors change.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Dispatches the MouseDown event to the appropriate diagram objects.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnMouseLeave(System.EventArgs)">
            <summary>
            Dispatches the MouseLeave event to the appropriate diagram objects.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnMouseEnter(System.EventArgs)">
            <summary>
            Dispatches the MouseEnter event to the appropriate diagram objects.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Dispatches the MouseMove event to the appropriate diagram objects.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.TakeFocusOnDragOver">
            <summary>
            Gets or sets a value indicating whether this control
            should take the focus on a DragOver event.
            </summary>
            <value>true if this control should take the focus on a DragOver event.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DragDropInfoCache">
            <summary>
            Gets the cached information calculated during the drag/drop 
            process from the time DiagramClientView.OnDragEnter() is 
            called to the time DiagramClientView.OnDragLeave() or 
            DiagramClientView.OnDragDrop() is called.
            </summary>
            <value>The cached information calculated during the drag/drop process.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnDragLeave(System.EventArgs)">
            <summary>
            Dispatches the DragLeave event to the appropriate diagram objects.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnDragDropCancelled(System.EventArgs)">
            <summary>
            Reset the toolbox on dragdrop cancel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnableBumpScrolling(System.Int32)">
            <summary>
            Enables bump scrolling after the specified initial delay in milliseconds.
            </summary>
            <param name="initialDelay">The delay before bump scrolling is enabled in milliseconds.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DisableBumpScrolling">
            <summary>
            Disables bump scrolling.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnBumpScrollTimerTick(System.Object,System.EventArgs)">
            <summary>
            This is the method to run when the timer is raised.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
            This is the method to run when the timer is raised.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Dispatches the MouseUp event to the appropriate diagram objects.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnClick(System.EventArgs)">
            <summary>
            Dispatches the Click event to the appropriate diagram objects.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnDoubleClick(System.EventArgs)">
            <summary>
            Dispatches the DoubleClick event to the appropriate diagram objects.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Dispatches the MouseWheel event to the appropriate diagram objects.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
            Catch a couple of messages before translation.
            </summary>
            <param name="msg">Message of possible interest</param>
            <returns>true if handled</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnResize(System.EventArgs)">
            <summary>
            Raises the resize event.
            Resets the diagram's ShadowBitmap.
            </summary>
            <param name="e">An EventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages
            </summary>
            <param name="m">
            The Windows message to process
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.CreateAccessibilityInstance">
            <summary>
            Creates a new accessibility object for this control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special key that requires preprocessing.
            </summary>
            <param name="keyData">One of the Keys values.</param>
            <returns>true if the key event should be sent directly to the control and not preprocessed; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Dispatches the KeyDown event to the appropriate diagram objects.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.CanTranslateToCommand(System.Windows.Forms.Keys)">
            <summary>
            Returns a value indicating whether the key translates to a command.
            </summary>
            <param name="keyData"></param>
            <returns>true if the key translates to a command.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.TranslateToCommand(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Invokes a command
            </summary>
            <param name="keyArgs">A DiagramKeyEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Dispatches the KeyUp event to the appropriate diagram objects.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Dispatches the KeyDown event to the appropriate diagram objects.
            </summary>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Dispatches the DragOver event to the appropriate diagram objects.
            </summary>
            <param name="e">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.InvokeDragDropTarget">
            <summary>
            The shape that InvokeDragDrop() will drop onto, or null if there is no drop target.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.InvokeDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Invokes a DragDrop of the supplied DragEventArgs onto the currently selected Shape.
            </summary>
            <param name="e">A set of DragEventArgs that contains the IDataObject to be dropped.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Dispatches the DragDrop event to the appropriate diagram objects.
            </summary>
            <param name="e">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnDragDropCommon(System.Windows.Forms.DragEventArgs,System.Boolean,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Called on a DragDrop.
            </summary>
            <param name="e">The DragEventArgs of the DragDrop.</param>
            <param name="isDropLocationUserSpecified">indicates if (e.X,e.Y) were specified by the user or manufactured.</param>
            <param name="hitShape">The ShapeElement dropped onto. If null, a hit test is performed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            The GiveFeedback event allows the source of a drag event to
            modify the appearance of the mouse pointer in order to give
            the user visual feedback during a drag-and-drop operation.
            </summary>
            <param name="e">A GiveFeedbackEventArgs that contains the event data.</param>
            <remarks>
            OnGiveFeedback is responsible for changing the cursor based
            on the value of GiveFeedbackEventArgs.Effect.
            GiveFeedbackEventArgs.Effect is the drop effect value returned
            by the most recent call to OnDragEnter, OnDragOver, or OnDragLeave.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DropTargetFeedback">
            <summary>
            Gets a DropTargetFeedback object which provides
            the drag feedback.  By modifying this object,
            drag feedback can be altered.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnGotFocus(System.EventArgs)">
            <summary>
            Overridden.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnLostFocus(System.EventArgs)">
            <summary>
            Overridden.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.Cursor">
            <summary>
            (Note: Override the cursor in the MouseAction-derived classes or ShapeElement-derived classes instead.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ActiveMouseAction">
            <summary>
            Gets or sets the active mouse action for this DiagramClientView.
            </summary>
            <remarks>
            A mouse action is a modal mouse operation such as the connector tool
            or the zoom tool.
            
            To install a mouse action, set this property to a MouseAction 
            derived class.  The mouse action will automatically be activated.
            
            To uninstall a mouse action, either allow the mouse action to run 
            its course or explicitly set this property to null or to another 
            mouse action.  If the current mouse action is still active when 
            this property is set, then the current mouse action is automatically 
            canceled.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.GetPotentialMouseAction(System.Windows.Forms.MouseButtons,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Retrieves the potential mouse action that should be made active on the very next
            MouseDown event if the MouseDown event occurs at the specified point.
            </summary>
            <param name="mouseButtons">The mouse buttons currently pressed.</param>
            <param name="point">The location of the mouse relative to the Diagram's top-left in world units.</param>
            <param name="hitTestInfo">The object to receive the resultant hit test information.</param>
            <returns>
            A mouse action that should be made active on the very next 
            MouseDown event if the MouseDown event occurs at the specified point.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.Diagram">
            <summary>
            Gets or sets the Diagram object associated with this DiagramClientView.
            </summary>
            <remarks>
            Set this property to null to disassociate the DiagramClientView from any Diagram.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MouseHoverDelay">
            <summary>
            Gets or sets the amount to delay the raising of the shape MouseHover event. Units are in milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.Selection">
            <summary>
            Gets the selection for the DiagramClientView.  
            </summary>
            <remarks>
            Use the returned SelectedShapesCollection object to alter the DiagramClientView's selection.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.HighlightedShapes">
            <summary>
            Gets the highlighted shapes for the DiagramClientView.  
            </summary>
            <remarks>
            Use the returned SelectedShapesCollection object to alter the DiagramClientView's highlighted shapes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ZoomAtViewCenter(System.Single)">
            <summary>
            Zooms in or out around the center point of the current view.
            </summary>
            <param name="newZoomFactor">Scaling factor (A value of 1 is considered 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.SetZoomFactor(System.Single,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Boolean)">
            <summary>
            Zooms in or out around a specified point in the diagram.
            The coordinates are in world units and relative to the diagram's top-left.
            Optionally, the view center can be moved to the zoom center. 
            </summary>
            <param name="newZoomFactor">Scaling factor (A value of 1 is considered 100%)</param>
            <param name="zoomCenterPoint">Center point of zoom. This point will map to the same 
            device coordinates after changing the zoom. The coordinates are in internal
            units and are relative to the diagram's top-left.</param>
            <param name="moveZoomCenterToViewCenter">If true, the zoom center point will become
            the view center point after the zoom.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ZoomFactor">
            <summary>
            Gets the scaling factor.
            </summary>
            <remarks>
            A value of 1 is considered 100%.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ZoomIn">
            <summary>
            Increases the ZoomFactor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ZoomOut">
            <summary>
            Decreases the ZoomFactor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ZoomInAt(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Zooms in, keeping the specified point at the same device coordinates after zoom.
            </summary>
            <param name="zoomCenterPoint">Center point of zoom. This point will map to the same 
            device coordinates after changing the zoom. The coordinates are in world
            units and are relative to the diagram's top-left.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ZoomOutAt(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Zooms out, keeping the specified point at the same device coordinates after zoom.
            </summary>
            <param name="zoomCenterPoint">Center point of zoom. This point will map to the same 
            device coordinates after changing the zoom. The coordinates are in internal
            units and are relative to the diagram's top-left.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ZoomToFit">
            <summary>
            Zooms in or out to show the entire diagram as large as possible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ZoomToFit(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Zooms to show the portion of the diagram given by the specified rectangle.
            </summary>
            <param name="viewRectangle">The rectangle of the view in world units relative to Diagram's top-left.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MinimumZoom">
            <summary>
            Gets the minimum zoom allowed.
            </summary>
            <remarks>
            A value of 1 is 100%.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MaximumZoom">
            <summary>
            Gets the maximum zoom allowed.
            </summary>
            <remarks>
            A value of 1 is 100%.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MinimumZoomForAnyHandles">
            <summary>
            Gets the minimum zoom factor required to display any grab handles.
            Below this zoom level, no handles should appear.
            </summary>
            <value>The minimum zoom factor for grab handles to appear</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MinimumZoomForAllHandles">
            <summary>
            Gets the minimum zoom factor required to display all grab handles. 
            Below this zoom level, not all handles will appear.  This helps
            to reduce clutter on the design surface.
            </summary>
            <value>The minimum zoom factor for all grab handles to appear.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.GetScrollUnitLengthAt(System.Single)">
            <summary>
            Calculates the length (in world units) of a single scroll unit at the specified zoom.
            </summary>
            <param name="zoomFactor">Scaling.  1.0f is 100%</param>
            <returns>The amount to scroll in inches</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollUnitLength">
            <summary>
            Gets the length (in world units) of a single scroll unit at the current zoom.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollUnitsPerMouseWheel">
            <summary>
            Gets the number of scroll units to scroll for each mouse wheel event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollPageSize">
            <summary>
            Gets the number of scroll units to scroll for scrolling a page.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollOverlapLength">
            <summary>
            Gets the amount of the diagram (in screen inches) to overlap
            when scrolling up, down, left, or right by one page size.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MinimumVisibleDiagramSize">
            <summary>
            Gets the minimum amount of the diagram (in scroll units) 
            that should still be available when the view is scrolled all
            the way to the right and/or bottom.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UpdateScrollRangeAndPosition">
            <summary>
            Recalculates and sets the scroll ranges and scroll positions given this
            view's current size and zoom factor and the diagram's current size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.CalculateScrollRanges(System.Single,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Calculates the scroll ranges in scroll units.  (This differs from the maximum scroll positions, which are less than the scroll ranges.)
            </summary>
            <param name="zoomFactor">Scaling factor (A value of 1 is 100%)</param>
            <param name="diagramBounds">Bounds of the diagram in world units</param>
            <returns>The number of scroll units horizontally and vertically.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollHorizontally(System.Double)">
            <summary>
            Scrolls by the specified deltas in world units.
            </summary>
            <param name="worldDelta">
            Amount to scroll in world units. Negative values scroll left. Positive values scroll right.
            </param>
            <remarks>
            Negative values scroll left. Positive values scroll right.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollVertically(System.Double)">
            <summary>
            Scrolls by the specified deltas in world units.
            Negative values scroll up. Positive values scroll down.
            </summary>
            <param name="worldDelta">Amount to scroll in world units. Negative values scroll up. Positive values scroll down.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollHorizontally(System.Int32)">
            <summary>
            Scrolls horizontally by the number of scroll units specified.
            </summary>
            <param name="scrollDelta">
            Amount to scroll in scroll units. A negative value scrolls left.  A positive value scrolls right.
            </param>
            <remarks>
            A negative value scrolls left.  A positive value scrolls right.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollVertically(System.Int32)">
            <summary>
            Scrolls vertically by the number of scroll units specified.
            </summary>
            <param name="scrollDelta">
            Amount to scroll in scroll units. A negative value scrolls up.  A positive value scrolls down.
            </param>
            <remarks>
            A negative value scrolls up.  A positive value scrolls down.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MinimumHorizontalScrollPosition">
            <summary>
            Gets the minimum value for the horizontal scroll position in scroll units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MinimumVerticalScrollPosition">
            <summary>
            Gets the minimum value for the vertical scroll position in scroll units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MaximumHorizontalScrollPosition">
            <summary>
            Gets the maximum value for the horizontal scroll position in scroll units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MaximumVerticalScrollPosition">
            <summary>
            Gets the maximum value for the vertical scroll position in scroll units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.HorizontalScrollPosition">
            <summary>
            Gets or sets the horizontal scroll position in scroll units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MinimumHorizontalScrollRange">
            <summary>
            Gets the lower limit of values of the scrollable range in scroll units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MaximumHorizontalScrollRange">
            <summary>
            Gets or sets the upper limit of values of the scrollable range in scroll units.
            This is not the maximum scroll position.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.VerticalScrollPosition">
            <summary>
            Gets or sets the vertical scroll position in scroll units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MinimumVerticalScrollRange">
            <summary>
            Gets the lower limit of values of the scrollable range in scroll units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.MaximumVerticalScrollRange">
            <summary>
            Gets or sets the upper limit of values of the scrollable range in scroll units.
            This is not the maximum scroll position.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollUp">
            <summary>
            Scrolls the view up.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollDown">
            <summary>
            Scrolls the view down.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollLeft">
            <summary>
            Scrolls the view left.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollRight">
            <summary>
            Scrolls the view right.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ScrollTo(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Scrolls such that the specified point of the diagram becomes the top-left point of the view. 
            The point is in world units relative to the top-left of the diagram.
            </summary>
            <param name="point">
            The point to scroll to such that it becomes the top-left of the view. 
            The point is in world units relative to the top-left of the diagram.
            </param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.scrollEdgeTolerance">
            <summary>
            Constant for scroll delta per spec.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.BumpScroll(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Conditionally scrolls if the point given is within a certain delta of the edge of
            the visible portion of the diagram.  The scroll amount is a small userFixed delta.
            The point is in world units relative to the top-left of the diagram.
            </summary>
            <param name="position">The position to consider (likely the cursor)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnsureVisible(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement})">
            <summary>
            Ensures that the specified shapes are visible in the view.  This may require changes
            to the scroll positions and to the zoom.
            </summary>
            <param name="shapeElementCollection"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnsureVisible(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Ensures that the specified rectangle is visible in the view.  
            Based on VisiblePreference setting for the Diagram, the RectangleD will be brought into view.
            ZoomOut may be used to fit the RectangleD iff MinimalScrollWithNoZoom VisiblePreference is not selected for this Diagram.
            Scrolling may be used to fit the RectangleD and depending on the VisiblePreference setting selected for the diagram,
            either the center of the Rectangle will be brought into view center
            or minimal scrolling that is required to bring the Rectangle into view will be done.
            </summary>
            <param name="visibleRectangle">
            The rectangle to ensure is visible in the view. 
            The coordinates are in world units relative to the top-left of the diagram.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnsureVisible(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnsureVisiblePreferences)">
            <summary>
            Ensures that the specified rectangle is visible in the view.  This may require changes
            to the scroll positions and to the zoom.
            </summary>
            <param name="visibleRectangle">
            The rectangle to ensure is visible in the view. 
            The coordinates are in world units relative to the top-left of the diagram.
            </param>
            <param name="preferences">
            Preferences on how the rectangle should be made visible.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.GetMinimalScrollWithoutZoomPoint(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Gets the point to which the Top-Left of this DiagramClientView's View should be scrolled to 
            in order to bring the visibleRectangle into the ViewBounds using the MinimalScrollWithoutZoom EnsureVisiblePreference
            </summary>
            <param name="viewBounds">RectangleD that needs to be scrolled</param>
            <param name="visibleRectangle">RectangleD that needs to be visible</param>
            <returns>PointD calculated based on parameters</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.GetScrollIntoViewCenterPoint(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnsureVisiblePreferences)">
            <summary>
            Gets the point to which the Top-Left of this DiagramClientView's View should be scrolled to 
            in order to bring the visibleRectangle into the ViewBounds using the ScrollIntoViewCenter EnsureVisiblePreference
            </summary>
            <param name="viewBounds">RectangleD that needs to be scrolled</param>
            <param name="visibleRectangle">RectangleD that needs to be visible</param>
            <param name="preferences">Preferences for EnsureVisible</param>
            <returns>PointD calculated based on parameters</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.CalculateBoundingBox(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement},System.Boolean)">
            <summary>
            Returns the overall bounding box surrounding the ShapeElements in the specified
            collection of ShapeElements. The bounding box is in world units relative to the top-left of the diagram.
            </summary>
            <param name="shapeElementCollection">The collection of ShapeElements for which to find the overall bounding box.</param>
            <param name="useEnsureVisibleBounds">true if the ShapeElement.AbsoluteBoundingBoxToEnsureVisible should be used. Otherwise, the ShapeElement.AbsoluteBoundingBox will be used.</param>
            <returns>The overall bounding box in world units relative to the top-left of the diagram.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.CalculateBoundingBox(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement},System.Boolean,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement@,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement@,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement@,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement@)">
            <summary>
            Returns the overall bounding box surrounding the ShapeElements in the specified
            collection of ShapeElements. The bounding box is in world units relative to the top-left of the diagram.
            </summary>
            <param name="shapeElementCollection">The collection of ShapeElements for which to find the overall bounding box.</param>
            <param name="useEnsureVisibleBounds">true if the ShapeElement.AbsoluteBoundingBoxToEnsureVisible should be used. Otherwise, the ShapeElement.AbsoluteBoundingBox will be used.</param>
            <param name="topMostShape">returns the top most shape of the collection passed in</param>
            <param name="bottomMostShape">returns the bottom most shape of the collection passed in</param>
            <param name="leftMostShape">returns the left most shape of the collection passed in</param>
            <param name="rightMostShape">returns the right most shape of the collection passed in</param>
            <returns>The overall bounding box in world units relative to the top-left of the diagram.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.RepositionSelection(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Moves the selection up.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.GetNudgeHorizontalDelta(System.Double)">
            <summary>
            The horizontal amount (in world units) by which a nudge operation can move a shape.
            </summary>
            <param name="screenHorizontalDelta">
            The horizontal amount in screen inches by which to nudge.  
            The screen inches are unaffected by zoom or DPI.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.GetNudgeVerticalDelta(System.Double)">
            <summary>
            The vertical amount (in world units) by which a nudge operation can move a shape.
            </summary>
            <param name="screenVerticalDelta">
            The vertical amount in screen inches by which to nudge.  
            The screen inches are unaffected by zoom or DPI.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.Nudge(Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Repositions the selected shapes by the specified delta in world units.
            </summary>
            <param name="nudgeDelta">The amount in world units by which to reposition the selected shapes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.NudgeUp">
            <summary>
            Moves the selection up.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.NudgeDown">
            <summary>
            Moves the selection down.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.NudgeLeft">
            <summary>
            Moves the selection left.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.NudgeRight">
            <summary>
            Moves the selection right.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ManuallyRouteSelection(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            ManuallyRoute the line segment of the primary LinkShape in the selection.
            </summary>
            <param name="linkShape">LinkShape that we're operating on.</param>
            <param name="segment">LineSegment to manipulate.</param>
            <param name="resizeDelta">The amount to manually route a line segment.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.HandleAnchorPointNudge(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Handles the nudging of a line segment.
            </summary>
            <param name="nudgeDelta">amount to nudge the AnchorPoint</param>
            <returns>true means the nudge was handled for the AnchorPoint; 
            false means it was not handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.HandleLineSegmentNudge(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Handles the nudging of a line segment.
            </summary>
            <param name="nudgeDelta">amount to nudge the line segment</param>
            <returns>true means the nudge was handled for the LineSegment; 
            false means it was not handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.CalculateManualRoute(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculates the manual route based on the segment and the change in distance required.
            </summary>
            <param name="linkShape">LinkShape for the segment.</param>
            <param name="segment">LineSegment that we're working on.</param>
            <param name="routeDelta">Change in distance required.</param>
            <returns>An array of PointD values with the new line points.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.AddManualRoutePoints(System.Collections.ArrayList,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Adds the manual route points in a bridge form to the points for this line.
            </summary>
            <param name="newPoints">ArrayList with existing points for the new line.</param>
            <param name="segment">segment we're currently operating on.</param>
            <param name="startX">the StartPoint x value.</param>
            <param name="startY">the StartPoint y value.</param>
            <param name="endX">the EndPoint x value.</param>
            <param name="endY">the EndPoint y value.</param>
            <param name="routeDelta">the change in the line.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.CalculateStartEndValues(Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,System.Double,System.Boolean,System.Double@,System.Double@)">
            <summary>
            Calculates the new start and end of the segment it changes if its a start or end
            segment.  This method determines where any new break will occur if needed.
            </summary>
            <param name="segment">segment we're currently operating on.</param>
            <param name="breakValue">the about to break the line segment by.</param>
            <param name="startLeftOrTopEnd">is the StartPoint of the segment to the left (for 
             horizontal lines) or top (for vertical lines) of the EndPoint.</param>
            <param name="start">start value of the line segment.</param>
            <param name="end">end value of the line segment.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.FindSegment(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Finds the segment at the specified mouse point.
            </summary>
            <param name="linkShape">LinkShape to look for the segment in.</param>
            <param name="mousePt">Current mouse position.</param>
            <returns>LineSegment that the mouse is currently over.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.CalculateUpdateRectangle(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculates the rectangle that needs to be updated for the new line change.
            </summary>
            <param name="shape">LinkShape that we're working on.</param>
            <param name="segment">LineSegment that we're working on.</param>
            <param name="relDistance">relative distance of the move.</param>
            <returns>RectangleD with the update rectangle for the distance moved.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ResizeSelection(Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Resizes the shapes in the selection
            </summary>
            <param name="sideToResize">The side of the shape to resize.</param>
            <param name="resizeDelta">The amount to resize each shape by in world units.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.CalculateResizeRectangle(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Returns the bounds of the resize rectangle in world units relative to 
            the top-left of the shape's parent.
            </summary>	
            <param name="shape">The shape being resized.</param>
            <param name="sideToResize">The side of the shape to resize.</param>
            <param name="resizeDelta">The amount to resize each shape by in world units.</param>
            <returns>
            The bounds of the resize rectangle in world units relative to 
            the top-left of the shape's parent.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ResizeDeltaX">
            <summary>
            The amount that a shape can be resized by in the
            horizontal direction.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ResizeDeltaY">
            <summary>
            The amount that a shape can be resized by in the
            vertical direction.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ResizeUp">
            <summary>
            Resizes the selected shapes by decreasing its height.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ResizeDown">
            <summary>
            Resizes the selected shapes by increasing its height.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ResizeLeft">
            <summary>
            Resizes the selected shapes by decreasing its width.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ResizeRight">
            <summary>
            Resizes the selected shapes by increasing its width.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DpiX">
            <summary>
            Display resolution X in dots per inch.  MAY BE STALE if display resolution
            has changed since last call to UpdateRatios (via W2D/D2W calls).
            It is likely not to have changed and good enough for most purposes (creation
            was for bump-scrolling) as it avoids creating another graphics as
            does GetWorldUnitsPerDeviceUnits.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DpiY">
            <summary>
            Display resolution X in dots per inch.  MAY BE STALE if display resolution
            has changed since last call.  Likely not and good enough for most purposes
            as it avoids creating another graphics.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ViewLocation">
            <summary>
            Gets the top-left corner of the viewport relative 
            to the top-left of the Diagram in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ViewSize">
            <summary>
            Gets the size of the viewport in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ViewBounds">
            <summary>
            Gets the bounds of the viewport in world units 
            relative to the top-left of the Diagram.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UpdateTolerance">
            <summary>
            Updates the cached tolerance level for hit testing nodes.  This is called whenever the ZoomLevel changes, 
            that this can be recalculated to a new valid value.  We need to only recalculate the tolerance when the
            zoom changes rather than doing it every time for performance issues.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DeviceToWorld(System.Drawing.Point)">
            <summary>
            Converts a point in device units to world units using the view's current zoom factor.
            The device units are relative to the DiagramClientView's top-left.
            The world units are relative to the diagram's top-left.
            </summary>
            <param name="devicePoint">The point in device units relative to the DiagramClientView's top-left.</param>
            <returns>The point in world units relative to the diagram's top-left.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DeviceToWorld(System.Drawing.Size)">
            <summary>
            Converts a size in device units to world units using the view's current zoom factor.
            </summary>
            <param name="deviceSize">The size in device units.</param>
            <returns>The size in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DeviceToWorld(System.Drawing.Size,System.Single)">
            <summary>
            Converts a size in device units to world units using the specified zoom factor.
            </summary>
            <param name="deviceSize">Size in device units.</param>
            <param name="zoomFactor">The scaling factor.  1.0f is 100%.</param>
            <returns>Size in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DeviceToWorld(System.Drawing.Rectangle)">
            <summary>
            Converts a rectangle in device units to world units using the view's current zoom factor.
            The device units are relative to the DiagramClientView's top-left.
            The world units are relative to the diagram's top-left.
            </summary>
            <param name="deviceRectangle">The rectangle in device units relative to the DiagramClientView's top-left.</param>
            <returns>The rectangle in world units relative to the diagram's top-left.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DeviceToWorld(System.Drawing.Graphics,System.Drawing.Size)">
            <summary>
            Converts a size in device units to world units 
            using the specified Graphics object.
            </summary>
            <param name="g">
            The Graphics object to use. 
            The Graphics object's PageUnit and PageScale are assumed 
            to have been already set.
            </param>
            <param name="deviceSize">Size in device units.</param>
            <returns>Size in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.DeviceToWorld(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Converts a rectangle in device units to world units 
            using the specified Graphics object.
            The device units are relative to the DiagramClientView's top-left.
            The world units are relative to the diagram's top-left.
            </summary>
            <param name="g">
            The Graphics object to use.
            The Graphics object's PageUnit and PageScale are assumed 
            to have been already set, and the Graphics object is
            assumed to have already been translated.
            </param>
            <param name="deviceRectangle">
            The rectangle in device units.
            </param>
            <returns>The rectangle in world units relative to the diagram's top-left.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.WorldToDevice(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Converts a point in world units to device units using the view's current zoom factor.
            The point returned is relative to the DiagramClientView's top-left.
            </summary>
            <param name="worldPoint">The point in world units relative to the diagram's top-left.</param>
            <returns>The point in device units relative to the DiagramClientView's top-left.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.WorldToDevice(Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Converts a size in world units to device units using the view's current zoom factor.
            </summary>
            <param name="worldSize">The size in world units.</param>
            <returns>The size in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.WorldToDevice(Microsoft.VisualStudio.Modeling.Diagrams.SizeD,System.Single)">
            <summary>
            Converts a size in world units to device units using the specified zoom factor.
            </summary>
            <param name="worldSize">The size in world units.</param>
            <param name="zoomFactor">The scaling factor. 1.0f is 100%.</param>
            <returns>The size in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.WorldToDevice(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Converts a rectangle in world units to device units using the view's current zoom factor.
            The rectangle returned is relative to the DiagramClientView's top-left.
            </summary>
            <param name="worldRectangle">The rectangle in world units relative to the diagram's top-left.</param>
            <returns>The rectangle in device units relative to the DiagramClientView's top-left.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.CoordinateConverter">
            <summary>
            Gets an object which can be used to convert between device and world coordinates.
            </summary>
            <value>The object which converts between device and world coordinates.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter">
            <summary>
            Provides methods which convert world units to device units and
            device units to world units for a particular DiagramClientView
            and at a particular zoom level.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.DpiX">
            <summary>
            Display resolution X in dots per inch.  MAY BE STALE if display resolution
            has changed since last call.  Likely not and good enough for most purposes
            as it avoids creating another graphics object.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.DpiY">
            <summary>
            Display resolution Y in dots per inch.  MAY BE STALE if display resolution
            has changed since last call.  Likely not and good enough for most purposes
            as it avoids creating another graphics object.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.WorldToDevice(Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Single)">
            <summary>
            Converts a point in world units to device units using the specified zoom factor.
            The point returned is relative to the DiagramClientView's top-left.
            </summary>
            <param name="worldPoint">The point in world units relative to the diagram's top-left.</param>
            <param name="zoomFactor">The scaling factor. 1.0f is 100%.</param>
            <returns>The point in device units relative to the DiagramClientView's top-left.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.WorldToDevice(Microsoft.VisualStudio.Modeling.Diagrams.SizeD,System.Single)">
            <summary>
            Converts a size in world units to device units using the specified zoom factor.
            </summary>
            <param name="worldSize">The size in world units.</param>
            <param name="zoomFactor">The scaling factor. 1.0f is 100%.</param>
            <returns>The size in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.WorldToDevice(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,System.Single)">
            <summary>
            Converts a rectangle in world units to device units using the specified zoom factor.
            The rectangle returned is relative to the DiagramClientView's top-left.
            </summary>
            <param name="worldRectangle">The rectangle in world units relative to the diagram's top-left.</param>
            <param name="zoomFactor">The scaling factor. 1.0f is 100%.</param>
            <returns>The rectangle in device units relative to the DiagramClientView's top-left.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.DeviceToWorld(System.Drawing.Point,System.Single)">
            <summary>
            Converts a point in device units to world units using the specified zoom factor.
            The device units are relative to the DiagramClientView's top-left.
            The world units are relative to the diagram's top-left.
            </summary>
            <param name="devicePoint">The point in device units relative to the DiagramClientView's top-left.</param>
            <param name="zoomFactor">The scaling factor. 1.0f is 100%.</param>
            <returns>The point in world units relative to the diagram's top-left.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.DeviceToWorld(System.Drawing.Size,System.Single)">
            <summary>
            Converts a size in device units to world units using the specified zoom factor.
            </summary>
            <param name="deviceSize">Size in device units.</param>
            <param name="zoomFactor">The scaling factor.  1.0f is 100%.</param>
            <returns>Size in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.DeviceToWorld(System.Drawing.Rectangle,System.Single)">
            <summary>
            Converts a rectangle in device units to world units using the specified zoom factor.
            The device units are relative to the DiagramClientView's top-left.
            The world units are relative to the diagram's top-left.
            </summary>
            <param name="deviceRectangle">The rectangle in device units relative to the DiagramClientView's top-left.</param>
            <param name="zoomFactor">The scaling factor. 1.0f is 100%.</param>
            <returns>The rectangle in world units relative to the diagram's top-left.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.DeviceToWorld(System.Drawing.Graphics,System.Drawing.Size)">
            <summary>
            Converts a size in device units to world units 
            using the specified Graphics object.
            </summary>
            <param name="g">
            The Graphics object to use. 
            The Graphics object's PageUnit and PageScale are assumed 
            to have been already set.
            </param>
            <param name="deviceSize">Size in device units.</param>
            <returns>Size in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.DeviceToWorld(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Converts a rectangle in device units to world units 
            using the specified Graphics object.
            The Graphics object's PageUnit and PageScale are assumed 
            to have been already set, and the Graphics object is
            assumed to have already been translated.
            </summary>
            <param name="g">
            The Graphics object to use.
            The Graphics object's PageUnit and PageScale are assumed 
            to have been already set, and the Graphics object is
            assumed to have already been translated.
            </param>
            <param name="deviceRectangle">
            The rectangle in device units.
            </param>
            <returns>The rectangle in world units relative to the diagram's top-left.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.GetWorldUnitsPerDeviceUnits(System.Single)">
            <summary>
            Gets the ratio of world units to device units using the specified zoom factor.
            </summary>
            <param name="zoomFactor">The scaling factor.</param>
            <returns>The ratio of world units to device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.GetDeviceUnitsPerWorldUnits(System.Single)">
            <summary>
            Gets the ratio of device units to world units using the specified zoom factor.
            </summary>
            <param name="zoomFactor">The scaling factor.</param>
            <returns>The ratio of device units to world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.UpdateRatios(System.Single)">
            <summary>
            Updates the saved world-units-to-device-units ratio for the specified zoom factor.
            </summary>
            <param name="zoomFactor">The scaling factor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UnitsConverter.ComputeWorldUnitsPerDeviceUnits(System.Drawing.Graphics)">
            <summary>
            Computes world-units/device-units given a Graphics object.
            (PageUnit and PageScale are assumed to have been set properly.)
            </summary>
            <param name="g">The Graphics object.</param>
            <returns>World units per device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnElementEventsEnding(Microsoft.VisualStudio.Modeling.ElementEventsEndedEventArgs)">
            <summary>
            Called when element events are ending.
            </summary>
            <param name="e">An ElementEventsEndedEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.OnElementEventsEnded(Microsoft.VisualStudio.Modeling.ElementEventsEndedEventArgs)">
            <summary>
            Called when element events have ended.
            </summary>
            <param name="e">An ElementEventsEndedEventArgs that contains event data.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.TooltipMode">
            <summary>
            Mode/status of current tooltip behavior.
            In all modes if mouse leaves design surface, we loose focus or mouse action is
            started there is a transition to Search state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.TooltipMode.Search">
            <summary>
            There is no tooltip shown and no element having tooltip currently behind
            the mouse cursor. In this mode we transition to Pending mode if mouse
            moves over an element with a tooltip.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.TooltipMode.Pending">
            <summary>
            There is an element behind the mouse cursor having tooltip. The timer has
            been started and we're waiting for it to show the tooltip. In this mode we
            start timer and show tooltip if timer expires until the mode is reset (then
            transition to Visible state).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.TooltipMode.Visible">
            <summary>
            Tooltip is shown to the user. Tooltip timer is stopped.
            If current tooltip owner is clicked (MouseDown), we transition to Suppress state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.TooltipMode.VisibleAtOwner">
            <summary>
            This mode is used when tooltip is shown via keyboard. In this case
            SetTooltipMode will ignore mouse position and used focused element instead.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.TooltipMode.Suppress">
            <summary>
            This mode is used when tooltip has already been show on the current
            diagram element, but then user clicked a mouse to supress the tooltip.
            In this situation we shouldn't show tooltip again on the same element
            after it was hidden. In this state we go to Search state if
            mouse hovers over a different tooltip owner.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.HideTooltip">
            <summary>
            Hides any tooltip currently visible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.SetTooltipMode(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.TooltipMode,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.MouseAction,System.Boolean)">
            <summary>
            Switches from one tooltip mode to another performing required operations
            on local variables, tooltip itself and the timer.
            </summary>
            <param name="newMode">New mode (required).</param>
            <param name="newOwner">New tooltip owner (required for Pending and Visible modes. ignored for others).</param>
            <param name="newMouseAction">New mouse action which has a tooltip.</param>
            <param name="isDragOver">Indicates whether pending tooltip is for drag-over operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ChangeTooltip(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean)">
            <summary>
            This method decides when and how to switch between tooltip modes when mouse moves.
            </summary>
            <remarks>
            One of the goals in method implementation is to keep perf implications on mouse move as small
            as possible - for example we don't get tooltip text until it's really needed etc.
            </remarks>
            <param name="newTooltipOwner">Diagram element behind mouse pointer.</param>
            <param name="isDragOver">Whether it is a drag-over event or not.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ShowTooltip(System.String,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Shows tooltip on the design surface.
            </summary>
            <param name="text">Tooltip text.</param>
            <param name="point">Preferred location (tooltip will be adjusted to this location
            with its top-left corner if possible, otherwise it will be adjusted to the same
            point but from different direction if it doesn't fit into screen).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ShowTooltip(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Windows.Forms.ToolTip,System.String,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Shows tooltip on the design surface.
            </summary>
            <param name="text">Tooltip text.</param>
            <param name="point">Preferred location (tooltip will be adjusted to this location
            with its top-left corner if possible, otherwise it will be adjusted to the same
            point but from different direction if it doesn't fit into screen).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ShowToolTip">
            <summary>
            Shows the tooltip of the currently focused item, if any.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.ShowError(System.String)">
            <summary>
            Displays the specified error message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.UIService">
            <summary>
            Gets the IUIService.  The store will be queried first,
            followed by this view.
            </summary>
            <value>The IUIService.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetFeedback">
            <summary>
            Provides the means of drawing drag feedback using ghost shapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetFeedback.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the DropTargetFeedback class.
            </summary>
            <param name="activeView">
            The currently active DiagramClientView.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetFeedback.HasActiveFeedback">
            <summary>
            Gets a value indicating whether this object has drag feedback to draw.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetFeedback.BoundingBox">
            <summary>
            Gets or sets the current bounding box encompassing the drag feedback.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetFeedback.UpdateFeedback(Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection)">
            <summary>
            Sets drag feedback information
            </summary>
            <param name="ghostShapes">The ghost shapes which provide current information for the drag feedback.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetFeedback.Draw(System.Drawing.Graphics,Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Draws the drag feedback.
            </summary>
            <param name="graphics">The graphics object.</param>
            <param name="diagram">The Diagram from which to retrieve the style set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetFeedback.Erase">
            <summary>
            Erases the current feedback.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceAccessibleObject">
            <summary>
            The accessible object for the DiagramClientView
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceAccessibleObject.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the DesignSurfaceAccessibleObject class.
            </summary>
            <param name="diagramClientView">The DiagramClientView that this object will represent.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceAccessibleObject.Name">
            <summary>
            Gets the object name.  (The setter does nothing.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceAccessibleObject.Role">
            <summary>
            Gets the role of this accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceAccessibleObject.Bounds">
            <summary>
            Gets the location and size of this accessible object in screen coordinates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to this accessible object.
            </summary>
            <returns>The number of children belonging to this accessible object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="navdir">Value for navigating among accessible objects.</param>
            <returns>The destination accessible object.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSpy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSpy.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSpy.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="methodName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSpy.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSpy.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSpy.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSpy.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSpy.ShowBraces">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DrawHelper">
            <summary>
            Helper class to call Graphics.DrawXxx methods wrapped in a try/catch.
            The Catch clause will ignore any Out-of-memory exceptions thrown by the draw method.
            This has been happening typically with dashed pens. 
            It still fails in some cases even with the workaround - setting DashCap to Flat.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DrawHelper.#ctor">
            <summary>
            Private constructor to prevent instantiating this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DrawHelper.SafeDrawLine(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calls Graphics.DrawLine and ignores OutOfMemoryExceptions for dashed pens.
            </summary>
            <param name="g"></param>
            <param name="pen"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DrawHelper.SafeDrawLines(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Calls Graphics.DrawLines and ignores OutOfMemoryExceptions for dashed pens.
            </summary>
            <param name="g"></param>
            <param name="pen"></param>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DrawHelper.SafeDrawPath(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Calls Graphics.DrawPath and ignores OutOfMemoryExceptions for dashed pens.
            </summary>
            <param name="g"></param>
            <param name="pen"></param>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DrawHelper.SafeDrawRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calls Graphics.DrawRectangle and ignores OutOfMemoryExceptions for dashed pens.
            </summary>
            <param name="g"></param>
            <param name="pen"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragDropInfoCache.Clear">
            <summary>
            Clears the cache in preparation for use by another Drag/Drop operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragDropInfoCache.CacheDragOverResult(System.Windows.Forms.DragDropEffects,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Caches the DragDropEffect for: 
            (1) the source ElementGroupPrototype referenced by this cache, 
            (2) the specified target diagram item, and
            (3) the key states provided via the DiagramDragEventArgs.
            </summary>
            <param name="effect">The resultant effect to cache.</param>
            <param name="item">The target item for which the resultant effect was computed.</param>
            <param name="e">The DiagramDragEventArgs that provides the key state that was used when computing the drop effect.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragDropInfoCache.GetCachedDragOverResult(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Returns the cached DragDropEffect for:
            (1) the source ElementGroupPrototype referenced by this cache, 
            (2) the specified target diagram item, and
            (3) the key states provided via the DiagramDragEventArgs.
            </summary>
            <param name="item">The target item for which the resultant effect was computed.</param>
            <param name="e">The DiagramDragEventArgs that provides the key state that was used when computing the drop effect.</param>
            <returns>The cached DragDropEffect.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragDropInfoCache.HasCachedDragOverResult(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs)">
            <summary>
            Returns a value indicating whether the cache contains the DragOver effect for
            (1) the source ElementGroupPrototype referenced by this cache, 
            (2) the specified target diagram item, and
            (3) the key states provided via the DiagramDragEventArgs.
            </summary>
            <param name="item">The target item for which the resultant effect was computed.</param>
            <param name="e">The DiagramDragEventArgs that provides the key state that was used when computing the drop effect.</param>
            <returns>true if the cache contains the DragOver effect.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DragDropInfoCache.ElementGroupPrototype">
            <summary>
            Gets or sets the source ElementGroupPrototype for the Drag/Drop operation.
            </summary>
            <value>The source ElementGroupPrototype for the Drag/Drop operation.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations">
            <summary>
            Extends the IMS ElementOperations class by adding support for GhostShapeCollections.
            </summary>
            <remarks>
            Derive from this class to create custom data formats 
            for copy and paste operations.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.TargetDiagramIdContextKey">
            <summary>
            Key of the element Id of the diagram in the TargetConext of merged ElementGroupPrototypes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            Initializes a new instance of the DesignSurfaceElementOperations class.
            Note that since no Diagram is specified, multiple diagrams will not be supported
            and any merged PELs will end up in the default diagram (the first created diagram
            viewing the model)
            </summary>
            <param name="serviceProvider">Service provider</param>
            <param name="modelPartition">The partition for model elements</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Initializes a new instance of the DesignSurfaceElementOperations class for a specific diagram
            The model partition is assumed to be that of the model element the diagram is viewing.
            </summary>
            <param name="serviceProvider">Service provider</param>
            <param name="diagram">The host diagram</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Initializes a new instance of the DesignSurfaceElementOperations class.
            </summary>
            <param name="serviceProvider">Service provider</param>
            <param name="modelPartition">The partition for model elements</param>
            <param name="diagram">The host diagram</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.Diagram">
            <summary>
            The diagram owning this DesignSurfaceElementOperations (i.e. the diagram to which the operations are expected to apply)
            </summary>
            <remarks>Can be null if not specified at time of instantiation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.OnMerged(Microsoft.VisualStudio.Modeling.MergeElementGroupEventArgs)">
             <summary>
             Called by MergeElementGroupPrototype immediately before the local transaction
             is committed.  The rules are queued during the local transaction and fired
             when the transaction commits.  The local transaction wraps reconstituting and
             connecting elements.
            
             This method raises the custom model event ShapeElementViewFixupEvent for every
             root protoElement PEL that doesn't have a corresponding protoElement MEL.
             The rule processing of this event connects the PEL to the diagram if it isn't
             already.
             </summary>
             <param name="e">A MergeElementGroupEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.ChooseMergeTarget(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Gets the target element for the merge, given the proposed targetElement.
            This gives the ElementOperations the chance to change the 
            intended target for the merge.  By default, this method will
            give the target element the chance to change the intended target.
            </summary>
            <param name="proposedTargetElement">The proposed target element for the merge.</param>
            <param name="elementGroupPrototype">The ElementGroupPrototype that will be reconstituted in the target's store during the merge.</param>
            <returns>The target element for the merge.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.ChooseMergeTarget(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            Gets the target element for the merge, given the proposed targetElement.
            This gives the ElementOperations the chance to change the 
            intended target for the merge.  By default, this method will
            give the target element the chance to change the intended target.
            </summary>
            <param name="proposedTargetElement">The proposed target element for the merge.</param>
            <param name="elementGroup">The ElementGroup that will be conncted into the target during the merge.</param>
            <returns>The target element for the merge.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.Merge(Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,System.Windows.Forms.IDataObject,System.Drawing.PointF)">
            <summary>
            Merges (i.e., pastes or drops) the ElementGroupPrototype from the IDataObject
            to the target ModelElement.
            </summary>
            <param name="targetElement">The ModelElement that is the target for the ElementGroupPrototype.</param>
            <param name="data">The IDataObject potentially containing the ElementGroupPrototype.</param>
            <param name= "mergePosition">location to which the the element should be merged</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.MergeElementGroupPrototype(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroupPrototype,System.Drawing.PointF)">
            <summary>
            Merges the source ElementGroupPrototype with the specified target ModelElement.
            </summary>
            <param name="targetElement">The target element which will serve as the parent of the reconstituted elements.</param>
            <param name="elementGroupPrototype">The source ElementGroupPrototype.</param>
            <param name="mergePosition">The merge position in absolute world coordinates.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.AddGhostShapesContext(System.Windows.Forms.IDataObject,Microsoft.VisualStudio.Modeling.Diagrams.Diagram,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Adds a GhostShapeCollection to the ElementGroupPrototype in the specified IDataObject.
            </summary>
            <param name="data">The IDataObject that contains an ElementGroupPrototype to update.</param>
            <param name="diagram">The source diagram.</param>
            <param name="initialDragLocation">The initial location of the mouse in absolute world coordinates.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.GetAssociatedModelElement(Microsoft.VisualStudio.Modeling.ElementGroupPrototype,Microsoft.VisualStudio.Modeling.ProtoElementBase)">
            <summary>
            Gets the ProtoElement associated with the specified
            protoPresentationElement via the PresentationViewsSubject
            relationship.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype that contains the protoPresentationElement.</param>
            <param name="protoPresentationElement">The ProtoElement corresponding to the PresentationElement.</param>
            <returns>The ProtoElement associated with the specified protoPresentationElement.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.GetTargetDiagramId(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Get the Id of the Diagram targetted by an ElementGroupPrototype Merge/CanMerge originating from an
            instance of this class.
            </summary>
            <param name="elementGroupPrototype"></param>
            <returns>The id of the target Diagram, or Guid.Empty if none is set in the EGP's target context.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceElementOperations.SetTargetDiagramId(Microsoft.VisualStudio.Modeling.ElementGroupPrototype,Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Record the Id of the target diagram into the EGPs target context so that this is available
            during merge operations to be able to identify the correct diagram partition (for example)
            </summary>
            <param name="elementGroupPrototype"></param>
            <param name="diagram"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext">
            <summary>
            Provides merge (i.e., drop/paste) information which is 
            initially set by the merge process when the ElementGroupPrototype's
            objects are reconstituted into the target store.
            The merge information is subsequently used
            throughout the merge process and the fixup phase.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.PreMergeKey">
            <summary>
            When this key is present in an ElementGroup's context, the merge process will
            call PreMergeSelf() on every root element in the ElementGroup at the beginning of merge.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.GetMergeRootElements(Microsoft.VisualStudio.Modeling.ElementGroup,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Called by the Merge process to retrieve the root MELs and PELs.
            </summary>
            <param name="elementGroup">The element group used during the Merge process.</param>
            <param name="rootMels">The object which will receive the collection of root MELs.</param>
            <param name="rootPels">The object which will receive the collection of root PELs.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.TargetElement">
            <summary>
            Gets the target element of the merge operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.ElementGroup">
            <summary>
            Gets the ElementGroup that was reconstituted into the target store.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.RootModelElements">
            <summary>
            Gets the collection of ModelElements (non-PresentationElements) 
            that serve as the root elements in the reconstituted ElementGroup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.RootPresentationElements">
            <summary>
            Gets the collection of PresentationElements 
            that serve as the root elements in the reconstituted ElementGroup.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.Set(Microsoft.VisualStudio.Modeling.Transaction,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            Adds the DesignSurfaceMergeContext information to the specified transaction.
            </summary>
            <param name="transaction">The transaction where the DesignSurfaceMergeContext will be saved to.</param>
            <param name="targetElement">The target ModelElement of the merge operation.</param>
            <param name="elementGroup">The ElementGroup that was reconstituted into the target store.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.HasContext(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Returns true if the transaction contains DesignSurfaceMergeContext info, otherwise false.
            </summary>
            <param name="transaction">The transaction to check to see if it contains DesignSurfaceMergeContext info.</param>
            <returns>True if the transaction contains DesignSurfaceMergeContext info, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.GetTargetElement(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Returns the target ModelElement of the merge operation.
            </summary>
            <param name="transaction">The transaction containing the saved DesignSurfaceMergeContext. This is typically the top-level transaction.</param>
            <returns>The target ModelElement of the merge operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.GetElementGroup(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Returns the ElementGroup that was reconstituted into the target store.
            </summary>
            <param name="transaction">The transaction containing the saved DesignSurfaceMergeContext. This is typically the top-level transaction.</param>
            <returns>The ElementGroup that was reconstituted into the target store.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.GetRootModelElements(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Returns the collection of ModelElements (non-PresentationElements) 
            that serve as the root elements in the reconstituted ElementGroup.
            </summary>
            <param name="transaction">
            The transaction containing the saved DesignSurfaceMergeContext. 
            This is typically the top-level transaction.
            </param>
            <returns>
            The collection of ModelElements (non-PresentationElements) 
            that serve as the root elements in the reconstituted ElementGroup.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.GetRootPresentationElements(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Returns the collection of PresentationElements 
            that serve as the root elements in the reconstituted ElementGroup.
            </summary>
            <param name="transaction">
            The transaction containing the saved DesignSurfaceMergeContext. 
            This is typically the top-level transaction.
            </param>
            <returns>
            The collection of PresentationElements that serve as the root elements in 
            the reconstituted ElementGroup.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceMergeContext.AddRootModelElement(Microsoft.VisualStudio.Modeling.Transaction,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Adds the modelElement to the transaction's DesignSurfaceMergeContext's RootMel collection.
            </summary>
            <param name="transaction">
            The transaction containing the saved DesignSurfaceMergeContext. 
            This is typically the top-level transaction.
            </param>
            <param name="modelElement">The model element to add to the RootMel collection.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ActiveDiagramViewRequiredText">
            <summary>
              Looks up a localized string similar to ActiveDiagramView is required..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.AddSwimlane">
            <summary>
              Looks up a localized string similar to Add {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.AreaFieldAccessibleDescription">
            <summary>
              Looks up a localized string similar to An area within a shape..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.AreaFieldAccessibleName">
            <summary>
              Looks up a localized string similar to Area.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.AttempToDisassociateNullDesignSurfaceText">
            <summary>
              Looks up a localized string similar to Attempting to disassociate this diagram from a null design surface..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.AttemptToAssociateDiagramWithNullDesignSurfaceText">
            <summary>
              Looks up a localized string similar to Attempting to associate this diagram with a null design surface..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.BlankCommentAccessibleName">
            <summary>
              Looks up a localized string similar to Comment: blank.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.CannotModifyReadOnlyCollection">
            <summary>
              Looks up a localized string similar to Cannot modify read only collection..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ChevronButtonFieldAccessibleDescription">
            <summary>
              Looks up a localized string similar to An expand/collapse button within a shape..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ChevronButtonFieldAccessibleName">
            <summary>
              Looks up a localized string similar to Collapse button.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ChevronButtonFieldExpandAccessibleName">
            <summary>
              Looks up a localized string similar to Expand button.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.CommentLabelFieldAccessibleDescription">
            <summary>
              Looks up a localized string similar to Comment shape text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.CommentShapeAccessibleDescription">
            <summary>
              Looks up a localized string similar to Comment shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.CommentShapeAccessibleNameFormat">
            <summary>
              Looks up a localized string similar to Comment: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.CommentShapeToolboxCaption">
            <summary>
              Looks up a localized string similar to Comment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.CommentText_Description">
            <summary>
              Looks up a localized string similar to The text of the comment..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ConnectionTypeOrSourceShapeElementOrTargetShapeElementText">
            <summary>
              Looks up a localized string similar to ConnectionType or SourceShapeElement or TargetShapeElement is null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.CreateConnection">
            <summary>
              Looks up a localized string similar to Add Connection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.CyclicalAnchorExceptionText">
            <summary>
              Looks up a localized string similar to A cyclic anchor is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DecoratorHostShapeAccessibleName">
            <summary>
              Looks up a localized string similar to Decorator for shape {0} hosting Field with value {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DecoratorHostShapeEmptyFieldValue">
            <summary>
              Looks up a localized string similar to empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DefaultWatermarkText">
            <summary>
              Looks up a localized string similar to Drag from the toolbox to add objects to the diagram..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DeleteItems">
            <summary>
              Looks up a localized string similar to Delete {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.Diagram_Name_Description">
            <summary>
              Looks up a localized string similar to The diagram name..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DiagramClientViewAccessibleName">
            <summary>
              Looks up a localized string similar to Modeling Design Surface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DiagramClientViewIsRequiredText">
            <summary>
              Looks up a localized string similar to DiagramClientView is required..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DiagramClientViewRequiredText">
            <summary>
              Looks up a localized string similar to DiagramClientView is required..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DiagramNameWithWatermarkText">
            <summary>
              Looks up a localized string similar to {0}. {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DiagramRequiredText">
            <summary>
              Looks up a localized string similar to Diagram is required..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DiagramViewAccessibleName">
            <summary>
              Looks up a localized string similar to IMS DiagramView AccessibleObject.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DiagramViewMissing">
            <summary>
              Looks up a localized string similar to The Diagram must be associated with a DiagramView..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DragDropOperationFailed">
             <summary>
               Looks up a localized string similar to Drag drop operation failed with the following error:
            	{0}
            
            A common cause of this exception is an out of date Visual Studio toolbox cache with respect to changes 
            in your domain model. Run &quot;devenv /setup&quot; from the command line to reset this cache..
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.DropItems">
            <summary>
              Looks up a localized string similar to Drop {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ElementRoleChangedNotImplementedText">
            <summary>
              Looks up a localized string similar to Element role changed not implemented..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ExpandCollapseCompartment">
            <summary>
              Looks up a localized string similar to Expand/collapse compartment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.FailedParseTextFormatHueSaturationLuminosityText">
            <summary>
              Looks up a localized string similar to Failed to parse text. Expected text in the format: Hue, Saturation, Luminosity..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.FailedParseTextFormatXYWidthHeightText">
            <summary>
              Looks up a localized string similar to Failed to parse text. Expected text in the format: x, y, width, height..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.FromAnchorPointAccessibleDescription">
            <summary>
              Looks up a localized string similar to The beginning anchor point of the line..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.FromAnchorPointAccessibleName">
            <summary>
              Looks up a localized string similar to Start anchor point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.GenericItem">
            <summary>
              Looks up a localized string similar to Item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.GenericItems">
            <summary>
              Looks up a localized string similar to Items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.GridCategory">
            <summary>
              Looks up a localized string similar to Grid.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ImageFieldAccessibleDescription">
            <summary>
              Looks up a localized string similar to An image within a shape..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ImageFieldAccessibleName">
            <summary>
              Looks up a localized string similar to Image.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.InvalidAssociatedProperty">
            <summary>
              Looks up a localized string similar to The property {0} does not refer to a property in the given Store..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.InvalidBottomAnchorToBottomOfTopOfParentShape">
            <summary>
              Looks up a localized string similar to A BottomAnchor can only anchor to bottom or top edge of the parent Shape..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.InvalidBottomAnchorToBottomOfTopOfSiblingShape">
            <summary>
              Looks up a localized string similar to A BottomAnchor can only anchor to bottom or top edge of a sibling Shape..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.InvalidBottomAnchorToBottomOfTopOfSiblingShapeField">
            <summary>
              Looks up a localized string similar to A BottomAnchor can only anchor to bottom or top edge of a sibling ShapeField..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.InvalidDiagramClientView">
            <summary>
              Looks up a localized string similar to Parameter diagramClientView is invalid. The DiagramClientView.Diagram reference must be valid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.InvalidFocusExceptionText">
            <summary>
              Looks up a localized string similar to Attempt to set focus to a DiagramItem that cannot receive focus..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.InvalidRightAnchorLeftOrRightText">
            <summary>
              Looks up a localized string similar to A RightAnchor can only anchor to the right or left edge of the parent Shape..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.InvalidRightAnchorToRightOfLeftOfSiblingShape">
            <summary>
              Looks up a localized string similar to A RightAnchor can only anchor to the right or left edge of a sibling Shape..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.InvalidRightAnchorToRightOfLeftOfSiblingShapeField">
            <summary>
              Looks up a localized string similar to A RightAnchor can only anchor to the right or left edge of a sibling ShapeField..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.InvalidSelectionExceptionText">
            <summary>
              Looks up a localized string similar to Attempt to select a null or non-selectable DiagramItem..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.LabelFieldAccessibleDescription">
            <summary>
              Looks up a localized string similar to Label Shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.LabelText_Description">
            <summary>
              Looks up a localized string similar to The text of the label..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.LineSegmentAccessibleDescription">
            <summary>
              Looks up a localized string similar to Line Segment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.LineSegmentAccessibleName">
            <summary>
              Looks up a localized string similar to Segment {0} of Line {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ListFieldAccessibleDescription">
            <summary>
              Looks up a localized string similar to A list of items within a shape..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ListFieldAccessibleName">
            <summary>
              Looks up a localized string similar to List.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ManuallyRouteLine">
            <summary>
              Looks up a localized string similar to Manual Routing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.MelNotRelatedToPel">
            <summary>
              Looks up a localized string similar to The supplied model element must be linked to the supplied presentation element..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.MissingAssociatedValueProperty">
            <summary>
              Looks up a localized string similar to The ShapeField&apos;s value must be associated with a domain property..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.MissingAssociatedVisibilityProperty">
            <summary>
              Looks up a localized string similar to The ShapeField&apos;s visibility must be associated with a domain property..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.MissingTransactionText">
            <summary>
              Looks up a localized string similar to This operation must be performed within a transaction..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.MoreThanOneConnectionTypeBetweenSourceAndTargetText">
            <summary>
              Looks up a localized string similar to More than one connection types can create connection between source and target..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.MoveAnchorPoint">
            <summary>
              Looks up a localized string similar to Move Anchor Point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.MoveItems">
            <summary>
              Looks up a localized string similar to Move {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.NoActiveDiagramViewFoundText">
            <summary>
              Looks up a localized string similar to No Active Diagram view found..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.NodeShapeBackgroundAccessibleDescription">
            <summary>
              Looks up a localized string similar to Background.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ParsePointDExceptionText">
            <summary>
              Looks up a localized string similar to Failed to parse text. Expected text in the format: x, y.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.PelMelNavigationFailed">
            <summary>
              Looks up a localized string similar to Unable to navigate from presentation element to domain element..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.PlusMinusButtonFieldAccessibleDescription">
            <summary>
              Looks up a localized string similar to A plus/minus button within a shape..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.PlusMinusButtonFieldAccessibleName">
            <summary>
              Looks up a localized string similar to Collapse button.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.PlusMinusButtonFieldExpandAccessibleName">
            <summary>
              Looks up a localized string similar to Expand button.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.QueryingNonEdgeLayoutObjectText">
            <summary>
              Looks up a localized string similar to Querying a non-edge layout object for an Edge interface..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.QueryingNullLayoutObjectForEdgeInterfaceText">
            <summary>
              Looks up a localized string similar to Querying a null layout object for an Edge interface..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ResizeShapes">
            <summary>
              Looks up a localized string similar to Size.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.SelectionMustHaveFocus">
            <summary>
              Looks up a localized string similar to Selected item must have focus.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.SelectionStateInvalidTypeExceptionText">
            <summary>
              Looks up a localized string similar to Parameter must be of type SelectionState..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ShapeMustBeInDiagramPartition">
            <summary>
              Looks up a localized string similar to Shape must belong to the same partition as the Diagram in which it is hosted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ShowGridDescription">
            <summary>
              Looks up a localized string similar to Show or hide the diagram grid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.SnapToGridDescription">
            <summary>
              Looks up a localized string similar to Shape move and resize according to the  diagram&apos;s grid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.SpringNeedsTwoAnchorTargetsText">
            <summary>
              Looks up a localized string similar to The spring has to specify two anchor targets..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.SwimlaneHeaderAccessibleDescription">
            <summary>
              Looks up a localized string similar to Swimlane Header.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.SwimlaneNotChildOfDiagram">
            <summary>
              Looks up a localized string similar to Swimlane must be a child of the diagram..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.TextFieldAccessibleDescription">
            <summary>
              Looks up a localized string similar to Text within a shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.TextFieldAccessibleName">
            <summary>
              Looks up a localized string similar to Text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.TextFieldAutoSizeAndMultiline">
            <summary>
              Looks up a localized string similar to TextField doesn&apos;t support combining AutoSize and MultipleLine options.  To create a multiple line TextField that resizes when its parent shape changes, use shape anchoring..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ToAnchorPointAccessibleDescription">
            <summary>
              Looks up a localized string similar to The ending anchor point of the line..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ToAnchorPointAccessibleName">
            <summary>
              Looks up a localized string similar to End anchor point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ToggleButtonCollapseDefaultActionDescription">
            <summary>
              Looks up a localized string similar to Collapse.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ToggleButtonExpandDefaultActionDescription">
            <summary>
              Looks up a localized string similar to Expand.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ToolboxNotFoundInActiveDiagramViewText">
            <summary>
              Looks up a localized string similar to Toolbox not found in Active Diagram view..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ToString_ShapeElement">
            <summary>
              Looks up a localized string similar to {0} &lt;{1}&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.TransactionDoesNotHaveUnplacedShapesContextText">
            <summary>
              Looks up a localized string similar to Transaction does not have an UnplacedShapesContext..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.UnableToGetShapeRepresentationText">
            <summary>
              Looks up a localized string similar to Unable to get ShapeRepresentations from the store..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DesignSurfaceStrings.ValueMustBeCommandIdText">
            <summary>
              Looks up a localized string similar to value must be of type CommandID..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea">
            <summary>
            A temporary class used to track the invalidated bounding box for the diagram
            while IMS events are raised.
            Intended to be used to support undo/redo feedback for V1, and not intended to
            live much beyond that.
            DO NOT CHANGE THE VISIBILITY OF THIS PROPERTY.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea.#ctor">
            <summary>
            Initializes a new instance of the InvalidatedArea class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea.Reset">
            <summary>
            Enables this object to receive shape bounds and
            resets the invalidated bounding box to empty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea.Enable">
            <summary>
            Enables this object so that it accepts shape bounds additions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea.Disable">
            <summary>
            Disables this object so that it ignores any shape bound
            additions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea.AddRemovedShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Remembers that the shape has been removed from its parent shape.
            </summary>
            <param name="removedShape">The shape that has been removed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea.HasRemovedShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns a value indicating whether the shape has been removed from its parent shape.
            </summary>
            <param name="removedShape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea.RemoveRemovedShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            No longer remembers that the shape has been removed from its parent shape.
            </summary>
            <param name="removedShape"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea.Enabled">
            <summary>
            Gets a value indicating whether this object is enabled
            to add shape bounds.
            </summary>
            <value>true if this object will respond to Add calls; otherwise, this object will ignore Add calls.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea.HasArea">
            <summary>
            Gets a value indicating whether the bounding box has a non-zero area.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea.Add(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Adds an absolute bounds of the ShapeElement to the bounding box considered invalidated.
            </summary>
            <param name="shapeBounds">The ShapeElement's absolute bounds in world units.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InvalidatedArea.BoundingBox">
            <summary>
            Gets the absolute bounding box of the invalidated area relative in world units.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeEventRouter">
            <summary>
            Subscribes to general events for the specified store
            and then routes them to the specific shapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeEventRouter.SubscribeToEvents">
            <summary>
            Subscribes to ShapeElement-class level events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeEventRouter.UnsubscribeFromEvents">
            <summary>
            Unsubscribes from shape-class level events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeEventRouter.OnAbsoluteBoundsPropertyChanged(System.Object,Microsoft.VisualStudio.Modeling.ElementPropertyChangedEventArgs)">
            <summary>
            This method is the callback for the IMS property
            changed event for the AbsoluteBounds property.
            It essentially redirects the event to the appropriate ShapeElement.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeIdCollection">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeIdCollection.#ctor">
            <summary>
            Initializes a new instance of the ShapeIdCollection class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeIdCollection.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Initializes a new instance of the ShapeIdCollection class.
            </summary>
            <param name="selection">The collection of shapes to initialize the collection with.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeIdCollection.GuidList">
            <summary>
            Gets a collection of the ShapeElement Ids in this collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeIdCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeIdCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeIdCollection.Count">
            <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeIdCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array,
            starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeIdCollection.CopyTo(System.Guid[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array of Guids,
            starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeIdCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through this collection.
            </summary>
            <returns>An enumerator that can iterate through this collection.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDeleteRule">
            <summary>
            A rule which executes when a Diagram has been removed from the Store.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDeleteRule.ElementDeleted(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Initializes a new instance of the Diagram class
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramTypeDescriptor">
            <summary>
            Specialized type descriptor for the Diagram class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem">
            <summary>
            Represents a ShapeElement, a ShapeField, or a ShapeSubField.  This is intended to be 
            used for hit-testing, selection, focus, and accessibility.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.#ctor">
            <summary>
            Initializes a new instance of the DiagramItem class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Initializes a new instance of the DiagramItem class to represent the specified ShapeElement.
            </summary>
            <param name="shape">The ShapeElement that this DiagramItem is to represent.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Initializes a new instance of the DiagramItem class to represent the specified ShapeField.
            </summary>
            <param name="shape">The parent ShapeElement of the ShapeField.  This cannot be null.</param>
            <param name="field">The ShapeField that this DiagramItem is to represent.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Initializes a new instance of the DiagramItem class to represent the specified ShapeSubField.
            </summary>
            <param name="shape">The parent ShapeElement of the ShapeSubField.  This cannot be null.</param>
            <param name="field">The parent ShapeField of the ShapeSubField.  This cannot be null.</param>
            <param name="subfield">The ShapeSubField that this DiagramItem is to represent.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,Microsoft.VisualStudio.Modeling.Diagrams.AnchorPoint)">
            <summary>
            Initializes a new instance of the DiagramItem class to represent the specified ShapeSubField.
            </summary>
            <param name="shape">The parent ShapeElement of the ShapeSubField.  This cannot be null.</param>
            <param name="field">The parent ShapeField of the ShapeSubField.  This cannot be null.</param>
            <param name="subfield">The ShapeSubField that this DiagramItem is to represent.</param>
            <param name="segment">The LineSegment that this DiagramItem is to represent.</param>
            <param name="anchorPoint">The LineSegment's Anchor Point that this DiagramItem is to represent</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment)">
            <summary>
            Initializes a new instance of the DiagramItem class to represent the specified LineSegment.
            </summary>
            <param name="shape">The parent ShapeElement of the LineSegment.  This cannot be null.</param>
            <param name="segment">The LineSegment that this DiagramItem is to represent.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,Microsoft.VisualStudio.Modeling.Diagrams.AnchorPoint)">
            <summary>
            Initializes a new instance of the DiagramItem class to represent the specified AnchorPoint.
            </summary>
            <param name="shape">The parent ShapeElement of the LineSegment.  This cannot be null.</param>
            <param name="segment">The LineSegment that this DiagramItem is to represent.  This cannot be null.</param>
            <param name="anchorPoint">The anchor point that this DiagramItem is to represent.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.SetItem(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Sets the DiagramItem to represent the specified ShapeElement.
            </summary>
            <param name="shape">The ShapeElement that this DiagramItem is to represent.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.SetItem(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Sets the DiagramItem to represent the specified ShapeField.
            </summary>
            <param name="shape">The parent ShapeElement of the ShapeField.  This cannot be null.</param>
            <param name="field">The ShapeField that this DiagramItem is to represent.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.SetItem(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Sets the DiagramItem to represent the specified ShapeSubField.
            </summary>
            <param name="shape">The parent ShapeElement of the ShapeSubField.  This cannot be null.</param>
            <param name="field">The parent ShapeField of the ShapeSubField.  This cannot be null.</param>
            <param name="subField">The ShapeSubField that this DiagramItem is to represent.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.SetItem(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment)">
            <summary>
            Set the DiagramItem to represent the specified LineSegment
            </summary>
            <param name="shape">The parent ShapeElement of the LineSegment.  This cannot be null.</param>
            <param name="segment">The LineSegment that this DiagramItem is to represent.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.SetItem(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,Microsoft.VisualStudio.Modeling.Diagrams.AnchorPoint)">
            <summary>
            Set the DiagramItem to represent the specified LineSegment's anchor point
            </summary>
            <param name="shape">The parent ShapeElement of the LineSegment.  This cannot be null.</param>
            <param name="segment">The LineSegment that this DiagramItem is to represent.</param>
            <param name="anchorPoint">The anchor point on the line segment</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.SetItem(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,Microsoft.VisualStudio.Modeling.Diagrams.AnchorPoint)">
            <summary>
            Sets the DiagramItem to represent the specified ShapeSubField.
            </summary>
            <param name="shape">The parent ShapeElement of the ShapeSubField.  This cannot be null.</param>
            <param name="field">The parent ShapeField of the ShapeSubField.  This cannot be null.</param>
            <param name="subField">The ShapeSubField that this DiagramItem is to represent.</param>
            <param name="segment">The LineSegment that this DiagramItem is to represent.</param>
            <param name="anchorPoint">The Anchor point (can be null iff the segment is null).</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.Diagram">
            <summary>
            Gets the Diagram that the shape belongs to.
            </summary>
            <value>The Diagram that the shape belongs to.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.Shape">
            <summary>
            Gets the shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.Field">
            <summary>
            Gets the field.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.SubField">
            <summary>
            Gets the subfield.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.Segment">
            <summary>
            Gets the segment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.AnchorPoint">
            <summary>
            Gets the anchorPoint.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.RepresentedElements">
            <summary>
            Gets a collection of ModelElements that this DiagramItem represents.
            </summary>
            <remarks>
            For a DiagramItem which describes just a ShapeElement, 
            the representative element is the ShapeElement itself.
            </remarks>
            <remarks>
            This is intended to be used by accessibility and selection.  For example, the 
            retrieved ModelElement may be pushed to the property browser as part of the selection.
            The retrieved ModelElement may be queried for accessibility properties, such as 
            accessible name and accessible description.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.Parent">
            <summary>
            Gets the parent DiagramItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.CanSelect">
            <summary>
            Gets a value indicating whether this DiagramItem is selectable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.CanFocus">
            <summary>
            Gets a value indicating whether this DiagramItem is focusable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.AbsoluteBoundingBox">
            <summary>
            Gets the bounding box in world units relative to the top-left of the diagram.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.IsDiagram">
            <summary>
            Gets a value indicating whether the DiagramItem is the diagram.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.GetAccessibleObject(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
             <summary>
             Gets the AccessibleObject for a DiagramItem.
             </summary>
            <param name="view">The view that the AccessibleObject is associated with.</param>
             <returns>The AccessibleObject for the DiagramItem.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.Equals(System.Object)">
            <summary>
            Gets a value indicating whether two DiagramItem objects are equal.
            </summary>
            <param name="obj">The DiagramItem that is compared with this DiagramItem.</param>
            <returns>true if the DiagramItem objects are equal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.GetHashCode">
            <summary>
            Gets a hash code for this DiagramItem.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem.Clone">
            <summary>
            Creates a new DiagramItem that is a copy of the current instance.
            </summary>
            <returns>A new DiagramItem that is a copy of the current instance.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection">
            <summary>
            A collection of DiagramItem instances.  A DiagramItem represents a
            ShapeElement, ShapeField, or ShapeSubField instance on the diagram
            and is used for such things as hit-testing and selection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.#ctor">
            <summary>
            Initializes a new instance of the DiagramItemCollection class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.Item(System.Int32)">
            <summary>
            Gets the DiagramItem at the specified position in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.Add(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Adds a specific DiagramItem to the collection.
            </summary>
            <param name="diagramItem">The DiagramItem to add to this collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.Add(System.Collections.ICollection)">
            <summary>
            Adds the DiagramItem of an ICollection to the end of the DiagramItemCollection
            </summary>
            <param name="diagramItemsToAdd">The collection of DiagramItems to add to this collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.Remove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Removes the first occurrence of a specific DiagramItem from the collection.
            </summary>
            <param name="diagramItem">The DiagramItem to remove.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.Remove(System.Collections.ICollection)">
            <summary>
            Removes the specified DiagramItems from an ICollection 
            </summary>
            <param name="diagramItemsToRemove">The collection of DiagramItems to remove.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.Contains(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Determines whether a DiagramItem is in the collection.
            </summary>
            <param name="diagramItem">The DiagramItem to search for.</param>
            <returns>true if DiagramItem is in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.Insert(System.Int32,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Inserts the DiagramItem into the collection at the specified index.
            </summary>
            <param name="index">A zero-based index.</param>
            <param name="diagramItem">The DiagramItem to insert.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.CopyTo(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem[],System.Int32)">
            <summary>
            Copies the DiagramItems of the selection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the DiagramItems copied from the selection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.IndexOf(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Returns the zero-based index of the DiagramItem in the collection.
            </summary>
            <param name="diagramItem">The DiagramItem to search for.</param>
            <returns>The zero-based index of the DiagramItem in the collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.GetEnumerator">
            <summary>
            Gets a DiagramItem enumerator for this collection.
            </summary>
            <returns>A DiagramItem enumerator for this collection.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.DiagramItemEnumerator">
            <summary>
            A simple enumerator for the DiagramItemCollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.DiagramItemEnumerator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection)">
            <summary>
            Initializes a new instance of the DiagramItemEnumerator class.
            </summary>
            <param name="diagramItemCollection">A collection of DiagramItems to enumerate.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.DiagramItemEnumerator.Current">
            <summary>
            Gets the current DiagramItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.DiagramItemEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current DiagramItem.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.DiagramItemEnumerator.MoveNext">
            <summary>
            Advances to the next DiagramItem.
            </summary>
            <returns>true if there is a next DiagramItem.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection.DiagramItemEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning of the collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.CompartmentComponentNameFormat">
            <summary>
              Looks up a localized string similar to {0}.{1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.ConnectorAccessibleNameFormat">
            <summary>
              Looks up a localized string similar to Connector from {0} to {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.ConnectorSelfReference">
            <summary>
              Looks up a localized string similar to Unable to connect a shape to itself.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.DecoratedMustBeShape">
            <summary>
              Looks up a localized string similar to The decorated class must be derived from Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.DecoratorDescriptionMismatch">
            <summary>
              Looks up a localized string similar to Decorator description for decorator {0} and position type {1} mismatched.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.DragDropContextCompartmentShape">
            <summary>
              Looks up a localized string similar to Compartment Shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.ExpandCollapseField">
            <summary>
              Looks up a localized string similar to Button.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.ExpandCollapseShape">
            <summary>
              Looks up a localized string similar to Expand-collapse Shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.ExpectedDecoratorShape">
            <summary>
              Looks up a localized string similar to DecoratorBoundsRule used with non-Decorator shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.IconDecoratorImageField">
            <summary>
              Looks up a localized string similar to Icon.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.InvalidArgument">
            <summary>
              Looks up a localized string similar to Invalid argument : {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.NewListCompartmentItem">
            <summary>
              Looks up a localized string similar to Add New List Compartment Item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.ReadOnlyShapeProperty">
            <summary>
              Looks up a localized string similar to Changing the value of this property is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.TextDecoratorLabelField">
            <summary>
              Looks up a localized string similar to Label.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.TryCreateConnectionWithoutConnectorMap">
            <summary>
              Looks up a localized string similar to To be able to create this connection, you should either override CreateConnection(Microsoft.VisualStudio.Modeling.Utilities.Shape, Microsoft.VisualStudio.Modeling.Utilities.Shape) in {0}, or provide a connector map for this connector in the dd file..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramUtilitiesStrings.UnexpectedDecoratorPosition">
            <summary>
              Looks up a localized string similar to The decorator is not in a standard position.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView">
            <summary>
            This is the view control that creates design surface and scrollbars.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.DiagramClientView">
            <summary>
            Returns the client view design surface contained within the DiagramView.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.#ctor">
            <summary>
            The default constructor creates and initializes all of the controls 
            in the DiagramView.  And, signs up for events from the scrollbars
            and DiagramClientView. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override the default WndProc so that we don't shutdown VS and launch
            Watson unless it's a critical exception. If it's not, then we just 
            diplay the error message.
            </summary>
            <param name="message">Windows message</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.UIService">
            <summary>
            Gets the IUIService.  The store will be queried first,
            followed by this view.
            </summary>
            <value>The IUIService.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.ShowError(System.String)">
            <summary>
            Displays the specified error message.
            </summary>
            <param name="message">Error message to display</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.UpdateScrollBarRanges(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Internal function that updates the scroll bar ranges
            </summary>
            <param name="stateInfo">Information about current scroll ranges and page size.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.OnSizeChanged(System.EventArgs)">
            <summary>
            Handles the SizeChanged event by repositioning and resizing all of 
            child control 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.hScrollBar_Scroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Handles ScrollEvent from the horizontal scrollbar.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.vScrollBar_Scroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Handles ScrollEvent from the vertical scrollbar.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.OnScrollPositionChanged(System.Object,Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Handles ScrollPositionChangedEvent from the DiagramClientView.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.OnDiagramScrollRangeChanged(System.Object,Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Handles ScrollChangedEvent from the DiagramClientView.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Catch the handle destroy event to allow an orderly shutdown of the diagram
            if this is the final handle.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.GripColor">
            <summary>
            The color to use to paint the gripper in the lower-right corner of the
            diagram when both vertical and horizontal scrollbars are visible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.HasWatermark">
            <summary>
            Set this property to true to enable watermark on design surface or to
            false to disable it (false is default).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.Watermark">
            <summary>
            Returns LinkLabel which represents the watermark control on design surface.
            Use this property after HasWatermark is set to true to specify watermark
            text, link areas and link event handler.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.OnWatermarkCreated">
            <summary>
            Called after the watermark for this view has been created.
            Override this method to provide custom behavior, like adding particular links
            to the Watermark (it derives from the WinForms LinkLabel control).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.Diagram">
            <summary>
            Gets or sets the Diagram object associated with this DiagramView.
            </summary>
            <remarks>
            Set this property to null to disassociate the DiagramView from any Diagram.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.Selection">
            <summary>
            Gets the selection for the DiagramView.  
            </summary>
            <remarks>
            Use the returned SelectedShapesCollection object to alter the DiagramView's selection.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.ActiveMouseAction">
            <summary>
            Gets or sets the active mouse action for this DiagramView.
            </summary>
            <remarks>
            A mouse action is a modal mouse operation such as the connector tool
            or the zoom tool.
            
            To install a mouse action, set this property to a MouseAction 
            derived class.  The mouse action will automatically be activated.
            
            To uninstall a mouse action, either allow the mouse action to run 
            its course or explicitly set this property to null or to another 
            mouse action.  If the current mouse action is still active when 
            this property is set, then the current mouse action is automatically 
            canceled.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.ZoomFactor">
            <summary>
            Gets the scaling factor.
            </summary>
            <remarks>
            A value of 1 is considered 100%.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.ZoomAtViewCenter(System.Single)">
            <summary>
            Zooms in or out around the center point of the current view.
            </summary>
            <param name="newZoomFactor">Scaling factor (A value of 1 is considered 100%)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.ZoomToFit">
            <summary>
            Zooms in or out to show the entire diagram as large as possible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.ZoomIn">
            <summary>
            Zooms in
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.ZoomOut">
            <summary>
            Zooms out
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.ScrollUp">
            <summary>
            Scrolls the view up.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.ScrollDown">
            <summary>
            Scrolls the view down.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.ScrollLeft">
            <summary>
            Scrolls the view left.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.ScrollRight">
            <summary>
            Scrolls the view right.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.NudgeUp">
            <summary>
            Moves the selection up.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.NudgeDown">
            <summary>
            Moves the selection down.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.NudgeLeft">
            <summary>
            Moves the selection left.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.NudgeRight">
            <summary>
            Moves the selection right.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.Site">
            <summary>
            Sets the site for the diagram view.  This property is a passthrough to the associated
            DiagramClientView's site.  
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.Toolbox">
            <summary>
            Provide cached access to the toolbox.  The diagram must be displayed
            by a diagram view that has access to the toolbox through it's Site property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramView.SelectedToolboxItemSupportsFilterString(System.String)">
            <summary>
            Determines whether the currently selected toolbox item supports the given filter string.
            Useful for recognizing custom filters.
            </summary>
            <param name="filterString">Filter string to test support for.  If this string is present
            in the ToolboxItem.Filter collection for the currently selected toolbox item, and the
            associated ToolboxItemFilterType is not Prevent, then this will return true.</param>
            <returns>True if the given filter string is supported by the currently selected toolbox item.</returns>
            <remarks>
            This is a useful helper method for clients that use ToolboxItemFilterAttributes as tags to identify
            certain toolbox items.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWatermark">
            <summary>
            Diagram watermark control which appears when diagram is empty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWatermark.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Constructor.
            </summary>
            <param name="diagramClientView">Diagram client view which owns the watermark.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWatermark.Dispose(System.Boolean)">
            <summary>
            Disposes this control. Unsubscribes from event handlers
            and hides watermark if it's visible.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWatermark.Diagram">
            <summary>
            Diagram which is associated with the client view.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWatermark.UpdateFromDiagram">
            <summary>
            Refreshes watermark state based on diagram IsWatermarkNeeded setting if needed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWatermark.OnDiagramElementDeleted(System.Object,Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Called when element is removed from diagram's store.
            </summary>
            <param name="sender">Event source.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWatermark.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            Override OnInvalidated to check whether we should hide watermark
            when a new element added to the diagram.
            </summary>
            <param name="e">Invalidate event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWatermark.ShowWatermark">
            <summary>
            Shows watermark and switch event handlers appropriately.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWatermark.HideWatermark">
            <summary>
            Hides watermark and switch event handlers appropriately.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents">
            <summary>
            Accessible WinEvent support for Diagrams.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectAcceleratorChange">
            <summary>
            An object's KeyboardShortcut property has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectCreate">
            <summary>
            An object has been created.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectDefaultActionChange">
            <summary>
            An object's DefaultAction property has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectDescriptionChange">
            <summary>
            An object's Description property has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectDestroy">
            <summary>
            An object has been destroyed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectFocus">
            <summary>
            An object has received the keyboard focus.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectHelpChange">
            <summary>
            An object's Help property has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectHide">
            <summary>
            An object is hidden.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectLocationChange">
            <summary>
            A DiagramItem's location and/or size has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectNameChange">
            <summary>
            An object's Name property has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectParentChange">
            <summary>
            An object has a new parent object.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectReorder">
            <summary>
            A container object has added, removed, or reordered its children.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectSelection">
            <summary>
            The selection within a container object has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectSelectionAdd">
            <summary>
            An item within a container object has been added to the selection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectSelectionRemove">
            <summary>
            An item within a container object has been removed from the selection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectSelectionWithin">
            <summary>
            Numerous selection changes have occurred within a container object.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectShow">
            <summary>
            A hidden object is shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectStateChange">
            <summary>
            An object's state has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.EventObjectValueChange">
            <summary>
            An object's Value property has changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.NotifyForAllViews(System.Int32,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Signals the system that an accessibility event occurred.
            The notification will be sent for each view associated with the DiagramItem.
            </summary>
            <param name="accessibilityEvent">One of the predefined EVENT_OBJECT_* or EVENT_SYSTEM_* constants.</param>
            <param name="diagramItem">The DiagramItem that is generating the notification.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.Notify(System.Int32,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Signals the system that an accessibility event occurred.
            The notification will be sent for the specified view only.
            </summary>
            <param name="accessibilityEvent">One of the predefined EVENT_OBJECT_* or EVENT_SYSTEM_* constants.</param>
            <param name="diagramItem">The object that generated the event.</param>
            <param name="view">The DiagramClientView that contains the object that generated the event.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramWinEvents.GetObject(System.Int32)">
            <summary>
            Retrieves the AccessibleObject corresponding to the specified id.
            This method is intended to implement WM_GETOBJECT, where the
            object identifier is provided by the LPARAM.
            </summary>
            <param name="accessibleObjectId">
            The id that uniquely identifies the accessible object. 
            This is the LPARAM value of the WM_GETOBJECT message.
            </param>
            <returns>
            An AccessibleObject corresponding to the id, or 
            null if the accessible object no longer exists.  
            (Existence of the accessible object does not 
            reflect the existence of the object that it represents.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext">
            <summary>
            Provides methods to add and retrieve drop target context 
            information to and from a particular transaction context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.#ctor(System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection)">
            <summary>
            Initializes an instance of a DropTargetContext class.
            </summary>
            <param name="targetDiagramId">The guid of the target diagram.</param>
            <param name="dropLocation">The location of the drop in world units relative to the top-left of the diagram.</param>
            <param name="ghostShapes">The ghost shapes which have been updated to reflect the specified drop location. This can be null.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.DropLocation">
            <summary>
            Gets the drop location in absolute world coordinates.  Note that the location could be PointD.Empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.TargetDiagramId">
            <summary>
            Gets the diagram id of the drop target.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.GhostShapes">
            <summary>
            Gets the ghost shapes which provide proposed properties 
            (such as the proposed bounds) for the shapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.Set(Microsoft.VisualStudio.Modeling.Transaction,System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection)">
            <summary>
            Adds the drop target context information to the specified 
            transaction for later use.
            </summary>
            <param name="transaction">The transaction in which to save the drop target context.</param>
            <param name="targetDiagramId">The diagram Id of the drop target.</param>
            <param name="dropLocation">The drop location in absolute world coordinates.</param>
            <param name="ghostShapes">The ghost shapes which provide proposed properties (such as proposed bounds).  This may be null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.Remove(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Removes the DragDropContext from the transaction's context info.
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.HasDropTargetContext(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Gets a value indicating whether any drop target context is available 
            from the specified transaction.
            </summary>
            <param name="transaction">The transaction to check for the drop target context.</param>
            <returns>
            true if drop target context information is available from 
            the specified transaction.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.GetDropLocation(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Gets the drop location from the specified transaction.
            </summary>
            <param name="transaction">The transaction to check for the drop target context.</param>
            <returns>The drop location in absolute world coordinates.</returns>
            <remarks>
            The drop location returned is the value saved to the specified transaction by
            an earlier call to the static method AddDropTargetContext.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.GetTargetDiagramId(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Gets the diagram id of the drop target.
            </summary>
            <param name="transaction">The transaction to check for the drop target context.</param>
            <returns>The diagram id of the drop target.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.GetTargetBoundingBox(Microsoft.VisualStudio.Modeling.Transaction,System.Guid)">
            <summary>
            Gets the desired bounding box of the target shape element in world units 
            relative to the top-left of the diagram.  The desired bounding box is
            determined via the GhostShapeCollection updated by GroupBoundsRules.
            This method returns RectangleD.Empty if it wasn't able to get the
            target bounding box.
            </summary>
            <param name="transaction">The transaction to check for the drop target context.</param>
            <param name="targetShapeElementId">The Guid of the target shape element for which to get the bounds.</param>
            <returns>
            The absolute bounding box of the target shape element. 
            If the target bounding box wasn't available, then this
            method returns RectangleD.Empty.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.GetGhostShapes(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Gets the ghost shapes which provide proposed properties 
            (such as the proposed bounds) for the shapes.
            </summary>
            <param name="transaction">The transaction to check for the drop target context.</param>
            <returns>The ghost shapes which provide proposed properties (such as the proposed bounds) for the shapes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DropTargetContext.GetSourceId(Microsoft.VisualStudio.Modeling.Transaction,System.Guid)">
            <summary>
            Gets the source ShapeElement Guid corresponding to the given
            target ShapeElement Guid.
            </summary>
            <param name="transaction">The transaction to check for the drop target context.</param>
            <param name="targetShapeElementId">The Guid of the target ShapeElement.</param>
            <returns>The source ShapeElement Guid corresponding to the given target ShapeElement Guid.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.UnplacedShapesContext">
            <summary>
            Context information associated with drag-and-drop that keeps track of shapes
            that have not yet been positioned and will require later placement.
            
            In any given transaction, we can have unplaced shapes for multiple diagrams, when
            multiple diagrams need to be fixed up.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.Modeling.Diagrams.UnplacedShapesContext.diagramIdToUnplacedShapesMap" -->
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.UnplacedShapesContext.#ctor">
            <summary>
            Initializes an instance of a UnplacedShapesContext class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.UnplacedShapesContext.SetUnplacedShapesContext(Microsoft.VisualStudio.Modeling.Transaction,Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Collections.IDictionary)">
            <summary>
            Adds the unplaced shape context information to the specified transaction for later use.
            </summary>
            <param name="transaction">The transaction in which to save the unplaced shape context.</param>
            <param name="targetDiagram">The diagram with the unplaced shapes.</param>
            <param name="unplacedShapeMap">A collection of shapes that need to be placed.
            The dictionary maps (unplaced shapes) ShapeElements to a bool which indicates
            if the unplaced shape was created during view fixup.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.UnplacedShapesContext.Remove(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Removes the UnplacedShapesContext from the transaction's context info.
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.UnplacedShapesContext.HasUnplacedShapesContext(Microsoft.VisualStudio.Modeling.Transaction)">
            <summary>
            Gets a value indicating whether any unplaced shapes context is available 
            from the specified transaction.
            </summary>
            <param name="transaction">The transaction to check for the drop target context.</param>
            <returns>
            true if unplaced shapes context information is available from 
            the specified transaction.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.UnplacedShapesContext.GetUnplacedShapesMap(Microsoft.VisualStudio.Modeling.Transaction,System.Guid)">
            <summary>
            Gets the unplaced shpapes collection from the specified transaction.
            </summary>
            <param name="transaction">The transaction to check for the unplaced shapes context.</param>
            <param name="targetDiagramId">The diagram Id of the unplaced shapes.</param>
            <returns>If they exist, the collection of unplaced shapes, otherwise an empty IDictionary.</returns>
            <remarks>
            The collection of unplaced shapes returned is the value saved to the specified transaction by
            an earlier call to the static method SetUnplacedShapesContext.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext">
            <summary>
            Provides drag source information which is
            initially set when the ElementGroupPrototype is
            created at the source.
            It is used for drag feedback and the merge 
            (i.e., drop/paste) process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.InitialDragLocation">
            <summary>
            Gets the location of the mouse (in absolute world coordinates) when drag began.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.InitialBoundingBox">
            <summary>
            Gets the bounding box (in absolute world coordinates) encompassing all the shapes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.InitialPrimaryShapeId">
            <summary>
            Gets the Guid of the primary shape in the ElementGroupPototype.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.InitialPrimaryShapeBounds">
            <summary>
            Gets the bounds (in absolute world coordinates) of the primary shape in the ElementGroupPrototype.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.ProcessId">
            <summary>
            Gets the source process id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.StoreId">
            <summary>
            Gets the source store id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.DiagramId">
            <summary>
            Gets the source diagram id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GhostShapes">
            <summary>
            Gets the ghost shape collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.Set(Microsoft.VisualStudio.Modeling.ElementGroupPrototype,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection)">
            <summary>
            Adds drag source information to the ElementGroupPrototype's source context.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype to add the information to.</param>
            <param name="initialDragLocation">The initial location of the mouse in absolute world coordinates.</param>
            <param name="ghostShapes">A collection of ghost shapes that represents all the shapes in the ElementGroupPrototype.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.Set(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Adds the DragSourceContext to the source context of the specified ElementGroupPrototype.
            </summary>
            <param name="elementGroupPrototype"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.Remove(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Removes the DragSourceContext from the ElementGroupPrototype's source context.
            </summary>
            <param name="elementGroupPrototype"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.HasDragSourceContext(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Returns a value indicating whether the ElementGroupPrototype has DragSourceContext.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype that may have the DragSourceContext.</param>
            <returns>true if the ElementGroupPrototype has DragSourceContext</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetInitialDragLocation(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Returns the location of the mouse (in absolute world coordinates) when drag began.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype where the DragSourceContext has been saved to.</param>
            <returns>The location of the mouse (in absolute world coordinates) when drag began.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetInitialDragLocation(Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            Returns the location of the mouse (in absolute world coordinates) when drag began.
            </summary>
            <param name="elementGroup">The ElementGroup where the DragSourceContext has been saved to.</param>
            <returns>The location of the mouse (in absolute world coordinates) when drag began.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetInitialBoundingBox(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Returns the bounding box (in absolute world coordinates) encompassing all the shapes.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype where the DragSourceContext has been saved to.</param>
            <returns>The bounding box (in absolute world coordinates) encompassing all the shapes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetInitialBoundingBox(Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            Returns the bounding box (in absolute world coordinates) encompassing all the shapes.
            </summary>
            <param name="elementGroup">The ElementGroup where the DragSourceContext has been saved to.</param>
            <returns>The bounding box (in absolute world coordinates) encompassing all the shapes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetInitialPrimaryShapeId(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Returns the Guid of the primary shape in the ElementGroupPototype.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype where the DragSourceContext has been saved to.</param>
            <returns>The Guid of the primary shape in the ElementGroupPototype.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetInitialPrimaryShapeId(Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            Returns the Guid of the primary shape in the ElementGroupPototype.
            </summary>
            <param name="elementGroup">The ElementGroup where the DragSourceContext has been saved to.</param>
            <returns>The Guid of the primary shape in the ElementGroupPototype.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetInitialPrimaryShapeBounds(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Returns the bounds (in absolute world coordinates) of the primary shape in the ElementGroupPrototype.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype where the DragSourceContext has been saved to.</param>
            <returns>The bounds (in absolute world coordinates) of the primary shape in the ElementGroupPrototype.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetInitialPrimaryShapeBounds(Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            Returns the bounds (in absolute world coordinates) of the primary shape in the ElementGroupPrototype.
            </summary>
            <param name="elementGroup">The ElementGroup where the DragSourceContext has been saved to.</param>
            <returns>The bounds (in absolute world coordinates) of the primary shape in the ElementGroupPrototype.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetGhostShapes(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Gets the source ghost shape collection.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype where the DragSourceContext has been saved to.</param>
            <returns>The source ghost shape collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetGhostShapes(Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            Gets the source ghost shape collection.
            </summary>
            <param name="elementGroup">The ElementGroup where the DragSourceContext has been saved to.</param>
            <returns>The source ghost shape collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetProcessId(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Gets the source process id. This can return 0 if no process id was specified or no drag source context is available.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype where the DragSourceContext has been saved to.</param>
            <returns>The source process id.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetProcessId(Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            Gets the source process id. This can return 0 if no process id was specified or no drag source context is available.
            </summary>
            <param name="elementGroup">The ElementGroup where the DragSourceContext has been saved to.</param>
            <returns>The source process id.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetStoreId(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Gets the source store id. This can return Guid.Empty if no store id was specified or no drag source context is available.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype where the DragSourceContext has been saved to.</param>
            <returns>The source store id.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetStoreId(Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            Gets the source store id. This can return Guid.Empty if no store id was specified or no drag source context is available.
            </summary>
            <param name="elementGroup">The ElementGroup where the DragSourceContext has been saved to.</param>
            <returns>The source store id.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetDiagramId(Microsoft.VisualStudio.Modeling.ElementGroupPrototype)">
            <summary>
            Gets the source diagram id. This can return Guid.Empty if no diagram id was specified or no drag source context is available.
            </summary>
            <param name="elementGroupPrototype">The ElementGroupPrototype where the DragSourceContext has been saved to.</param>
            <returns>The source diagram id.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragSourceContext.GetDiagramId(Microsoft.VisualStudio.Modeling.ElementGroup)">
            <summary>
            Gets the source diagram id. This can return Guid.Empty if no diagram id was specified or no drag source context is available.
            </summary>
            <param name="elementGroup">The ElementGroup where the DragSourceContext has been saved to.</param>
            <returns>The source diagram id.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor">
            <summary>
            The simple edit control used for in-place editing of a TextField.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.#ctor">
            <summary>
            Initializes a new instance of the ElementPropertyTextEditor class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.ShouldReportException(System.Exception)">
            <summary>
            See if the exception passed in should be reported
            </summary>
            <param name="ex">exception of interest</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.UnhandledException(System.Exception)">
            <summary>
            See if the exception passed in should not be handled
            </summary>
            <param name="ex">exception of interest</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages
            </summary>
            <param name="message">
            The Windows message to process
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.OnImeStartComposition(System.Windows.Forms.Message@)">
            <summary>
            Called when the WM_IME_STARTCOMPOSITION message is sent to this window.
            </summary>
            <param name="message">The Windows message to process.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.OnImeEndComposition(System.Windows.Forms.Message@)">
            <summary>
            Called when the WM_IME_ENDCOMPOSITION message is sent to this window.
            </summary>
            <param name="message">The Windows message to process.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
            Catch a couple of messages before translation.
            </summary>
            <param name="msg">Message of possible interest</param>
            <returns>true if handled</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.CommitEdit">
            <summary>
            Commits the edit and disassociates this editor from the 
            ModelElement and property.
            </summary>
            
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.CanEditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether the value of this field can be edited.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="field">The field being edited</param>
            <param name="subfield">The subfield being edited if a list field</param>
            <param name="view">The view that will become the parent of the editor.</param>
            <returns>true if the value of this field can be edited.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.DomainPropertyIsEditable(Microsoft.VisualStudio.Modeling.DomainPropertyInfo)">
            <summary>
            Is the specified domain property potentially editable through an in-place edit box?
            Note that doesn't check the read-only attribute (the property descriptor check later covers this)
            but performs basic/quick checks to immediately exclude calculated or non-string properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.CanEditPropertyOfElement(Microsoft.VisualStudio.Modeling.DomainPropertyInfo,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Is the specified domain property of a particular element editable? Essentially this involves checking
            that it has a non-readonly property descriptor. The PD will block attempts to edit elements with properties
            locked at the IMS level.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.GetEditedElementsForSubfield(System.Collections.ICollection,Microsoft.VisualStudio.Modeling.DomainPropertyInfo)">
            <summary>
            Gets ModelElements that will be edited by a subfield representing the given
            list of elements, for the given property.
            </summary>
            <param name="elementList">List of elements represented by a subfield</param>
            <param name="propertyInfo">The domain property to edit</param>
            <returns>An enumeration of ModelElements that will be affected by this text editor</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.DiagramClientView">
            <summary>
            Gets the DiagramClientView for this editor.  The
            editor's direct parent is expected to be of type
            DiagramClientView.
            </summary>
            <value>The DiagramClientView for this editor.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.DiscardEdit">
            <summary>
            Discards the edit and disassociates this editor from the 
            ModelElement and property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.CommitOnEscape">
            <summary>
            Gets or sets a value indicating whether the Escape key should
            commit the edit. 
            
            If this value is true, then the Enter key is used for 
            creating new lines in a multiline edit control and
            the Escape key is used to commit.  This is useful when
            no validation is required on the control.
            
            If this value is false, then the Escape key is used to
            cancel the edit, and the Enter key is used to commit.
            </summary>
            <value>true if the Escape key should commit the edit.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.UpdateEditorBounds">
            <summary>
            Updates the bounds of the text editor based on the DiagramClientView, 
            Shape, Field, and SubField properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.UpdateEditorBounds(System.Windows.Forms.BoundsSpecified)">
            <summary>
            Updates the bounds of the text editor based on the DiagramClientView, 
            Shape, Field, and SubField properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.GetEditorBounds">
            <summary>
            Get the in-place editor bounds for the field or subfield relative to the origin of the parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.UpdateEditorBoundsForTextChange">
            <summary>
            Called to resize the editor dynamically as text changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.GetTextDeviceSize">
            <summary>
            Get the size of client area required to edit the current text in the edit control, constrained to the minimum and maximum widths
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.GetHorizontalOffsetFromAnchoring(System.Int32,System.Int32)">
            <summary>
            Calculates the difference between the two given widths and returns appropriate
            X offset based on anchoring.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.EnsureVisibleCaret">
            <summary>
            Ensures that the caret is visible in the view and 
            scrolls the view if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Commits or discards the edit.
            </summary>
            <param name="e">A KeyEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Ensures that the caret is visible.
            </summary>
            <param name="e">A KeyEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.OnLostFocus(System.EventArgs)">
            <summary>
            Commits the edit.
            </summary>
            <param name="e">An EventArgs that contains event data.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.HookMouseDown">
            <summary>
            Gets or sets a value indicating whether the editor will 
            hook the mouse down event so the event only appears to 
            other windows in this process if the Commit succeeded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.Microsoft#VisualStudio#Modeling#Diagrams#IMouseHookClient#OnClickHooked">
            <summary>
            Returns a value indicating whether the MouseDown event was handled.
            True indicates that the MouseDown event was handled and should not be forwarded.
            False indicates that the MouseDown event was not handled and should be forwarded.
            </summary>
            <returns>True if the MouseDown event was handled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.Associate(System.Collections.ICollection,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Associates this editor with the specified ModelElements and their common property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.Associate(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Associates this editor with the specified Shape and ShapeField.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.UpdateControlText">
            <summary>
            Transfers the property descriptor's value to the edit control and
            clears the control's undo stack.
            The Associate() method must be called prior to calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.Disassociate">
            <summary>
            Disassociates this editor from the ModelElement and its property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.InUse">
            <summary>
            Gets a value indicating if the editor is actively editing a property.
            </summary>
            <value>true if the editor is actively editing a property.</value>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.EditValueEnded">
            <summary>
            Occurs when editing has terminated, either by committing 
            or discarding the changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.OnEditValueEnded(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Raises the EditValueEnded event.
            </summary>
            <param name="e">A DiagramEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.PositionCaretAt(System.Drawing.Point)">
            <summary>
            Positions the caret at the specified mouse location.
            </summary>
            <param name="mouseLocation">The mouse location relative to this control in device units.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.Shape">
            <summary>
            Gets the shape whose field or subfield is currently being edited.
            </summary>
            <value>The shape whose field or subfield is currently being edited.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.Field">
            <summary>
            Gets the field that is currently being edited or the field whose subfield is currently being edited.
            </summary>
            <value>The field that is currently being edited or the field whose subfield is currently being edited.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementPropertyTextEditor.SubField">
            <summary>
            Gets the subfield that is currently being edited. This can be null.
            </summary>
            <value>The subfield that is currently being edited.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.EditValueEndedEventHandler">
            <summary>
            Occurs when editing has terminated, either by committing 
            or discarding the changes.
            </summary>
            <param name="sender">The editor which has terminated editing.</param>
            <param name="e">A DiagramEventArgs containing event data.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MouseHooker">
            <summary>
            Borrowed from virtual tree grid, which borrowed from the property browser.  
            Installs a mouse hook to prevent other windows from seeing the MouseDown event if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseHooker.HookMouse">
            <devdoc>
                Sets up the needed windows hooks to catch messages.
            </devdoc>
            <internalonly/>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseHooker.MouseHookProc(System.Int32,System.IntPtr,System.IntPtr)">
            <devdoc>
                HookProc used for catch mouse messages.
            </devdoc>
            <internalonly/>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseHooker.UnhookMouse">
            <devdoc>
                Removes the windowshook that was installed.
            </devdoc>
            <internalonly/>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseHooker.ShouldReceiveMouseEvent(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Returns a value indicating whether the specified control should receive the mouse event.
            </summary>
            <param name="candidate">The control to test to see if it should receive the mouse event.</param>
            <param name="controlHookingMouse">The control that is hooking the mouse events.</param>
            <returns>True if the control should receive the mouse event.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MouseHooker.MouseHookObject">
            <devdoc>
                Forwards messageHook calls to ToolTip.messageHookProc
            </devdoc>
            <internalonly/>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PointRelativeTo">
            <summary>
            Indicates the point of reference from which the coordinates are relative.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PointRelativeTo.Screen">
            <summary>
            Indicates that the point is relative to the top-left of the screen.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PointRelativeTo.Client">
            <summary>
            Indicates that the point is relative to the top-left of the DiagramClientView's client area.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs">
            <summary>
            The base event args class for events originating from 
            the design surface control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs.#ctor">
            <summary>
            Initializes a new instance of the DiagramEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the DiagramEventArgs class.
            </summary>
            <param name="diagramClientView">
            The DiagramClientView that the DiagramEventArgs originated from.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Boolean)">
            <summary>
            Initializes a new instance of the DiagramEventArgs class.
            </summary>
            <param name="diagramClientView">
            The DiagramClientView that the DiagramEventArgs originated from.
            </param>
            <param name="diagramRequired">true if the view must be associated with a valid diagram.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs.DiagramClientView">
            <summary>
            Gets the DiagramClientView that the DiagramEventArgs originated from.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this event has been handled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventHandler">
            <summary>
            Delegate for handling diagram item events.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs">
            <summary>
            DiagramEventArgs that refer to a particular DiagramItem of interest.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the DiagramItemEventArgs class.
            </summary>
            <param name="diagramItem">The DiagramItem of interest.</param>
            <param name="diagramClientView">The view that the EventArgs is originating from.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs.DiagramItem">
            <summary>
            Gets the DiagramItem of interest.
            </summary>
            <value>The DiagramItem of interest.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs">
            <summary>
            Paint arguments
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs.#ctor">
            <summary>
            Initializes a new instance of the DiagramPaintEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Boolean)">
            <summary>
            Initializes a new instance of the DiagramPaintEventArgs class.
            </summary>
            <param name="graphics">The Graphics object used to paint.</param>
            <param name="clipRectangle">The clipping region in device units</param>
            <param name="diagramClientView">The view that the Graphics object belongs to. This may be null if the Graphics object does not belong to one.</param>
            <param name="paintChildShapes">A value indicating whether the child shapes should be painted.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs.ClipRectangle">
            <summary>
            Gets the clipping rectangle in device units
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs.IsPrinting">
            <summary>
            Gets a value indicating whether the diagram is being printed.
            </summary>
            <value>true if the diagram is being printed.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs.Graphics">
            <summary>
            Gets the Graphics object used to paint.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs.PaintChildShapes">
            <summary>
            Gets a value indicating whether the shape paint handlers are expected to 
            paint their child shapes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs.View">
            <summary>
            Gets the view that the Graphics object belongs to.
            This property may return null if the Graphics object 
            does not belong to a DiagramClientView.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs.DeviceToWorld(System.Drawing.Size)">
            <summary>
            Converts a size in device units to world units.
            </summary>
            <param name="deviceSize">Size in device units.</param>
            <returns>Size in world units.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this event has been handled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventHandler">
            <summary>
            Delegate for handling events that require point coordinates, such as a Click event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs">
            <summary>
            Contains event data related to a mouse position.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs.#ctor">
            <summary>
            Initializes a new instance of the DiagramPointEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs.#ctor(System.Int32,System.Int32,Microsoft.VisualStudio.Modeling.Diagrams.PointRelativeTo,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the DiagramPointEventArgs class.
            </summary>
            <param name="x">horizontal mouse position in device units</param>
            <param name="y">vertical mouse position in device units</param>
            <param name="pointRelativeTo">Indicates the point of reference from which the coordinates are relative.</param>
            <param name="diagramClientView">The DiagramClientView that the DiagramPointEventArgs originated from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the DiagramPointEventArgs class.
            </summary>
            <param name="pointArgs">A DiagramPointEventArgs whose data will be used to initialize this instance.</param>
            <param name="diagramClientView">The DiagramClientView that the DiagramPointEventArgs originated from.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs.MousePosition">
            <summary>
            Gets the mouse position in world units relative to the Diagram's top-left corner.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs.DiagramHitTestInfo">
            <summary>
            Gets the hit-test information corresponding to the mouse position.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs.HitDiagramItem">
            <summary>
            Gets the diagram item corresponding to the mouse position.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LeaveShapeEventArgs">
            <summary>
            Contains event data related to the mouse cursor leaving
            a shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LeaveShapeEventArgs.#ctor">
            <summary>
            Initializes a new instance of the LeaveShapeEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LeaveShapeEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the LeaveShapeEventArgs class.
            </summary>
            <param name="shape">The ShapeElement that the mouse cursor left.</param>
            <param name="pointArgs">A DiagramPointEventArgs that will be used to initialize this instance.</param>
            <param name="diagramClientView">The DiagramClientView that the LeaveShapeEventArgs originated from.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LeaveShapeEventArgs.Shape">
            <summary>
            Gets the shape from which the mouse left
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventHandler">
            <summary>
            Delegate for handling mouse events.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs">
            <summary>
            Provides data for the MouseUp, MouseDown, and MouseMove events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs.#ctor">
            <summary>
            Initializes a new instance of the DiagramMouseEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs.#ctor(System.Windows.Forms.MouseEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the DiagramMouseEventArgs class.
            </summary>
            <param name="mouseEventArgs">A MouseEventArgs that will be used to initialize this instance.</param>
            <param name="diagramClientView">The DiagramClientView that the DiagramMouseEventArgs originated from.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs.Button">
            <summary>
            Gets which mouse button was pressed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs.Clicks">
            <summary>
            Gets the number of times the mouse button was pressed and released.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs.Delta">
            <summary>
            Gets a signed count of the number of detents the mouse wheel has 
            rotated. A detent is one notch of the mouse wheel.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs">
            <summary>
            Provides data for the DragDrop, DragEnter, or DragOver event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.#ctor">
            <summary>
            Initializes a new instance of the DiagramDragEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.#ctor(System.Windows.Forms.DragEventArgs,System.Boolean,Microsoft.VisualStudio.Modeling.ElementGroupPrototype,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the DiagramDragEventArgs class.
            </summary>
            <param name="dragEventArgs">The DragEventArgs that will be used to initialize this instance.</param>
            <param name="isDropLocationUserSpecified">A value indicating whether the user specified the drop location.</param>
            <param name="prototype">The ElementGroupPrototype (if any) in the data object.</param>
            <param name="diagramClientView">The DiagramClientView that the DiagramDragEventArgs originated from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.#ctor(System.Windows.Forms.DragEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the DiagramDragEventArgs class.
            </summary>
            <param name="dragEventArgs">The DragEventArgs that will be used to initialize this instance.</param>
            <param name="diagramClientView">The DiagramClientView that the DiagramDragEventArgs originated from.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.IsDropLocationUserSpecified">
            <summary>
            Gets a value indicating whether the drop location was specified by the user, or if it was manufactured.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.AllowedEffect">
            <summary>
            Gets which drag-and-drop operations are allowed by the originator (or source) of the drag event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.Data">
            <summary>
            Gets the IDataObject that contains the data associated with this event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.Effect">
            <summary>
            Gets or sets the target drop effect in a drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.Prototype">
            <summary>
            Gets the element group prototype associated with this drag operation.  This exists within the raw
            data object, but is provided as a separate property so that individual clients
            do not have to deserialize this themselves.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.KeyState">
            <summary>
            Gets the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.
            bit 1: the left mouse button
            bit 2: the right mouse button
            bit 4: the SHIFT key
            bit 8: the CONTROL key
            bit 16: the middle mouse button
            bit 32: the ALT key
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.Control">
            <summary>
            Gets a value indicating whether the Control key is depressed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.Shift">
            <summary>
            Gets a value indicating whether the Shift key is depressed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.Alt">
            <summary>
            Gets a value indicating whether the Alt key is depressed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramDragEventArgs.ComputeEffect(System.Windows.Forms.DragDropEffects)">
            <summary>
            This method returns the single resultant drop effect given the possible effects
            that the drag/drop target can support.  The drag source's allowed effects combined
            with the key states will be used to determine the resultant effect.
            </summary>
            <param name="possibleTargetEffects">All possible effects that the drag/drop target can support.</param>
            <returns>The single resultant effect.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventHandler">
            <summary>
            Delegate for handling keyboard events.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs">
            <summary>
            Provides data for the KeyDown or KeyUp event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs.#ctor">
            <summary>
            Initializes a new instance of the DiagramKeyEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs.#ctor(System.Windows.Forms.KeyEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Initializes a new instance of the DiagramKeyEventArgs class.
            </summary>
            <param name="keyEventArgs">The KeyEventArgs that will be used to initialize this instance.</param>
            <param name="diagramClientView">The DiagramClientView that the DiagramKeyEventArgs originated from.</param>
            <param name="targetItem">The target DiagramItem that the key event is intended for.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs.Alt">
            <summary>
            Gets a value indicating whether the ALT key was pressed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs.Control">
            <summary>
            Gets a value indicating whether the CTRL key was pressed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs.Shift">
            <summary>
            Gets a value indicating whether the SHIFT key was pressed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs.KeyCode">
            <summary>
            Gets the keyboard code for a KeyDown or KeyUp event.
            </summary>
            <value>
            A Keys value that is the key code for the event.
            </value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs.KeyData">
            <summary>
            Gets the key data for a KeyDown or KeyUp event.
            </summary>
            <value>
            A Keys value representing the key code for the key 
            that was pressed, combined with modifier flags that 
            indicate which combination of CTRL, SHIFT, and ALT 
            keys were pressed at the same time.
            </value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs.KeyValue">
            <summary>
            Gets the keyboard value for a KeyDown or KeyUp event.
            </summary>
            <value>
            The integer representation of the KeyData property.
            </value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs.TargetItem">
            <summary>
            Gets or sets the DiagramItem that the key event is intended for.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventHandler">
            <summary>
            Delegate for handling key press events.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs">
            <summary>
            Provides data for the KeyPress event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs.#ctor">
            <summary>
            Initializes a new instance of the DiagramKeyPressEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs.#ctor(System.Windows.Forms.KeyPressEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Initializes a new instance of the DiagramKeyPressEventArgs class.
            </summary>
            <param name="keyPressEventArgs">A KeyPressEventArgs that will be used to initialize this instance.</param>
            <param name="diagramClientView">The DiagramClientView that the DiagramKeyPressEventArgs originated from.</param>
            <param name="targetItem">The target DiagramItem that the key event is originally intended for.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this event has been handled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs.KeyChar">
            <summary>
            Gets the character corresponding to the key pressed.
            </summary>
            <value>
            The ASCII character that is composed. For example, if 
            the user presses the SHIFT + K, this property returns 
            an uppercase K.
            </value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs.TargetItem">
            <summary>
            Gets or sets the DiagramItem that the key event is intended for.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.AbsoluteBoundsChangedEventArgs">
            <summary>
            Old and new bounds values when the AbsoluteBounds property of a shape changes.
            This event originates from the IMS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AbsoluteBoundsChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the AbsoluteBoundsChangedEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AbsoluteBoundsChangedEventArgs.OldAbsoluteBounds">
            <summary>
            The bounds in world units relative to the top-left of the 
            diagram prior to the change in bounds.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AbsoluteBoundsChangedEventArgs.NewAbsoluteBounds">
            <summary>
            The bounds in world units relative to the top-left of the 
            diagram after the change in bounds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AbsoluteBoundsChangedEventArgs.SetEventArgs(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Sets the event data.
            </summary>
            <param name="oldValue">The bounds in world units relative to the top-left of the diagram prior to the change in bounds.</param>
            <param name="newValue">The bounds in world units relative to the top-left of the diagram after the change in bounds.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonEventArgs">
            <summary>
            Event arguments for ToggleButton class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ToggleButtonEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Initializes a new instance of the ToggleButtonEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonEventArgs.#ctor(System.Object,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Initializes a new instance of the ToggleButtonEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this event has been handled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonEventArgs.State">
            <summary>
            Gets or sets a value indicating the toggle state of the button
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonEventArgs.ParentShape">
            <summary>
            Gets the parent shape of the shape field that sent this event
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramAssociationEventArgs">
            <summary>
            Event arguments for diagram - diagram view association events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramAssociationEventArgs.#ctor">
            <summary>
            Default constructor for DiagramAssociationEventArgs
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramAssociationEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramView)">
            <summary>
            Initialize the instance of the DiagramAssociationEventArgs class
            </summary>
            <param name="view"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramAssociationEventArgs.DiagramView">
            <summary>
            Gets or sets the diagram view associated with the diagram
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LostFocusEventArgs">
            <summary>
            Event arguments for the LostFocus event, which originates as a WM_KILLFOCUS message 
            from a System.Windows.Forms.Control.  In addition to the DiagramEventArgs this holds
            the handles of the window getting and the window losing focus.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LostFocusEventArgs.WindowGettingFocus">
            <summary>
            The handle of the window that will get keyboard focus after this event is processed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LostFocusEventArgs.WindowLosingFocus">
            <summary>
            The handle of the window that is losing focus as a result of this event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LostFocusEventArgs.#ctor(System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Constructor takes window identifiers as well as the DiagramClientView.
            </summary>
            <param name="losing">Handle of the window which is losing focus.</param>
            <param name="getting">Handle of the window which is about to get focus.</param>
            <param name="view">The DiagramClientView that is losing focus.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ExpandCollapseDecorator">
            <summary>
            Decorator that manages an expand/collapse button on a NodeShape
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExpandCollapseDecorator.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition)">
            <summary>
            Construct a new ExpandCollapseDecorator.
            </summary>
            <param name="store">Store containing shapes that will host this decorator.</param>
            <param name="field">ShapeField used by the decorator.</param>
            <param name="position">Decorator position.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExpandCollapseDecorator.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Construct a new ExpandCollapseDecorator.
            </summary>
            <param name="store">Store containing shapes that will host this decorator.</param>
            <param name="field">ShapeField used by the decorator.</param>
            <param name="position">Decorator position.</param>
            <param name="offset">
            Offset used to modify the default position of the decorator specified by position.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExpandCollapseDecorator.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition,System.Boolean)">
            <summary>
            Construct a new ExpandCollapseDecorator.
            </summary>
            <param name="store">Store containing shapes that will host this decorator.</param>
            <param name="field">ShapeField used by the decorator.</param>
            <param name="position">Decorator position.</param>
            <param name="canMove">Whether this decorator can be moved.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExpandCollapseDecorator.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Boolean)">
            <summary>
            Construct a new ExpandCollapseDecorator.
            </summary>
            <param name="store">Store containing shapes that will host this decorator.</param>
            <param name="field">ShapeField used by the decorator.</param>
            <param name="position">Decorator position.</param>
            <param name="offset">
            Offset used to modify the default position of the decorator specified by position.
            </param>
            <param name="canMove">Whether this decorator can be moved.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExpandCollapseDecorator.OnExpandCollapseButtonPressed(System.Object,Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonEventArgs)">
            <summary>
            Called when the expand/collapse button is pressed
            </summary>
            <param name="sender"></param>
            <param name="args">Event args</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExpandCollapseDecorator.RepositionHostShape(Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape)">
            <summary>
            Updates the position of the given host shape based on current decorator settings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject">
            <summary>
            Summary description for FieldAccessibleObject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the FieldAccessibleObject class
            </summary>
            <param name="shapeElement">The ShapeElement that contains the ShapeField to represent.</param>
            <param name="shapeField">The ShapeField this object represents.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.Name">
            <summary>
            Gets or sets the object name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.Description">
            <summary>
            Gets a string that describes the visual appearance 
            of the specified object. Not all objects have a description.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.Role">
            <summary>
            Gets the role of this accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="direction">One of the AccessibleNavigation values.</param>
            <returns>An AccessibleObject that represents one of the AccessibleNavigation values.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
            <summary>
            Modifies the selection or moves the keyboard focus of the accessible object.
            </summary>
            <param name="flags">One of the AccessibleSelection values.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.State">
            <summary>
            Gets the state of this accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.Help">
            <summary>
            Gets a description of what the object does or how the object is used.
            </summary>
            <value>A description of what the object does or how the object is used.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.GetHelpTopic(System.String@)">
            <summary>
            Gets an identifier for a Help topic identifier and the path 
            to the Help file associated with this accessible object.
            </summary>
            <param name="fileName">On return, this property contains the path to the Help file associated with this accessible object.</param>
            <returns>An identifier for a Help topic, or -1 if there is no Help topic.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.KeyboardShortcut">
            <summary>
            Gets the shortcut key or access key for the accessible object.
            </summary>
            <value>The shortcut key or access key for the accessible object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object. Not all objects have a default action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FieldAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GenericCoreConnectionType">
            <summary>
            Connection Type that connects any two distinct ShapeElements
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericCoreConnectionType.Instance(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            
            </summary>
            <param name="diagram"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericCoreConnectionType.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Constructor to save the diagram locally
            </summary>
            <param name="diagram"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericCoreConnectionType.IsValidSourceAndTarget(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="targetShapeElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericCoreConnectionType.CanCreateConnection(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.String@)">
            <summary>
            
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="targetShapeElement"></param>
            <param name="connectionWarning"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericCoreConnectionType.CreateConnection(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.PaintFeedbackArgs)">
            <summary>
            Creates the generic link shape and adds to current diagram
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="targetShapeElement"></param>
            <param name="paintFeedbackArgs"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GenericCoreConnectAction">
            <summary>
            Generic connect action for Core design surface that connects two distinct ShapeElements
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericCoreConnectAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Boolean)">
            <summary>
            Constructor to save the diagram locally
            </summary>
            <param name="diagram"></param>
            <param name="permitClick"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericCoreConnectAction.GetConnectionTypes(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Only supports GenericCoreConnectionType
            </summary>
            <param name="sourceShapeElement"></param>
            <param name="targetShapeElement"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IGestureExtensionController">
            <summary>
            Controller for gesture extensions can optionally proffer a linked undo context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IGestureExtensionController.LinkedUndoContext">
            <summary>
            Allow access to the system's linked undo context (if any)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.GestureExtensionController.LinkedUndoContext">
            <summary>
            Allow access to the system's linked undo context (if any)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.GestureExtensionController.MetadataFilter">
            <summary>
            String-based Metadata Key that determines if a particular Exported Type can be imported or not.
            The default CanImport implementation filters imports based on this metadata key.
            The default value of this property is null indicating that no filter will be applied.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.GestureExtensionController.CanImport(System.Lazy{Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IGestureExtension,System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Allow registrar that have a key in their metadata matching the MetadataFilter string to be imported
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext.CurrentSelection">
            <summary>
            Returns the collection of selected elements in the active window.  This could be a document window or tool window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext.CurrentDocumentSelection">
            <summary>
            Returns the collection of selected elements in the active document window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext.SingleSelection">
            <summary>
            Returns the primary selected object in active window.  This could be a document window or tool window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext.SingleDocumentSelection">
            <summary>
            Returns the primary selected object in the active document window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext.DiagramClientView">
            <summary>
            Gets the currently focused DiagramClientView
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext.CurrentContextMenuHost">
            <summary>
            Get the current context menu host
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext.CurrentStore">
            <summary>
            Store associated to the current DocData normally. But other can override it in case of special needs ($$$common Store for instance)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext.DeleteSelectedItems(System.String)">
            <summary>
            Protected method to delete selected items
            </summary>
            <remarks>
            This is used both for Cut/Delete
            </remarks>
            <param name="transactionName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext.CanDeleteSelectedItems">
            <summary>
            Determine whether selected item can be deleted or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext.IsDiagramSelected">
            <summary>
            Determines if the current selection is a diagram
            </summary>
            <returns>
            true: If current selection is a diagram.
            false: If nothing is selected or if selected element is not a diagram
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.ExtensionContextExtensions.GetCurrentSelection``1(Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext)">
            <summary>
            Get the subset of the current selection which is of type T
            </summary>
            <typeparam name="T">A type we look instances of in the selection</typeparam>
            <returns>An enumeration which is a subset of the selected elements of type T</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.ExtensionContextExtensions.GetCurrentDocumentSelection``1(Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext)">
            <summary>
            Get the subset of the current document selection which is of type T
            </summary>
            <typeparam name="T">A type we look instances of in the selection</typeparam>
            <returns>An enumeration which is a subset of the selected elements of type T</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.ExtensionContextExtensions.AtLeastOneSelected``1(Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext)">
            <summary>
            Helper returning true if the selection contains at least an element of type T
            </summary>
            <typeparam name="T">Type of the element</typeparam>
            <param name="command">Dynamic command to enable</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.ExtensionContextExtensions.AtLeastOneSelected``2(Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext)">
            <summary>
            Helper returning true if the selection contains
            at least an element of type T1 or T2.
            </summary>
            <typeparam name="T1">Type of the element to look for</typeparam>
            <typeparam name="T2">Type of the element to look for, alternatively</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.ExtensionContextExtensions.IsSingleSelection(Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext)">
            <summary>
            Returns whether or not there is only one selected item on the active window.  This could be a document or tool window.
            </summary>
            <returns>
            true: if there is exactly one selected item in the active window.
            false: otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.ExtensionContextExtensions.IsSingleDocumentSelection(Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext)">
            <summary>
            Returns whether or not there is only one selected item on the active document.
            </summary>
            <returns>
            true: If there is exactly one selected item in the active document
            false: otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.ExtensionContextExtensions.IsAnyDocumentSelectionUndeletable(Microsoft.VisualStudio.Modeling.Diagrams.ExtensionEnablement.IVsSelectionContext)">
            <summary>
            Returns whether any of the shape items in the selection list cannot be deleted.
            This implementation checks for Compartment and MoveableHostShape shapes.
            </summary>
            <returns>True means that at least one selected shape element cannot be deleted. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost">
            <summary>
            Defines the interface of the geometry's container.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.GeometryStyleSet">
            <summary>
            Gets the style set to use for the geometry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.GeometryBoundingBox">
            <summary>
            Gets the bounding box of the geometry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.GeometryHasShadow">
            <summary>
            Gets a value indicating whether the geometry displays a shadow.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.GeometryHasOutline">
            <summary>
            Gets a value indicating whether the outline of the geometry
            will be drawn.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.GeometryHasFilledBackground">
            <summary>
            Gets a value indicating whether the background of the geometry 
            will be filled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.GeometryOutlinePenId">
            <summary>
            Gets the pen resource id that will be used to
            draw the outline of the geometry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.GeometryBackgroundBrushId">
            <summary>
            Gets the brush resource id that will be used to
            fill the background of the geometry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.UpdateGeometryLuminosity(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Drawing.Pen)">
            <summary>
            Modifies the luminosity of the specified pen.
            </summary>
            <param name="view">The DiagramClientView which may maintain useful highlighting information.</param>
            <param name="pen">The pen whose luminosity is to be updated.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.UpdateGeometryLuminosity(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.Drawing.Brush)">
            <summary>
            Modifies the luminosity of the specified brush.
            </summary>
            <param name="view">The DiagramClientView which may maintain useful highlighting information.</param>
            <param name="brush">The brush whose luminosity is to be updated.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.ExcludeGeometryFromClipRegion(System.Drawing.Graphics,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Excludes from the clipping region this geometry,
            including geometries of descendant IGeometryHost objects. 
            </summary>
            <param name="graphics">
            Graphics object with valid clipping region.
            </param>
            <param name="matrix">
            The matrix used to translate the geometry's graphics path 
            to compensate for the parent-relative location of the geometry's 
            corresponding diagram item.
            </param>
            <param name="perimeter">
            The perimeter path of this geometry (For optimization purposes 
            only; it can be null, in which case it will be recalculated.)
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.TranslateGeometryToAbsoluteBounds(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Translates a rectangle from coordinates relative to the top-left 
            of the IGeometryHost's parent to absolute world coordinates.
            </summary>
            <param name="relativeBounds">
            The bounds of the geometry relative to the top-left of the 
            IGeometryHost's parent to the top-left of the diagram.
            </param>
            <returns>The absolute bounds of the geometry.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost.TranslateGeometryToRelativeBounds(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Translates a rectangle from absolute world coordinates to 
            coordinates relative to the top-left of the IGeometryHost's parent.
            </summary>
            <param name="absoluteBounds">
            The rectangle in world units relative to the Diagram's top-left.
            </param>
            <returns>The rectangle relative to the top-left of the IGeometryHost's parent.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.IBinaryLinkGeometryData">
            <summary>
            Defines the interface of the binary link geometry's container.
            A binary link is characterized by its edge points.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IBinaryLinkGeometryData.GeometryEdgePoints">
            <summary>
            Gets the edge points in world units
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IBinaryLinkGeometryData.GeometryEdgePointsNoJumps">
            <summary>
            Gets the edge points in world units with no jumps
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IBinaryLinkGeometryData.GeometryDecoratorFrom">
            <summary>
            Gets the LinkDecorator at the "from" end of the link.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IBinaryLinkGeometryData.GeometryDecoratorFromSize">
            <summary>
            Gets the LinkDecorator size at the "from" end of the link.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IBinaryLinkGeometryData.GeometryDecoratorTo">
            <summary>
            Gets the LinkDecorator at the "to" end of the link.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IBinaryLinkGeometryData.GeometryDecoratorToSize">
            <summary>
            Gets the LinkDecorator size at the "to" end of the link.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IBinaryLinkGeometryData.GeometryCanManuallyRoute">
            <summary>
            Gets whether or not this BinaryLinkShape can be manually routed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry">
            <summary>
            The base class for all geometries used in the diagram.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.DoPaint(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Draws the geometry and its shadow if it has one.
            </summary>
            <param name = "e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.DoPaintGeometry(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Draws the basic geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.DoPaintSelection(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws a selection typically surrounding the geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="isSelected">true if the geometry should indicate selection.</param>
            <param name="isFocused">true if the geometry should indicate focus.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.DoPaintEmphasis(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Draws visual emphasis on the shape.  This does not indicate selection, it
            only draws the user's attention to this shape when another shape is selected.
            (See ShapeElement.RelatedShapeToEmphasize.)
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.DoPaintResizeFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Draws the resize feedback for the geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="bounds">Bounds to use for the geometry in world units relative to the top-left of the diagram.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.DoPaintShadow(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Draws the geometry's shadow.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.CreateDiagramItem(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Creates a DiagramItem object given an IGeometryHost object.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <returns>The DiagramItem object which represents the IGeometryHost object.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.path">
            <summary>
            Singleton path
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.UninitializedPath">
            <summary>
            get/set the graphics path
            This is a singleton on the geometry class.  Do not dispose.
            Use immediately.  Use GetPathCopy if another path is needed!
            </summary>
            <value>returns a GraphicsPath</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetPath(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Gets the GraphicsPath of the geometry in world units relative to the top-left of the IGeometryHost's parent.
            This is a singleton on the geometry class.  Do not dispose.
            Use immediately.  Use GetPathCopy if another path is needed!
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <returns>The GraphicsPath of the geometry in world units relative to the top-left of the IGeometryHost's parent.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetPathCopy(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Gets an unique copy of the path.  Caller is resposible for disposal.
            </summary>
            <param name="geometryHost">Geometry interface</param>
            <returns>Unique copy of a reset path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetPath(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Gets the GraphicsPath of the geometry in world units relative to the top-left of the IGeometryHost's parent.
            This is a singleton on the geometry.  Do not dispose - this will crash!
            Use immediately.  Use GetPathCopy if another path is needed!
            </summary>
            <param name="boundingBox">The bounding box for the geometry in world units relative to the top-left of the IGeometryHost's parent.</param>
            <returns>The GraphicsPath of the geometry in world units relative to the top-left of the IGeometryHost's parent.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetPerimeterBoundingBox(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Gets the rectangular bounds which encompasses the geometry outline, including the 
            thickness of the outline pen that lies outside of the graphics path used to
            draw the geometry.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <returns>Perimeter bounds in world units, relative to its parent.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetPerimeter(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Gets the graphics path which encompasses the geometry outline, including the 
            thickness of the outline pen that lies outside of the graphics path used to
            draw the geometry.
            This is a singleton on the geometry class.  Do not dispose.
            Use immediately.  Use GetPathCopy if another path is needed!
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <returns>The graphics path encompassing the geometry outline, including the pen thickness.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            </param>
            <returns>true if the given point is within the boundary of the geometry.</returns>
            <remarks>
            The geometry boundary includes the thickness of the outline pen that lies 
            outside of the graphics path used to draw the geometry.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            </param>
            <param name="includeTolerance">
            true if the tolerance around the geometry should be included 
            when determining if the geometry was hit.
            </param>
            <returns>true if the given point is within the boundary of the geometry.</returns>
            <remarks>
            The geometry boundary includes the thickness of the outline pen that lies 
            outside of the graphics path used to draw the geometry.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.DoHitTestSelection(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry's surrounding selection feedback. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            </param>
            <returns>true if the given point is within the boundary of the geometry's surrounding selection feedback.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.DoFoldToShape(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculates the point along the vector which crosses the outline of the geometry.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name = "potentialPoint">The point along the bounding rectangle to be folded in to the perimeter of the geometry.</param>
            <param name = "vectorEndPoint">The endpoint of the vector along which folding to the perimeter must take place.</param>
            <returns>The point along the vector which crosses the outline of the geometry.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.HasShadow(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Returns a value indicating whether the geometry has a shadow.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <returns>true if the geometry has a shadow; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.HasOutline(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Returns a value indicating whether the outline of the geometry
            will be drawn.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <returns>
            true if the outline of the geometry will be drawn; otherwise, false.
            </returns>
            <remarks>
            The outline of the geometry will be drawn with the pen
            specified by OutlinePenId.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.HasFilledBackground(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Returns a value indicating whether the background of the geometry 
            will be filled.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <returns>
            true if the background of the geometry will be filled; otherwise, false.
            </returns>
            <remarks>
            The background of the geometry will be filled with the background
            brush specified by BackgroundBrushId.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.ShadowOffset">
            <summary>
            Gets the shadow offset in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.MaximumShadowOffset">
            <summary>
            Gets the maximum shadow offset allowed in world units.  
            All shadow offsets must be less than this amount.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetOutlinePenId(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Returns the outline pen id to use for drawing the geometry's outline.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetBackgroundBrushId(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Returns the background brush id to use for drawing the geometry's background.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.SelectionBorderThicknessAt100PercentZoom">
            <summary>
            Gets the selection border thickness in world units at 100 percent zoom.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetSelectionBorderThickness(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns the thickness of the selection border region in world units
            for a given view.
            </summary>
            <param name="view">The view the selection is drawn upon.</param>
            <returns>The thickness of the selection border in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetSelectionBorderThickness(System.Drawing.Graphics)">
            <summary>
            Returns the thickness of the selection border region in world units
            for a given Graphics object.  The Graphic's PageScale is used as the assumed zoom factor.
            </summary>
            <returns>The thickness of the selection border in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetSelectionLineOffset(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns the distance in world units between the 
            visible selection line and the outside of the shape.
            </summary>
            <param name="view">The view the selection is drawn upon.</param>
            <returns>The thickness of the selection border in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetSelectionLineWidth(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns the width of the visible selection line in world units.
            </summary>
            <param name="view">The view the selection is drawn upon.</param>
            <returns>The thickness of the selection border in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.GetExtraPenWidth(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Gets the portion of the pen width which draws outside the borders 
            of the geometry; i.e., outside the graphics path used to draw the geometry.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <returns>
            The portion of the pen width in world units which draws 
            outside the borders of the geometry.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.Translate(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD[])">
            <summary>
            Summary description for ShapeGeometry.Translate()
            Translate an array of points by a delta
            </summary>
            <returns>void</returns>
            <param name = "delta">Defines the distance to move the points</param>
            <param name = "points">Array of points to translate</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.Rotate(Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Double,Microsoft.VisualStudio.Modeling.Diagrams.PointD[])">
            <summary>
            Summary description for ShapeGeometry.Rotate()
            Rotate an arry of points through an angle about a center point
            </summary>
            <returns> void </returns>
            <param name = "center"> Defines the center point to rotate about</param>
            <param name = "angleRadians"> Angle (in radians) to rotate</param>
            <param name = "points"> Points to rotate</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometry.SnapToCircle(Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Double,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Summary description for ShapeGeometry.SnapToCircle()
            Snap a potential point from the bounding box to the perimeter of a circle along a vector
            </summary>
            <returns> PointD </returns>
            <param name = "center">Defines the center of the circle</param>
            <param name = "radius">Defines the radius of the circle</param>
            <param name = "potentialPoint">Point containing the xy along the bounding rectangle to be folded in to the perimeter of the geometry</param>
            <param name = "vectorEndpoint">Point defining the endpoint of the vector along which folding to the perimeter must take place</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry">
            <summary>
            Base geometry for NodeShapes.  
            </summary>
            <remarks>
            The object that implements IGeometryHost should also implement INodeGeometryData.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.#ctor">
            <summary>
            Initializes a new instance of the NodeShapeGeometry class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.DoPaintGeometry(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Draws the basic geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.DoPaintResizeFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Draws the resize feedback for the geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="bounds">Bounds to use for the geometry in world units relative to the top-left of the diagram.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.DoHitTestSelection(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry's surrounding selection feedback. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            </param>
            <returns>true if the given point is within the boundary of the geometry's surrounding selection feedback.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.CanResize(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Gets a value indicating whether the user can resize this geometry.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <returns>true if the user can resize this geometry; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.IsGrabHandleSupported(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle)">
            <summary>
            Returns true if the grab handle is supported.
            </summary>
            <param name="geometryHost"></param>
            <param name="grabHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.Contains(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Gets a value indicating whether the point is within the geometry outline.
            The geometry outline is defined by the graphics path used to draw the geometry.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="point">Point in world coordinates relative to the Diagram's top-left.</param>
            <param name = "hitTestInfo">The object which will be updated with the hit test results.</param>
            <returns>Returns true if the point is within the geometry's outline.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.DoPaintEmphasis(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Draws visual emphasis on the shape.  This does not indicate selection, it
            only draws the user's attention to this shape when another shape is selected.
            (See ShapeElement.RelatedShapeToEmphasize.)
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.DoPaintSelection(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws a selection typically surrounding the geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="isSelected">true if the geometry should indicate selection.</param>
            <param name="isFocused">true if the geometry should indicate focus.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.GetFocusIndicatorInsideMargin(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Gets the distance in world units from the bounding box of the 
            shape to the focus indicator drawn within the shape's bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.DrawResizeableGrabHandles(System.Drawing.Graphics,Microsoft.VisualStudio.Modeling.Diagrams.StyleSet,System.Drawing.RectangleF,System.Drawing.SizeF,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws resizeable grab handles on a shape.  The grab handles also indicate focus.
            </summary>
            <param name="g"></param>
            <param name="styleSet"></param>
            <param name="innerSelectionRectangle"></param>
            <param name="selectionThickness"></param>
            <param name="isPrimary"></param>
            <param name="canResizeLeft"></param>
            <param name="canResizeTop"></param>
            <param name="canResizeRight"></param>
            <param name="canResizeBottom"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            </param>
            <param name = "includeTolerance">true to include tolerance in the HitTest calculation; false to exclude tolerance.</param>
            <returns>true if the given point is within the boundary of the geometry.</returns>
            <remarks>
            The geometry boundary includes the thickness of the outline pen that lies 
            outside of the graphics path used to draw the geometry.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeGeometry.DoFoldToShape(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculates the point along the vector which crosses the outline of the geometry.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name = "potentialPoint">The point along the bounding rectangle to be folded in to the perimeter of the geometry.</param>
            <param name = "vectorEndPoint">The endpoint of the vector along which folding to the perimeter must take place.</param>
            <returns>The point along the vector which crosses the outline of the geometry.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.RectangleShapeGeometry">
            <summary>
            Encapsulates drawing, folding, and hit testing a Rectangle on the design surface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleShapeGeometry.#ctor">
            <summary>
            Initializes a new instance of the RectangleShapeGeometry class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleShapeGeometry.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            This argument may be null in which case it is ignored.
            </param>
            <param name = "includeTolerance">true to include tolerance in the HitTest calculation; false to exclude tolerance.</param>
            <returns>true if the given point is within the boundary of the geometry.</returns>
            <remarks>
            The geometry boundary includes the thickness of the outline pen that lies 
            outside of the graphics path used to draw the geometry.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleShapeGeometry.DoFoldToShape(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculates the point along the vector which crosses the outline of the geometry.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name = "potentialPoint">The point along the bounding rectangle to be folded in to the perimeter of the geometry.</param>
            <param name = "vectorEndPoint">The endpoint of the vector along which folding to the perimeter must take place.</param>
            <returns>The point along the vector which crosses the outline of the geometry.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.RoundedRectangleShapeGeometry">
            <summary>
            Summary description for RoundedRectangleShapeGeometry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RoundedRectangleShapeGeometry.Radius">
            <summary>
            Gets the radius of the rounded corners in world units.
            </summary>
            <value>The radius of the rounded corners in world units.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RoundedRectangleShapeGeometry.#ctor">
            <summary>
            Initializes a new instance of the RoundedRectangleShapeGeometry class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RoundedRectangleShapeGeometry.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the RoundedRectangleShapeGeometry class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RoundedRectangleShapeGeometry.GetPath(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Gets the GraphicsPath of the geometry.
            This is a singleton on the geometry class.  Do not dispose.
            Use immediately.  Use GetPathCopy if another path is needed!
            </summary>
            <param name="boundingBox">The bounding box to use for the geometry.</param>
            <returns>The GraphicsPath of the geometry.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RoundedRectangleShapeGeometry.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            This argument may be null in which case it is ignored.
            </param>
            <param name = "includeTolerance">true to include tolerance in the HitTest calculation; false to exclude tolerance.</param>
            <returns>true if the given point is within the boundary of the geometry.</returns>
            <remarks>
            The geometry boundary includes the thickness of the outline pen that lies 
            outside of the graphics path used to draw the geometry.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.EllipseShapeGeometry">
            <summary>
            Summary description for EllipseShapeGeometry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EllipseShapeGeometry.#ctor">
            <summary>
            Initializes a new instance of the EllipseShapeGeometry class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EllipseShapeGeometry.GetPath(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Gets the GraphicsPath of the geometry.
            This is a singleton on the geometry class.  Do not dispose.
            Use immediately.  Use GetPathCopy if another path is needed!
            </summary>
            <param name="boundingBox">The bounding box for the geometry.</param>
            <returns>The GraphicsPath of the geometry.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EllipseShapeGeometry.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            This argument may be null in which case it is ignored.
            </param>
            <param name = "includeTolerance">true to include tolerance in the HitTest calculation; false to exclude tolerance.</param>
            <returns>true if the given point is within the boundary of the geometry.</returns>
            <remarks>
            The geometry boundary includes the thickness of the outline pen that lies 
            outside of the graphics path used to draw the geometry.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EllipseShapeGeometry.DoFoldToShape(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculates the point along the vector which crosses the outline of the geometry.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name = "potentialPoint">The point along the bounding rectangle to be folded in to the perimeter of the geometry.</param>
            <param name = "vectorEndPoint">The endpoint of the vector along which folding to the perimeter must take place.</param>
            <returns>The point along the vector which crosses the outline of the geometry.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CircleShapeGeometry">
            <summary>
            Summary description for CircleShapeGeometry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CircleShapeGeometry.#ctor">
            <summary>
            Initializes a new instance of the CircleShapeGeometry class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CircleShapeGeometry.GetPath(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Gets the GraphicsPath of the geometry.
            This is a singleton on the geometry class.  Do not dispose.
            Use immediately.  Use GetPathCopy if another path is needed!
            </summary>
            <param name="boundingBox">The bounding box for the geometry.</param>
            <returns>The GraphicsPath of the geometry.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CircleShapeGeometry.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            This argument may be null in which case it is ignored.
            </param>
            <param name = "includeTolerance">true to include tolerance in the HitTest calculation; false to exclude tolerance.</param>
            <returns>true if the given point is within the boundary of the geometry.</returns>
            <remarks>
            The geometry boundary includes the thickness of the outline pen that lies 
            outside of the graphics path used to draw the geometry.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CircleShapeGeometry.DoFoldToShape(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculates the point along the vector which crosses the outline of the geometry.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name = "potentialPoint">The point along the bounding rectangle to be folded in to the perimeter of the geometry.</param>
            <param name = "vectorEndPoint">The endpoint of the vector along which folding to the perimeter must take place.</param>
            <returns>The point along the vector which crosses the outline of the geometry.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry">
            <summary>
            Encapsulates drawing, folding, and hit testing a link geometry on the design surface
            </summary>
            <remarks>
            The object that implements IGeometryHost should also implement IBinaryLinkGeometryData.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.#ctor">
            <summary>
            Initializes a new instance of the LinkShapeGeometry class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.DoPaintResizeFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Draws the resize feedback for the geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="bounds">Bounds to use for the geometry in world units relative to the top-left of the diagram.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.AddLineArcPath(System.Drawing.Drawing2D.GraphicsPath,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Adds a jump-over arc to the specified GraphicsPath.
            </summary>
            <param name="path">The path to add the arc to.</param>
            <param name="pt1">Start point.</param>
            <param name="pt2">End point.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.GetPath(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Gets the GraphicsPath describing the geometry.  This returns a rectangle path by default.
            This is a singleton on the geometry.  Do not dispose.
            This is a singleton on the geometry class.  Do not dispose.
            Use immediately.  Use GetPathCopy if another path is needed!
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.CalculateRotationAngle(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculates the rotation angle of a link shape's decorator.
            </summary>
            <param name="pt1">The endpoint of the line that contains the decorator.</param>
            <param name="pt2">The other endpoint of the line.</param>
            <returns>The rotation angle of a link shape's decorator.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.DrawDecorator(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,System.Single,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator,Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Draws the LinkShape's decorator.
            </summary>
            <param name="e">A DiagramPaintEventArgs containing paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="rotation">The angle (extent) of the clockwise rotation around the point specified by centerRight</param>
            <param name="centerRight">The point that represents the center of the rotation.</param>
            <param name="decorator">The LinkDecorator to draw.</param>
            <param name="geometrySize">The geometry size of the shape to draw</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.DoPaintGeometry(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Draws the basic geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.DoPaintSelection(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws a selection typically surrounding the geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="isSelected">true if the geometry should indicate selection.</param>
            <param name="isFocused">true if the geometry should indicate focus.</param>
            <param name="isPrimary">true if the geometry should indicate that this is the primary item in the selection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.DoPaintEmphasis(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Draws visual emphasis on the shape.  This does not indicate selection, it
            only draws the user's attention to this shape when another shape is selected.
            (See ShapeElement.RelatedShapeToEmphasize.)
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.GetOutlinePath(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Gets the GraphicsPath for an outline around this link shape.  This is intended for
            drawing the selection and focus of a line.
            </summary>
            <param name="geometryHost">The parent of the geometry.</param>
            <param name="outlineOffset">The spacing between the line and the outline in world units.  The line's pen width and the outline's pen width will be taken into account.</param>
            <param name="excludeDecorators">
            A value indicating whether the outline should not include the decorators.
            </param>
            <param name="addSpacingAtLineEnds">
            A value indicating whether to include spacing between the line ends and the outline.
            </param>
            <returns>The GraphicsPath for an outline around this link shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.CreateDiagramItem(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment)">
            <summary>
            Creates a DiagramItem object given an IGeometryHost object.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="segment">line segment within the LinkShape that was hit.</param>
            <returns>The DiagramItem object which represents the IGeometryHost object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            This argument may be null in which case it is ignored.
            </param>
            <param name="includeTolerance">
            true if the tolerance around the geometry should be included 
            when determining if the geometry was hit.
            </param>
            <returns>true if the given point is within the boundary of the geometry.</returns>
            <remarks>
            The geometry boundary includes the thickness of the outline pen that lies 
            outside of the graphics path used to draw the geometry.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.DoHitTestSelection(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry's surrounding selection feedback. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            This argument may be null in which case it is ignored.
            </param>
            <returns>true if the given point is within the boundary of the geometry's surrounding selection feedback.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeGeometry.DoFoldToShape(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculates the point along the vector which crosses the outline of the geometry.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name = "potentialPoint">The point along the bounding rectangle to be folded in to the perimeter of the geometry.</param>
            <param name = "vectorEndPoint">The endpoint of the vector along which folding to the perimeter must take place.</param>
            <returns>The point along the vector which crosses the outline of the geometry.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeGeometry">
            <summary>
            class BinaryLinkShapeGeometry
            Encapsulate drawing, folding, and hit testing a BinaryLink on the design surface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeGeometry.#ctor">
            <summary>
            Initializes a new instance of the BinaryLinkShapeGeometry class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeGeometry.DoPaintGeometry(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Draws the basic geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeGeometry">
            <summary>
            Encapsulates drawing, folding, and hit testing a Swimlane on the design surface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeGeometry.#ctor">
            <summary>
            Initializes a new instance of the RectangleShapeGeometry class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeGeometry.DoPaintGeometry(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Draws the basic geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeGeometry.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo,System.Boolean)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            This argument may be null in which case it is ignored.
            </param>
            <param name = "includeTolerance">true to include tolerance in the HitTest calculation; false to exclude tolerance.</param>
            <returns>true if the given point is within the boundary of the geometry.</returns>
            <remarks>
            The geometry boundary includes the thickness of the outline pen that lies 
            outside of the graphics path used to draw the geometry.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeGeometry.DoHitTestSelection(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Returns a value indicating whether the given point is within the boundary 
            of the geometry's surrounding selection feedback. The hit test results are also returned.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            </param>
            <returns>true if the given point is within the boundary of the geometry's surrounding selection feedback.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeGeometry.HitTestGrabHandle(Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Tests whether or not the mouse point hit on the grab handle for the Swimlane.
            </summary>
            <param name="geometryHost">The instance data for the geometry.</param>
            <param name="hitPoint">
            The point to test. The point is in world units and is relative to 
            the top-left of the IGeometryHost's parent.
            </param>
            <param name = "hitTestInfo">
            The object which will be updated with the hit test results. 
            </param>
            <returns>true if the given point is within the grab handle of the swimlane.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometries">
            <summary>
            Static class to expose instances of public ShapeGeometry objects
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometries.Rectangle">
            <summary>
            Returns a RectangleShapeGeometry instance
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometries.RoundedRectangle">
            <summary>
            Returns a RoundedRectangleShapeGeometry instance
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometries.Ellipse">
            <summary>
            Returns an EllipseShapeGeometry instance
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometries.Circle">
            <summary>
            Returns a CircleShapeGeometry instance
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometries.BinaryLink">
            <summary>
            Returns a BinaryLinkShapeGeometry instance
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeGeometries.Swimlane">
            <summary>
            Returns a SwimLaneShapeGeometry instance
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramShapeGeometry">
            <summary>
            Summary description for DiagramShapeGeometry.
            Provide an internal general purpose sealed singleton instance
            of a NodeShapeGeometry class that is used by the Diagram Object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramShapeGeometry.DoPaintGeometry(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Draws the basic geometry.
            </summary>
            <param name="e">The DiagramPaintEventArgs that contains paint event data.</param>
            <param name="geometryHost">The instance data for the geometry.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LuminosityHelper">
            <summary>
            Helper class that deals with changing Luminosity on specific types of
            graphics objects, like Pens, Brushes, etc.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LuminosityHelper.UpdateLuminosity(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Drawing.Pen)">
            <summary>
            Updates the pen's luminosity if needed.
            </summary>
            <param name="view">current view.</param>
            <param name="shape">shape that we're working on.</param>
            <param name="pen">pen to change.</param>
            <returns>Old color to allow reset</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LuminosityHelper.UpdateLuminosity(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Drawing.Brush)">
            <summary>
            Updates the brush's luminosity if needed.  Switches between different types of brushes.
            </summary>
            <param name="view">current view.</param>
            <param name="shape">shape that we're working on.</param>
            <param name="brush">brush to change.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LuminosityHelper.UpdateLuminosity(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Drawing.SolidBrush)">
            <summary>
            Updates a SolidBrush's luminosity if needed.
            </summary>
            <param name="view">current view.</param>
            <param name="shape">shape that we're working on.</param>
            <param name="brush">brush to change.</param>
            <returns>Old color</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LuminosityHelper.UpdateColorList(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Drawing.Color[])">
            <summary>
            Updates a Color list's luminosity if needed.
            </summary>
            <param name="view">current view.</param>
            <param name="shape">shape that we're working on.</param>
            <param name="colors">color list to change.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LuminosityHelper.UpdateLuminosity(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Drawing.Drawing2D.LinearGradientBrush)">
            <summary>
            Updates a LinearGradientBrush's luminosity if needed.
            Note: Since the CDS does not handle caching gradient brushes, we do not
            need to return anything interesting in color right now.  This will need to be
            enhanced when that condition changes or the underlying style will be altered.
            </summary>
            <param name="view">current view.</param>
            <param name="shape">shape that we're working on.</param>
            <param name="brush">brush to change.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LuminosityHelper.UpdateLuminosity(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Drawing.Drawing2D.PathGradientBrush)">
            <summary>
            Updates a PathGradientBrush's luminosity if needed.
            Note: Since the CDS does not handle caching gradient brushes, we do not
            need to return anything interesting in color right now.  This will need to be
            enhanced when that condition changes or the underlying style will be altered.
            </summary>
            <param name="view">current view.</param>
            <param name="shape">shape that we're working on.</param>
            <param name="brush">brush to change.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineD.GetFoldPoint(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Draw a perpendicular segment from parameter onto the line.
            FoldPoint is the point where the segment intersects the line.
            </summary>
            <remarks>
            There is always one and exactly one foldPoint for each line,point combination.
            the foldPoint might be the point parameter itself if the parameter lies on the line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineD.GetPointBetweenTwoPoints(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Double)">
            <summary>
            Consider a line going through pointA and pointB parameters.
            This method returns a point that is at distance 'distanceFromA' from pointA going towards pointB
            </summary>		
            <throws>
            ArgumentOutOfRangeException if distanceFromA is negative or is greater than distance between pointA and pointB
            </throws>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineD.TryGetIntersectionPoint(Microsoft.VisualStudio.Modeling.Diagrams.LineD,Microsoft.VisualStudio.Modeling.Diagrams.LineD,Microsoft.VisualStudio.Modeling.Diagrams.PointD@)">
            <summary>
            Try to get intersection point of line1 and line2.	
            </summary>		
            <returns>true if line1 and line2 intersect. false, otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineD.HaveSameSlope(Microsoft.VisualStudio.Modeling.Diagrams.LineD,Microsoft.VisualStudio.Modeling.Diagrams.LineD)">
            <summary>
            Check if line1 and line2 have same slope
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineD.GetX(System.Double)">
            <summary>
            Return a value such that Point(retVal, param y) lies on the line
            </summary>
            <throws>
            InvalidOperationException if line is horizontal.
            </throws>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineD.GetY(System.Double)">
            <summary>
            Return a value such that Point(param x, retVal) lies on the line
            </summary>
            <throws>
            InvalidOperationException if line is vertical
            </throws>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD">
            <summary>
            Stores a set of four doubles that represent the location and size of a rectangle.
            </summary>
            <remarks>
            A rectangle is defined by its width, height, and upper-left corner.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Empty">
            <summary>
            Represents an instance of the RectangleD with its numeric properties initialized to zero.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the RectangleD class with the specified location and size.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Initializes a new instance of the RectangleD class with the specified location and size.
            </summary>
            <param name="location">A PointD that represents the upper-left corner of the rectangular region.</param>
            <param name="size">A SizeF that represents the width and height of the rectangular region.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of this RectangleD structure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Center">
            <summary>
            Gets the coordinates of the center of this RectangleD structure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Size">
            <summary>
            Gets or sets the size of this RectangleD.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this RectangleD structure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this RectangleD structure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Width">
            <summary>
            Gets or sets the width of this RectangleD structure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Height">
            <summary>
            Gets or sets the height of this RectangleD structure.
            </summary>		
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Left">
            <summary>
            Gets the x-coordinate of the left edge of this RectangleD structure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Top">
            <summary>
            Gets the y-coordinate of the top edge of this RectangleD structure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Right">
            <summary>
            Gets the x-coordinate of the right edge of this RectangleD structure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of this RectangleD structure
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.IsEmpty">
            <summary>
            Tests whether all numeric properties of this RectangleD have values of zero.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Equals(System.Object)">
            <summary>
            Overridden. Tests whether obj is a RectangleD with the same location and size of this RectangleD.
            </summary>
            <param name="obj">The Object to test.</param>
            <returns>This method returns true if obj is a RectangleD and its X, Y, Width, and Height properties are equal to the corresponding properties of this RectangleD; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.op_Equality(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Tests whether two RectangleD structures have equal location and size.
            </summary>
            <param name="left">The RectangleD structure that is to the left of the equality operator.</param>
            <param name="right">The RectangleD structure that is to the right of the equality operator.</param>
            <returns>This operator returns true if the two specified RectangleD structures have equal X, Y, Width, and Height properties.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.op_Inequality(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Tests whether two RectangleD structures differ in location or size.
            </summary>
            <param name="left">The RectangleD structure that is to the left of the inequality operator.</param>
            <param name="right">The RectangleD structure that is to the right of the inequality operator</param>
            <returns>This operator returns true if any of the X, Y, Width, or Height properties of the two RectangleD structures are unequal; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.ToString">
            <summary>
            Returns a string formatted like this: X=x, Y=y, Width=width, Height=height
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.ContainsX(System.Double)">
            <summary>
            Determines if the X coordinate is contained within this RectangleD structure.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <returns>This method returns true if the point defined by x and y is contained within this RectangleD structure; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.ContainsY(System.Double)">
            <summary>
            Determines if the Y coordinate is contained within this RectangleD structure.
            </summary>
            <param name="y">The y-coordinate of the point to test</param>
            <returns>This method returns true if the point defined by x and y is contained within this RectangleD structure; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Contains(System.Double,System.Double)">
            <summary>
            Determines if the specified point is contained within this RectangleD structure.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test</param>
            <returns>This method returns true if the point defined by x and y is contained within this RectangleD structure; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Contains(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Determines if the specified point is contained within this RectangleD structure.
            </summary>
            <param name="pt">The PointD to test.</param>
            <returns>This method returns true if the point represented by the pt parameter is contained within this RectangleD structure; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Contains(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Determines if the rectangular region represented by rectangle is entirely contained within this RectangleD structure.
            </summary>
            <param name="rectangle">The RectangleD to test.</param>
            <returns>This method returns true if the rectangular region represented by rectangle is entirely contained within the rectangular region represented by this RectangleD; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.GetHashCode">
            <summary>
            Gets the hash code for this RectangleD structure. For information about the use of hash codes, see Object.GetHashCode.
            </summary>
            <returns>The hash code for this RectangleD.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Inflate(System.Double,System.Double)">
            <summary>
            Inflates this RectangleD structure by the specified amount.
            </summary>
            <param name="x">The amount to inflate this RectangleD structure horizontally.</param>
            <param name="y">The amount to inflate this RectangleD structure vertically.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Inflate(Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Inflates this RectangleF by the specified amount.
            </summary>
            <param name="size">The amount to inflate this rectangle.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Inflate(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,System.Double,System.Double)">
            <summary>
            Creates and returns an inflated copy of the specified RectangleD structure. The copy is inflated by the specified amount. The original rectangle remains unmodified.
            </summary>
            <param name="rectangle">The RectangleD to be copied. This rectangle is not modified.</param>
            <param name="x">The amount to inflate the copy of the rectangle horizontally.</param>
            <param name="y">The amount to inflate the copy of the rectangle vertically.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Intersect(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Replaces this RectangleD structure with the intersection of itself and the specified RectangleD structure.
            </summary>
            <param name="rectangle">The rectangle to intersect.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Intersect(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns a RectangleD structure that represents the intersection of two rectangles. If there is no intersection, null is returned.
            </summary>
            <param name="first">A rectangle to intersect.</param>
            <param name="second">A rectangle to intersect.</param>
            <returns>A third RectangleD structure the size of which represents the overlapped area of the two specified rectangles.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.IntersectsWith(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Determines if this rectangle intersects with rectangle.
            </summary>
            <param name="rectangle">The rectangle to test</param>
            <returns>This method returns true if there is any intersection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Union(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
            <param name="first">A rectangle to union.</param>
            <param name="second">A rectangle to union.</param>
            <returns>A third RectangleD structure that contains both of the two rectangles that form the union.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Offset(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="pos">The amount to offset the location.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.Offset(System.Double,System.Double)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="x">The amount to offset the location horizontally.</param>
            <param name="y">The amount to offset the location vertically.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.op_Implicit(System.Drawing.Rectangle)~Microsoft.VisualStudio.Modeling.Diagrams.RectangleD">
            <summary>
            Converts the specified Rectangle to a RectangleD.
            </summary>
            <param name="value">The Rectangle to convert.</param>
            <returns>The RectangleD.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.op_Implicit(System.Drawing.RectangleF)~Microsoft.VisualStudio.Modeling.Diagrams.RectangleD">
            <summary>
            Converts the specified RectangleF to a RectangleD.
            </summary>
            <param name="value">The Rectangle to convert.</param>
            <returns>The RectangleD.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.ToRectangleF(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Converts the specified RectangleD to a RectangleF.
            </summary>
            <param name="r">The RectangleD to convert.</param>
            <returns>The RectangleF.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.TopLeftCorner">
            <summary>
            Get the (x,y) co-ordinates of the top-left corner.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.TopRightCorner">
            <summary>
            Get the (x,y) co-ordinates of the top-right corner.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.BottomLeftCorner">
            <summary>
            Get the (x,y) co-ordinates of the bottom-left corner.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.BottomRightCorner">
            <summary>
            Get the (x,y) co-ordinates of the bottom-right corner.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.TryGetVectorIntersection(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD@)">
            <summary>
            Calculates the intersection point of rectangle and an indefinitely long directional vector that passes through pointOnVector parameter with slope defined by 
            vectorSlope parameter.
            </summary>
            <param name = "pointOnVector">Point that needs to be snapped onto the rectangle perimeter</param>
            <param name = "vectorSlope">Point defining the slope and direction of the vector along which folding to the perimeter must take place</param>
            <example>
            Assume points A, B on a vector as shown   ---A------B-------->  
            point A would be returned since it is closer to the start of the vector.
            </example>
            <returns>
            Returns a point that lies on the vector as well as the rectangle perimeter.
            If there are two (or more if line overlaps and edge) intersection points, the point which is closer to the source of the vector is chosen and returned.
            If vector overlaps any one of the rectangle edges: pointOnVector argument is returned.
            If vector does not intersect the rectangle: pointOnVector argument is returned.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.GetSnapPoint(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)" -->
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.SetIntersectionPoint(Microsoft.VisualStudio.Modeling.Diagrams.PointD@,Microsoft.VisualStudio.Modeling.Diagrams.PointD@,System.Boolean@,System.Boolean@,System.Double,System.Double)">
            <summary>
            Set (x, y) either to intersectionPoint1 or intersectionPoint2, depending on which of them is unused.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleD.IsBetween(System.Double,System.Double,System.Double)">
            <summary>
            Checks if y is 
            - Between y1 and y2   Or 
            - Equal to either y1 or y2.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.RectangleDConverter">
            <summary>
            Provides a type converter to convert RectangleD objects to and from other representations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleDConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleDConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.RectangleDConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PointD.Subtract(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Translates a PointD by subtracting the given size.
            </summary>
            <param name="point">A PointD to subtract from.</param>
            <param name="size">A SizeD to subtract from point.</param>
            <returns>The translated PointD.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PointD.op_Subtraction(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Translates a PointD by subtracting the given size.
            </summary>
            <param name="point">A PointD to subtract from.</param>
            <param name="size">A SizeD to subtract from point.</param>
            <returns>The translated PointD.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PointD.Add(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Translates a PointD by adding the given size.
            </summary>
            <param name="point">A PointD to add to.</param>
            <param name="size">A SizeD to add to point</param>
            <returns>The translated PointD.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PointD.op_Addition(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Translates a PointD by adding the given size.
            </summary>
            <param name="point">A PointD to add to.</param>
            <param name="size">A SizeD to add to point</param>
            <returns>The translated PointD.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PointD.ToString">
            <summary>
            Returns a string formatted like this: X=x, Y=y
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PointDConverter">
            <summary>
            Provides a type converter to convert PointD objects to and from other representations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PointDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PointDConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PointDConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PointDConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SizeD.ToString">
            <summary>
            Returns a string formatted like this: Width=width, Height=height
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment">
            <summary>
            This class represents that piece of a LinkShape by its two end points.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.StartIndex">
            <summary>
            Get the index of the start point in the LinkShape's edge points.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.EndIndex">
            <summary>
            Get the index of the end point in the LinkShape's edge points.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.IsStartSegment">
            <summary>
            Get whether this is the start segment in the LinkShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.IsEndSegment">
            <summary>
            Get whether this is the end segment in the LinkShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.StartPoint">
            <summary>
            Gets the starting point of the line segment.
            </summary>
            <value>Line segment's starting point.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.StartPointF">
            <summary>
            Gets the starting point of the line segment.
            </summary>
            <value>Line segment's starting point.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.EndPoint">
            <summary>
            Gets the end point of the line segment.
            </summary>
            <value>Line segment's end point.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.EndPointF">
            <summary>
            Gets the end point of the line segment.
            </summary>
            <value>Line segment's end point.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.CenterPoint">
            <summary>
            Get the center point for the line segment.
            </summary>
            <value>Line segment's center point.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.AbsoluteBounds">
            <summary>
            Gets the absolute bounding rectangle represented by this line segment.
            </summary>
            <value>Line segment's absolute bounding rectangle.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.Length">
            <summary>
            Gets the length of the line segment.
            </summary>
            <value>line segment length.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Constructor that takes the two end points
            </summary>
            <param name="point1">segment's starting point.</param>
            <param name="point2">segment's end point.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,System.Int32,System.Int32)">
            <summary>
            Constructor that takes the parent LinkShape and indices for the two end points.
            </summary>
            <param name="linkShape">LinkShape this segment belongs to.</param>
            <param name="indexStart">segment's starting point.</param>
            <param name="indexEnd">segment's end point.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Int32,System.Int32,System.Boolean,System.Boolean,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Constructor that takes the two end points and its segment index.
            </summary>
            <param name="point1">segment's starting point.</param>
            <param name="point2">segment's end point.</param>
            <param name="startIndex">index of the start point of this segment in the full LinkShape.</param>
            <param name="endIndex">index of the end point of this segment in the full LinkShape.</param>
            <param name="isStartSegment">whether or not this is the start segment in the LinkShape.</param>
            <param name="isEndSegment">whether or not this is the end segment in the LinkShape.</param>
            <param name="bounds">bounding rectangle represented by this line segment</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.IsHorizontal">
            <summary>
            Detects whether the segment is horizontal.
            </summary>
            <returns>true means segment is horizontal; false means it's not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.IsVertical">
            <summary>
            Detects whether the segment is vertical
            </summary>
            <returns>true means segment is vertical; false means it's not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.IsStartAboveEnd">
            <summary>
            Detects whether the starting point of the segment is above the end point.
            </summary>
            <returns>true means start point is above end point; false means it's not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.IsStartLeftOfEnd">
            <summary>
            Detects whether the starting point of the segment is left of the end point.
            </summary>
            <returns>true means starting point is to the left of the end point;
            false means it's not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.GetAccessibilityObject(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Gets the AccessibleObject assigned to the line segment.
            </summary>
            <param name="parentShape">The LinkShape that contains this line segment.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.GetAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns the accessible name.
            </summary>
            <param name="parentShape">The LinkShape that contains this LineSegment.</param>
            <param name="view">Current view for the shape..</param>
            <returns>The accessible name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.GetAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape)">
            <summary>
            Returns the accessible description.
            </summary>
            <param name="parentShape">The LinkShape that contains this LineSegment.</param>
            <returns>The accessible description.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.GetAccessibleHelp(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape)">
            <summary>
            Gets a description of what the object does or how the object is used.
            </summary>
            <value>A description of what the object does or how the object is used.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.GetAccessibleHelpTopicId(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape)">
            <summary>
            Gets an identifier for a Help topic identifier 
            associated with this accessible object.
            </summary>
            <returns>An identifier for a Help topic, or -1 if there is no Help topic.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.GetAccessibleHelpTopicFileName(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape)">
             <summary>
             Gets the path to the Help file associated with this accessible object.
             </summary>
             <returns>
             The path to the Help file associated with this accessible object.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.GetAccessibleRole(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape)">
            <summary>
            Retrieves the accessible role of this LineSegment.
            </summary>
            <param name="parentShape">The LinkShape that contains this LineSegment.</param>
            <returns>The AccessibleRole of this LineSegment.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.GetAccessibleState(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Retrieves the accessible state of this LineSegment.
            </summary>
            <param name="parentShape">The LinkShape that contains this LineSegment.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
            <returns>The AccessibleState of this LineSegment.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.GetSelectable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns a value indicating whether this segment is selectable.
            </summary>
            <param name="parentShape">The link shape to which this segment belongs.</param>
            <returns>true if this segment is selectable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.GetFocusable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns a value indicating whether this segment is focusable.
            </summary>
            <param name="parentShape">The shape to which this segment belongs.</param>
            <returns>true if this segment is focusable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.Equals(System.Object)">
            <summary>
            Gets a value indicating whether two LineSegment objects are equal.
            </summary>
            <param name="obj">The LineSegment that is compared with this LineSegment.</param>
            <returns>true if the LineSegment objects are equal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegment.GetHashCode">
            <summary>
            Gets a hash code for this LineSegment.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CircleD.GetLineCircleIntersection(Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Double,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Finds intersection point of line and circle. The point closes to origin of vector is chosen.
            </summary>
            <remarks>
            To find the solution ths function solves the system of equations:
            	(x - p0.x)^2 + (y - p0.y)^2 = r^2
            	(x - p1.x)/v.x = (y - p1.y)/v.y
            where (x,y) is the point we seek and other variables are defined as follows.
            </remarks>
            <param name="circleCenter">Circle center.</param>
            <param name="radius">Circle radius.</param>
            <param name="pointOnLine">Potential point. (A point on the line)</param>
            <param name="vectorEndPoint">Folding vector (gives slope of the Line and the direction)</param>		
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CircleD.PointIsOutsideCircle(Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Double,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Determine if point is outside the circle
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Modeling.Diagrams.CircleD.GetSnapPoint(Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Double,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)" -->
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GhostShape">
            <summary>
            Describes a ShapeElement 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShape.#ctor(System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,System.Guid,System.Double)">
            <summary>
            Initializes a new instance of the GhostShape class.
            </summary>
            <param name="sourceId">The Guid of the ShapeElement that the ghost shape represents. This can be Guid.Empty if it does not represent an existing shape instance.</param>
            <param name="sourceAbsoluteBoundingBox">
            The original bounding box of the ShapeElement 
            in world units relative to the top-left of the diagram.
            </param>
            <param name="sourceParentId">The Guid of the parent ShapeElement. This can be Guid.Empty if there is no existing ShapeElement parent.</param>
            <param name="sourceGridSize">The grid size that the ShapeElement is on.  This can be zero, in which case there is no grid.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShape.SourceId">
            <summary>
            Gets the Guid of the source shape element. This can return Guid.Empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShape.SourceAbsoluteBoundingBox">
            <summary>
            Gets the original bounding box of the shape in 
            world units relative to the top-left of the diagram.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShape.AbsoluteBoundingBox">
            <summary>
            Gets or sets the current bounding box of the shape in 
            world units relative to the top-left of the diagram.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShape.SourceParentId">
            <summary>
            Gets the Guid of the source parent shape element. This can return Guid.Empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShape.SourceGridSize">
            <summary>
            Gets the grid size that the source shape was respecting.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShape.ResetToInitialSourceValues">
            <summary>
            Resets all properties to their source values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShape.Associate(Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection)">
            <summary>
            Add a reference from this ghost shape instance to the collection it belongs to.
            This is primarily to get the collection's Offset so the absolute bounding box
            of this ghost shape can be computed correctly.
            </summary>
            <param name="collection">The collection the ghost shape belongs to.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection">
            <summary>
            A collection of GhostShapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the GhostShapeCollection class.
            </summary>
            <param name="sourceStoreId">The Guid of the store from which the ShapeElements originated. The value Guid.Empty can be used if there is no source store.</param>
            <param name="sourceDiagramId">The Guid of the diagram from which the ShapeElements originated. The value Guid.Empty can be used if there is no source store.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the GhostShapeCollection class.
            This is used for deserialization.
            </summary>
            <param name="info">The SerializationInfo that contains the serialized data with which to initialize this instance.</param>
            <param name="context">The destination (see StreamingContext) for this serialization.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize this object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination (see StreamingContext) for this serialization.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.ParentIds">
            <summary>
            Gets an array of parent Guids in the ghost shape collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.Add(Microsoft.VisualStudio.Modeling.Diagrams.GhostShape)">
            <summary>
            Adds a GhostShape object to the collection.
            </summary>
            <param name="ghostShape">The GhostShape object to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.Offset(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Offsets the current location of each ghost shape by 
            the specified delta.
            </summary>
            <param name="delta">
            The amount in world units by which to
            offset each ghost shape's location.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.LocationDelta">
            <summary>
            Gets the delta between the current and initial location of the ghost shape collection as a whole.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.AbsoluteBoundingBox">
            <summary>
            Gets the current bounding rectangle surrounding all 
            GhostShapes in the collection.  The rectangle is in world  
            units relative to the diagram's top-left.
            </summary>
            <returns>
            The current bounding rectangle surrounding all GhostShapes in the collection.
            </returns>
            <remarks>
            The coordinate system increases positively down and to the right.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.Find(System.Guid)">
            <summary>
            Gets the GhostShape given the source ShapeElement guid.
            </summary>
            <param name="sourceId">The Guid of the source ShapeElement to find.</param>
            <returns>The GhostShape.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.PrimaryGhostShape">
            <summary>
            Gets the primary ghost shape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.SourceProcessId">
            <summary>
            Gets the source process id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.SourceStoreId">
            <summary>
            Gets the source store id. This can return Guid.Empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.SourceDiagramId">
            <summary>
            Gets the source diagram id. This can return Guid.Empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.AreSiblings">
            <summary>
            Are the members of this collection all siblings?
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.CalculateBoundingBox">
            <summary>
            Calculates the bounding rectangle surrounding all 
            GhostShapes in the collection.  The rectangle is in world  
            units relative to the diagram's top-left.
            </summary>
            <returns>The bounding rectangle surrounding all GhostShapes in the collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.ResetAbsoluteBoundingBox">
            <summary>
            Forces a recalculation of the current absolute bounding box
            that surrounds all the ghost shapes in this collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.ResetToInitialSourceValues">
            <summary>
            Resets all ghost shapes to their source values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.GhostShapeOffset">
            <summary>
            Gets the offset that is applied to each GhostShape
            in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.GridSize">
            <summary>
            Gets the grid size for the ghost shape collection as a whole.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.Count">
            <summary>
            Gets the number of GhostShapes in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the GhostShapes to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the GhostShapes copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.CopyTo(Microsoft.VisualStudio.Modeling.Diagrams.GhostShape[],System.Int32)">
            <summary>
            Copies the GhostShapes to a GhostShape[] array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional GhostShape[] array that is the destination of the GhostShapes copied from the collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the GhostShape collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the GhostShape collection.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.HighlightedShapesCollection">
            <summary>
            Collection of shapes and DiagramItems that are highlighted on the design surface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HighlightedShapesCollection.#ctor">
            <summary>
            Initializes a new instance of the HighlightedShapesCollection class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HighlightedShapesCollection.Add(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Adds a DiagramItem to the current highlight list.
            </summary>
            <param name="diagramItem">The DiagramItem to add to the current highlight list.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HighlightedShapesCollection.Remove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Removes a DiagramItem from the current highlight list.
            </summary>
            <param name="diagramItem">The DiagramItem to remove from the current highlight list.</param>
            <remarks>
            If a DiagramItem does not exist in the highlight list, the DiagramItem is ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HighlightedShapesCollection.Set(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Replaces the current highlight list with a new single highlight.
            </summary>
            <param name="diagramItem">The DiagramItem that is to replace the current highlight list.</param>
            <remarks>
            If the DiagramItem is null, then the highlight list is cleared.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HighlightedShapesCollection.Add(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection)">
            <summary>
            Adds the specified DiagramItems to the current highlight list.
            </summary>
            <remarks>
            If a DiagramItem in the collection is already in the highlight list,
            the DiagramItem is ignored.
            </remarks>
            <param name="diagramItems">The collection of DiagramItems to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HighlightedShapesCollection.Remove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection)">
            <summary>
            Removes the specified DiagramItems from the current highlight list.
            </summary>
            <remarks>
            If a DiagramItem does not exist in the highlight list, the DiagramItem
            is ignored.
            </remarks>
            <param name="diagramItems">The collection of DiagramItems to remove</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HighlightedShapesCollection.Set(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection)">
            <summary>
            Replaces the current highlight list with a new highlight list.
            </summary>
            <param name="diagramItems">The collection of DiagramItems that is to replace the current highlight list.</param>
            <remarks>
            If the DiagramItemCollection is null, then the highlight list is cleared.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HighlightedShapesCollection.Clear">
            <summary>
            Clears the current highlight list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HighlightedShapesCollection.GetDiagramItemsContainingShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a collection of diagram items in the highlight list 
            whose Shape property is the specified shape.
            </summary>
            <param name="shape">The shape to find.</param>
            <returns>A collection of diagram items in the highlight list whose Shape property is the specified shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HighlightedShapesCollection.Invalidate">
            <summary>
            Invalidates the current highlight list of ShapeElements
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide">
            <summary>
            The grab handle location
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide.Invalid">
            <summary>
            Invalid grab handle.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide.Top">
            <summary>
            Grab handle at the top of the shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide.TopRight">
            <summary>
            Grab handle at the top-right of the shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide.Right">
            <summary>
            Grab handle at the right of the shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide.BottomRight">
            <summary>
            Grab handle at the bottom-right of the shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide.Bottom">
            <summary>
            Grab handle at the bottom of the shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide.BottomLeft">
            <summary>
            Grab handle at the bottom-left of the shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide.Left">
            <summary>
            Grab handle at the left of the shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide.TopLeft">
            <summary>
            Grab handle at the top-left of the shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.#ctor">
            <summary>
            Initializes a new instance of the GrabHandle class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.ShapeSide)">
            <summary>Function name: GrabHandle
            Description: 
             </summary>
             <returns> </returns>
             <param name = "id">int id</param>
             
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.GrabHandleCornerSize">
            <summary>
            The width and height of the corner grab handle square.
            The size is in device units
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GrabHandle.Side">
            <summary>
            Gets the side of the shape that this grab handle is on.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageHelper.GetImage(System.Type,System.String)">
            <summary>
            Gets an image from a resource
            </summary>
            <param name="type">A type in the assembly to read resource from</param>
            <param name="resourceName">name of the metafile resource</param>
            <returns>image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageHelper.GetImage(System.Byte[])">
            <summary>
            Gets an image from and array of bytes
            </summary>
            <param name="imageData">An array of bytes containing the image</param>
            <returns>image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageHelper.GetImage(System.Drawing.Image)">
            <summary>
            Provided for uniformity
            </summary>
            <param name="resourceImage">A Bitmap, Metafile, or other Image</param>
            <returns>image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageHelper.GetImage(System.Object)">
            <summary>
            Determine the type of image and return it as Image
            </summary>
            <param name="unknownType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageHelper.GetImageSize(System.Drawing.Image)">
            <summary>
            Gets the size of the image in world units.
            </summary>
            <param name="image">The image to query for its size.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeGeometry">
            <summary>
            Encapsulates drawing, folding, and hit testing a shape based on an external image on the design surface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeGeometry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MetafileShapeGeometry class from a direct path to an image
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeGeometry.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the MetafileShapeGeometry class from an Image
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeGeometry.DoPaintGeometry(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost)">
            <summary>
            Paint the image shape
            </summary>
            <param name="e"></param>
            <param name="geometryHost"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor">
            <remarks>
            A singleton in-place editor
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.BeginEdit">
            <summary>
            Event fired when in-place editing begins.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.EndEdit">
            <summary>
            Event fired when in-place editing is finished.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.#ctor">
            <summary>
            Initializes a new instance of the InPlaceTextEditor class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.Instance">
            <summary>
            Gets the singleton InPlaceTextEditor instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.CommitOnEscape">
            <summary>
            Gets or sets a value indicating whether the Escape key commits the edit.
            If true, the Enter key will be used as a CRLF for in-place editing.
            </summary>
            <value>true if the Escape key commits the edit.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.MultipleLineEditingEnabled">
            <summary>
            Gets or sets a value indicating whether the text editor supports
            multiline editing.
            </summary>
            <value>true if the text editor supports multiline editing.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.WordWrap">
            <summary>
            Gets or sets a value indicating whether the editor should word wrap.
            </summary>
            <value>true if the editor should word wrap.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.HorizontalAlignment">
            <summary>
            Gets or sets a value indicating the horizontal alignment of the text in the editor.
            </summary>
            <value>A value indicating the horizontal alignment of the text in the editor.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.EditorFont">
            <summary>
            Gets the custom font for this editor.
            This property may return null in which case the edit control's default font will be used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.SetFont(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Sets the font for this editor.
            </summary>
            <param name="familyName"></param>
            <param name="emSize"></param>
            <param name="style"></param>
            <param name="unit"></param>
            <param name="view"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.CanEditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether the value of this field can be edited.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="field"></param>
            <param name="subfield"></param>
            <param name="view">The view that will become the parent of the editor.</param>
            <returns>true if the value of this field can be edited.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Invokes the in-place editor.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="field"></param>
            <param name="subfield"></param>
            <param name="view">The view that will host the editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Invokes the in-place editor, setting the caret using the specified mouse position.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="field"></param>
            <param name="subfield"></param>
            <param name="view">The view that will host the editor.</param>
            <param name="mousePosition">The mouse position relative to the top-left of the diagram in world units.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.String)">
            <summary>
            Invokes the in-place editor, replacing the text with the specified text.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="field"></param>
            <param name="subfield"></param>
            <param name="view">The view that will host the editor.</param>
            <param name="replacementText">The text that should replace the contents of the editor.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.TextEditorControl">
            <summary>
            Returns the ElementPropertyTextEditor control.
            </summary>
            <param name="view">The view of the field being edited.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.EditorControl">
            <summary>
            Gets the Windows control used to edit the text.
            </summary>
            <value>The Windows control used to edit the text.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.InUse">
            <summary>
            Gets a value indicating whether the edit control is currently active and in use.
            </summary>
            <value>true if the edit control is currently active and in use.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.CommitPendingEdit">
            <summary>
            Commits a pending edit if any.
            </summary>
            <returns>true if the commit succeeded.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.CancelPendingEdit">
            <summary>
            Cancels a pending edit if any.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.Shape">
            <summary>
            Gets the shape whose field or subfield is currently being edited.
            </summary>
            <value>The shape whose field or subfield is currently being edited.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.Field">
            <summary>
            Gets the field that is currently being edited or the field whose subfield is currently being edited.
            </summary>
            <value>The field that is currently being edited or the field whose subfield is currently being edited.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.SubField">
            <summary>
            Gets the subfield that is currently being edited. This can be null.
            </summary>
            <value>The subfield that is currently being edited.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.InitializeEditor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Initializes the editor for the field.
            </summary>
            <param name="view">The view that will host the editor.</param>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="field"></param>
            <param name="subfield"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.InitializeEditorStyles">
            <summary>
            Initializes the editor's text alignment, multi-line properties, and non-client properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.EnsureVisible(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Scrolls the view to ensure that the top-left of the field is visible and that
            as much of the right and bottom of the field is visible without scrolling
            the top-left out of the view.
            </summary>
            <param name="view">The view that will host the editor.</param>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="field"></param>
            <param name="subfield"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.EnsureVisible(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Scrolls the view to ensure that the top-left of the rectangle is visible and that
            as much of the right and bottom of the rectangle is visible without scrolling
            the top-left out of the view.  The zoom level will not be affected.
            The behavior of this method is intended for use by in-place editing.
            </summary>
            <param name="view">The view that may be scrolled.</param>
            <param name="rectangleToEnsure">The rectangle in world units relative to the diagram's top-left.</param>
            <param name="marginsToAllow">The margin on the screen in inches along the perimeter of the view regardless of the view's ZoomFactor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.GetViewMargins(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.SizeD,Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Gets the margins given the desired view margins and a rectangle to view.  The margins will be decreased
            if the rectangle does not fit in the view minus the margins.  If the rectangle does not fit in the view
            at all, then the margins will be set to zero.
            </summary>
            <param name="view">The view whose margins are being calculated.</param>
            <param name="sizeToFitWithinMargins">The size of the rectangle to fit inside the view's margins in world units.</param>
            <param name="desiredViewMargins">The desired size of the margins in screen inches (i.e., zoom does not affect it).</param>
            <returns>The adjusted view margins.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.GetAbsoluteBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField)">
            <summary>
            Gets the text editors absolute bounds in world units.
            </summary>
            <param name="parentShape"></param>
            <param name="field"></param>
            <param name="subfield"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.OnScrollPositionChanged(System.Object,Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Repositions/resizes the editor when the view is scrolled.
            </summary>
            <param name="sender"></param>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.OnEditValueEnded(System.Object,Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Raised by the ElementPropertyTextEditor when editing has ended,
            either by committing or discarding the changes.
            </summary>
            <param name="sender">The ElementPropertyTextEditor that raised the event.</param>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InPlaceTextEditor.ResetToDefaultSettings">
            <summary>
            Resets all members to the original settings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.InvokeEditorAction">
            <summary>
            Invokes the editor on click.
            </summary>
            <remarks>
            Although this could have been implemented in the OnClick handler of the ShapeField, 
            it wouldn't be possible to focus the field on the first click and invoke
            the editor on the second click.  The first click is handled by the SelectAction,
            the second click is handled by this InvokeEditorAction.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvokeEditorAction.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Saves relevant button information for later use.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvokeEditorAction.OnDoubleClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Double-click cancels this mouse action.  Double-click should perform
            the standard default action rather than invoking the editor.
            </summary>
            <param name="e">The DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvokeEditorAction.OnClicked(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Invokes the editor and then deactivates this mouse action.
            </summary>
            <param name="e">The MouseActionEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvokeEditorAction.OnDragCompleted(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Users tend to drag across the text, thinking they will
            select the text. Therefore we need to respond to this event
            and invoke the editor.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvokeEditorAction.OnMouseActionDeactivated(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Cleans up this mouse action, such as ensuring that the timer is deactivated.
            </summary>
            <param name="e">The DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvokeEditorAction.ActivateTimer(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Activates the InvokeEditorTimer.  The timer is used to delay the 
            editor invocation so that double-click has a chance to be detected.
            Normal double-click takes precedence over a slow double-click.
            </summary>
            <param name="view">The DiagramClientView that will host the editor.</param>
            <param name="mousePosition">The mouse position in world coordinates relative to the diagram's top-left.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvokeEditorAction.DeactivateTimer">
            <summary>
            Deactivates the InvokeEditorTimer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvokeEditorAction.OnInvokeEditorTimer(System.Object,System.EventArgs)">
            <summary>
            Deactivates the timer, invokes the editor, and forces a completion of this mouse action.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An EventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvokeEditorAction.InvokeEditor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Invokes the editor for the field below the specified mouse position.
            </summary>
            <param name="view">The DiagramClientView clicked on.</param>
            <param name="mousePosition">The mouse position in world coordinates relative to the diagram's top-left.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InvokeEditorAction.Dispose(System.Boolean)">
            <summary>
            Releases all resources, managed and unmanaged, related to this class.
            </summary>
            <param name="disposing">
            A value of true indicates that all resources
            (managed and unmanaged) should be disposed.
            A value of false indicates that Dispose has been called
            by the runtime from within the finalizer, so you should
            not reference other managed objects.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeTypeDescriptor">
            <summary>
            Specialized type descriptor for the LabelShape class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor,Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Creates a new LabelShapeTypeDescriptor
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeTextPropertyDescriptor">
            <summary>
            Property descriptor for the LabelShape's Text property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeTextPropertyDescriptor.#ctor(Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainPropertyInfo,System.Attribute[])">
            <summary>
            Initializes a new instance of the LabelShapeTextPropertyDescriptor class.
            </summary>
            <param name="modelElement"></param>
            <param name="domainPropertyInfo"></param>
            <param name="requestor"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeTextPropertyDescriptor.GetEditor(System.Type)">
            <summary>
            Gets either the standard single-line text editor or the multiline text editor
            depending on whether the label shape supports multiline.
            </summary>
            <param name="editorBaseType">The base type of the editor.</param>
            <returns>The appropriate text editor.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeTextPropertyDescriptor.MultilineEditor">
            <summary>
            Gets the MultilineStringEditor for multi-line text editing.
            </summary>
            <value>The MultilineStringEditor for multi-line text editing.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LabelTextField">
            <summary>
            Text field displayed on a label shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelTextField.#ctor(System.String)">
            <summary>
            Constructs a new LabelTextField.
            </summary>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelTextField.OnKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
             keys directed to the text field so that we can nudge, resize, 
            scroll, etc. when the text field has the focus.
            </summary>
            <param name="field">The field that received the KeyDown event.</param>
            <param name="e">The DiagramKeyEventArgs that contains event data.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LabelPlacement">
            <summary>
            Enumeration for where along line to position its label.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LabelAlignment">
            <summary>
            Enumeration for aligning a label to its line; either to the left or right of the line.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LabelPlacedFlag">
            <summary>
            Enumeration for whether a label is auto placed or manually moved/sized.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SegmentOrientation">
            <summary>
            The orientation of the segment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.SegmentOrientation.None">
            <summary>
            No segment yet, so no orientation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.SegmentOrientation.Horizontal">
            <summary>
            Horizontal orientation of segment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.SegmentOrientation.Vertical">
            <summary>
            Vertical orientation of segment.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ILineLabel">
            <summary>
            Called by the LinkShape when EdgePoints change, to update position of the label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ILineLabel.ManuallySized">
            <summary>
            Gets or sets whether this ILineLabel has been manually resized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ILineLabel.ManuallyPlaced">
            <summary>
            Gets or sets whether this ILineLabel has been manually moved.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ILineLabel.AdjustPosition">
            <summary>
            Auto-adjust the position of this ILineLabel.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ILineLabel.UpdateLabelOffset(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            This method is called when the position/size of the ILineLabel is explicitly changed by the user.
            </summary>
            <param name="oldBounds">Old bounds of this ILineLabel.</param>
            <param name="newBounds">New bounds of this ILineLabel.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper">
            <summary>
            Helper class containing LineLabel positioning logic.  Shared between the
            LineLabelShape and the ConnectorDecorator classes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper.#ctor">
            <summary>
            Constructs a new LineLabelPlacementHelper
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper.Placement">
            <summary>
            Current label placement (source or target)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper.Alignment">
            <summary>
            Current label alignment ("left" or "right" of line, means above or below for horizontal segments)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper.Offset">
            <summary>
            Current offset from the label.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper.CurrentOrientation">
            <summary>
            Current orientation of the line segment this label is attached to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper.GetSegment(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape)">
            <summary>
            Gets the segment associated with this label, given the parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper.FindAnchorPoint(Microsoft.VisualStudio.Modeling.Diagrams.LineSegment)">
            <summary>
            Gets the anchor point associated with this label, given the associated segment.
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper.ConstrainLabelSize(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape,Microsoft.VisualStudio.Modeling.Diagrams.SizeD,Microsoft.VisualStudio.Modeling.Diagrams.SizeD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Gets a constrained label size so it doesn't overlap the shape the line connects to.
            </summary>
            <param name="proposedSize">Proposed size of the label.</param>
            <param name="minimumSize">Minimum acceptable size of the label.</param>
            <param name="absoluteBounds">Existing bounds of the label.</param>
            <param name="parentLink">Parent link shape.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper.IsRightJustified(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape)">
            <summary>
            Gets a value indicating whether the label's right edge abuts a shape, either the link shape or a shape it connects to.
            </summary>
            <param name="parentLink"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinePlacementHelper.GetLabelOffset(Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Calculates the label offset.
            </summary>
            <param name="absoluteBounds"></param>
            <param name="parentLink"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject">
            <summary>
            Summary description for FieldAccessibleObject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.LineSegment,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the FieldAccessibleObject class
            </summary>
            <param name="shapeElement">The LinkShape that contains the LineSegment to represent.</param>
            <param name="seg,emt,emt">The LineSegment this object represents.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.Name">
            <summary>
            Gets or sets the object name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.Description">
            <summary>
            Gets a string that describes the visual appearance 
            of the specified object. Not all objects have a description.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.Role">
            <summary>
            Gets the role of this accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="navdir">One of the AccessibleNavigation values.</param>
            <returns>An AccessibleObject that represents one of the AccessibleNavigation values.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
            <summary>
            Modifies the selection or moves the keyboard focus of the accessible object.
            </summary>
            <param name="flags">One of the AccessibleSelection values.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.State">
            <summary>
            Gets the state of this accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.Help">
            <summary>
            Gets a description of what the object does or how the object is used.
            </summary>
            <value>A description of what the object does or how the object is used.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.GetHelpTopic(System.String@)">
            <summary>
            Gets an identifier for a Help topic identifier and the path 
            to the Help file associated with this accessible object.
            </summary>
            <param name="fileName">On return, this property contains the path to the Help file associated with this accessible object.</param>
            <returns>An identifier for a Help topic, or -1 if there is no Help topic.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.KeyboardShortcut">
            <summary>
            Gets the shortcut key or access key for the accessible object.
            </summary>
            <value>The shortcut key or access key for the accessible object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object. Not all objects have a default action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineSegmentAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator">
             <summary>
             Base LinkDecorator class which allows other derived classes to implement actual 
             different geometries for decorators.
            
             This class also provides static accessors for the different type of decorators
             that exist as part of the core design surface.
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.decoratorPath">
            <summary>
            Cached exclude path
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.DecoratorPath">
            <summary>
            get/set the graphics path
            This is a singleton on the geometry class.  Do not dispose.
            Use immediately.
            </summary>
            <value>returns a GraphicsPath</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.DecoratorEmptyArrow">
            <summary>
            Gets the single instance of the empty arrow decorator.
            </summary>
            <value>Instance of the DecoratorEmptyArrow</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.DecoratorDoubleEmptyArrow">
            <summary>
            Gets the single instance of the double empty arrow decorator.
            </summary>
            <value>Instance of the DecoratorDoubleEmptyArrow</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.DecoratorFilledArrow">
            <summary>
            Gets the single instance of the filled arrow decorator.
            </summary>
            <value>Instance of the DecoratorFilledArrow</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.DecoratorHollowArrow">
            <summary>
            Gets the single instance of the hollow arrow decorator.
            </summary>
            <value>Instance of the DecoratorHollowArrow</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.DecoratorEmptyDiamond">
            <summary>
            Gets the single instance of the empty diamond decorator.
            </summary>
            <value>Instance of the DecoratorEmptyDiamond</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.DecoratorFilledDiamond">
            <summary>
            Gets the single instance of the filled diamond decorator.
            </summary>
            <value>Instance of the DecoratorFilledDiamond</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.#ctor">
            <summary>
            Default constructor does nothing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.PenId">
            <summary>
            Gets the PenId used to draw the outline.
            </summary>
            <value>StyleSetResourceId for the pen that is used to draw the decorator outline.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.BrushId">
            <summary>
            Gets the BrushId used to draw the decorator background.
            </summary>
            <value>StyleSetResourceId for the brush that is used to draw the decorator background.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.GetPath(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns the GraphicsPath for this LinkDecorator based on the bounding box passed in.
            </summary>
            <param name="bounds">Rectangle in which to draw the path.</param>
            <returns>GraphicsPath for resulting LinkDecorator.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkDecorator.DoPaintShape(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.IGeometryHost,Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Paints the LinkDecorator on a LinkShape based on the bounds that it's given.
            The default drawing code gets the Path for the decorator and draws and fills it
            based on the LinkDecorator's PenId and BrushId.
            </summary>
            <param name="bounds">Rectangle in which to draw the decorator.</param>
            <param name="shape">LinkShape that this decorator is associated with.</param>
            <param name="e">DiagramPaintEventArgs used get he Graphics object for drawing.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorEmptyArrow">
            <summary>
            This is an arrow decorator with only two lines
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorEmptyArrow.#ctor">
            <summary>
            Default constructor does nothing, but needed for serialization.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorEmptyArrow.GetPath(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns the GraphicsPath for this LinkDecorator based on the bounding box passed in.
            This is a singleton on the LinkDecorator class.  Do not dispose.
            Use immediately.
            </summary>
            <param name="bounds">Rectangle in which to draw the path.</param>
            <returns>GraphicsPath for resulting LinkDecorator.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorDoubleEmptyArrow">
            <summary>
            This is an arrow decorator with only two lines
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorDoubleEmptyArrow.#ctor">
            <summary>
            Default constructor does nothing, but needed for serialization.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorDoubleEmptyArrow.GetPath(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns the GraphicsPath for this LinkDecorator based on the bounding box passed in.
            This is a singleton on the LinkDecorator class.  Do not dispose.
            Use immediately.
            </summary>
            <param name="bounds">Rectangle in which to draw the path.</param>
            <returns>GraphicsPath for resulting LinkDecorator.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorFilledArrow">
            <summary>
            This is an enclosed arrow decorator filled with a color based on BrushId.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorFilledArrow.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorFilledArrow.GetPath(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns the GraphicsPath for this LinkDecorator based on the bounding box passed in.
            </summary>
            <param name="bounds">Rectangle in which to draw the path.</param>
            <returns>GraphicsPath for resulting LinkDecorator.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHollowArrow">
            <summary>
            This is an enclosed arrow decorator filled with the diagram's background color.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHollowArrow.#ctor">
            <summary>
            Default constructor does nothing, but needed for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHollowArrow.BrushId">
            <summary>
            Gets the BrushId used to draw the decorator background.
            </summary>
            <value>StyleSetResourceId for the brush that is used to draw the decorator background.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorEmptyDiamond">
            <summary>
            This is an diamond decorator filled with the diagram's background color.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorEmptyDiamond.#ctor">
            <summary>
            Default constructor does nothing, but needed for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorEmptyDiamond.BrushId">
            <summary>
            Gets the BrushId used to draw the decorator background.
            </summary>
            <value>StyleSetResourceId for the brush that is used to draw the decorator background.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorFilledDiamond">
            <summary>
            This is an diamond decorator filled with a color based on BrushId.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorFilledDiamond.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorFilledDiamond.GetPath(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Returns the GraphicsPath for this LinkDecorator based on the bounding box passed in.
            </summary>
            <param name="bounds">Rectangle in which to draw the path.</param>
            <returns>GraphicsPath for resulting LinkDecorator.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SetConnectorAnchorsOnLoad">
            <summary>
            Rule to set the manual route / anchor points of a line when it is first created.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointConverter">
            <summary>
            TypeConverter for EdgePoint instances, so it can be serialized in human read-able form.
            The converted EdgePoint will have syntax "(x : y : flag)", where the flag can be omitted for Normal.
            For backward compatibility, the converter also supports converting from a string produced by binary serializer,
            but it will never convert an EdgePoint to binary form.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Only supports converting from string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Only supports converting to string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointConverter.ConvertFromString(System.Globalization.CultureInfo,System.String)">
            <summary>
            Converts an EdgePoint from a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointConverter.ConvertToString(System.Globalization.CultureInfo,Microsoft.VisualStudio.Modeling.Diagrams.EdgePoint)">
            <summary>
            Converts an EdgePoint to a string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointCollection">
            <summary>
            Handle a list of edgepoints exactly like an ArrayList
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointCollectionConverter">
            <summary>
            TypeConverter for EdgePointCollection instances, so it can be serialized in human read-able form.
            The converted EdgePointCollection will have syntax "[(x : y : flag); (x : y : flag); ...]", where the flag can be omitted for Normal.
            For backward compatibility, the converter also supports converting from a string produced by binary serializer,
            but it will never convert an EdgePointCollection to binary form.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Only supports converting from string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Only supports converting to string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EdgePointCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to a string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkNodeChangeRule">
            <summary>
            Rule to reroute the the linke shape when one of its endpoint nodes is changed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeChangedRule">
            <summary>
            Rule to reroute the the linke shape when one of its endpoint nodes is changed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentListField">
            <summary>
            The list field in the ListCompartmentShape
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentListField.#ctor(System.String)">
            <summary>
            Constructs a new ListHeaderListField.
            </summary>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentListField.GetAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the compartment shape's header text as the accessible name of the list.
            </summary>
            <param name="parentShape">The ListCompartmentShape parent of this field.</param>
            <returns>The compartment shape's header text as the accessible name of the list.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentListField.CanSnapToPixel">
            <summary>
            Can we snap to a pixel?
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ListField">
            <summary>
            A shape field capable of efficiently displaying a list of items.
            </summary>
            <remarks>
            To add a ListField to a ShapeElement, override the ShapeElement's InitializeShapeFields
            method.  The ShapeElement must also implement the IListFieldContainer interface.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ListField class.
            </summary>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the ListField class.
            </summary>
            <param name="_snakedList">Indicates whether or not this should be a snaked list</param>
            <param name="_watermarkText">Text to display if the list is empty.</param>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Retrieves hit test information, including which list item.
            </summary>
            <param name="point">A point in world units relative to the specified parent ShapeElement's top-left</param>
            <param name="parentShape">The ShapeElement to which this ShapeField belongs</param>
            <param name="diagramHitTestInfo">The hit test information to update with the hit test results.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.DoPaint(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Draws the shape field.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains the event data.</param>
            <param name="parentShape">The parent shape of this field.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.NormalFontId">
            <summary>
            Gets or sets the font id for a normal, unselected list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.AlternateFontId">
            <summary>
            Gets or sets the font id for a normal, unselected list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.NormalTextBrushId">
            <summary>
            Gets or sets the brush id for the text of a normal, unselected list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.NormalBackgroundBrushId">
            <summary>
            Gets or sets the brush id for the background of a normal, unselected list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.SelectedTextBrushId">
            <summary>
            Gets or sets the brush id for the text of a selected list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.SelectedBackgroundBrushId">
            <summary>
            Gets or sets the brush id for the background of a selected list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.InactiveSelectedTextBrushId">
            <summary>
            Gets or sets the brush id for the text of an inactive selected list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.InactiveSelectedBackgroundBrushId">
            <summary>
            Gets or sets the brush id for the background of an inactive selected list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.DisabledTextBrushId">
            <summary>
            Gets or sets the brush id for the text of a disabled list item.
            </summary>
            <value>The brush id for the text of a disabled list item.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.SelectedDisabledTextBrushId">
            <summary>
            Gets or sets the brush id for the text of a selected disabled list item.
            </summary>
            <value>The brush id for the text of a selected disabled list item.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.InactiveSelectedDisabledTextBrushId">
            <summary>
            Gets or sets the brush id for the text of an inactive selected disabled list item.
            </summary>
            <value>The brush id for the text of an inactive selected disabled list item.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.FocusPenId">
            <summary>
            Gets or sets the pen id used to outline the focused list item.
            </summary>
            <remarks>
            Both the background focus pen and the focus pen draw along the same path.
            The background focus pen draws first; the focus pen draws second, directly
            overlapping the path the background focus pen followed. This enables two-color
            dashed lines.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.FocusBackgroundPenId">
            <summary>
            Gets or sets the pen id used to outline the focused list item.
            </summary>
            <remarks>
            Both the background focus pen and the focus pen draw along the same path.
            The background focus pen draws first; the focus pen draws second, directly
            overlapping the path the background focus pen followed. This enables two-color
            dashed lines.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.DefaultStringFormat">
            <summary>
            The default string format for all list items
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.WatermarkFormat">
            <summary>
            The default string format for all list items
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.DefaultItemIndent">
            <summary>
            Gets the standard margin to use between the left side of the list field and the left side of the list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.JaggedSelectionRectangle">
            <summary>
            Gets or sets the jaggedSelection property.
            If this property is set to true, the width of the selection rectangles only covers the contents of the subfields,
            not the entire width of the field. This property defaults to false.
            </summary>
            <value>The value you want the jaggedSelection to be set to</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.SnakedList">
            <summary>
            Gets a value indicating whether the list items wrap into multiple columns.
            If this property is set to true, then the items in the list field will be snaked to form
            columns if there are too many items to fit in the space currently occupied by the list.
            The current # of possible visible rows and columns is dynamically calculated so that
            the list will maximize the number of entries that can be shown in its current size.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.DefaultItemSelectable">
            <summary>
            Gets or sets default selectable state of all list items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListField.DefaultItemFocusable">
            <summary>
            Gets or sets default focusable state of all list items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetItemSelectable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField)">
            <summary>
            Gets a value indicating whether the specified list item is selectable.
            </summary>
            <param name="parentShape">The ShapeElement to which this ListField belongs.</param>
            <param name="listItem">List item to get selectable value for.</param>
            <returns>True if the specified item list item is selectable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetItemFocusable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField)">
            <summary>
            Gets a value indicating whether the specified list item is focusable.
            </summary>
            <param name="parentShape">The ShapeElement to which this ListField belongs.</param>
            <param name="listItem">List item to get focusable value for.</param>
            <returns>True if the specified list item is focusable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.IsItemVisibleInSnakedList(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField)">
            <summary>
            Returns a value indicating whether the specified list item
            is within the bounds of its list field.  This method is intended 
            for use only by list fields whose SnakedList property is set to true.
            This method assumes the active view's Graphics object for calculating
            text widths.
            </summary>
            <param name="parentShape">The parent shape of the list field.</param>
            <param name="listItem">The list item whose visibility is in question.</param>
            <returns>true if the specified list item is within in the bounds of the list field.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.IsItemVisibleInSnakedList(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField,System.Drawing.Graphics)">
            <summary>
            Returns a value indicating whether the specified list item
            is within the bounds of its list field.  This method is intended 
            for use only by list fields whose SnakedList property is set to true.
            </summary>
            <param name="parentShape">The parent shape of the list field.</param>
            <param name="listItem">The list item whose visibility is in question.</param>
            <param name="graphics">The Graphics object to use to measure list item text.</param>
            <returns>true if the specified list item is within in the bounds of the list field.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetItemCount(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the number of items in this list field.
            </summary>
            <param name="parentShape">The ShapeElement to which this ShapeField belongs</param>
            <returns>The number of items in this list field.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetItemHeight(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the standard height of a list item in world units.
            The default behavior of this method returns the sum of
            GetItemTextHeight, GetPaddingAboveItemText, and GetPaddingBelowItemText.
            </summary>
            <param name="parentShape">The ShapeElement to which this ShapeField belongs</param>
            <returns>The standard height of a list item in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetPaddingAboveItemText(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the spacing between the top of the item and the top of the text.
            The text height (Font.GetHeight()) contains some padding, so this is padding in addition
            to that.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetPaddingBelowItemText(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the spacing between the bottom of the text and the bottom of the item.
            The text height (Font.GetHeight()) contains some padding, so this is padding in addition
            to that.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetItemTextHeight(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the height of a line of text in the list item.  
            This text height (Font.GetHeight()) contains some padding, so GetPaddingAboveItemText and
            GetPaddingBelowItemText is additional padding on top of that.  
            </summary>
            <param name="parentShape">The ShapeElement to which this ShapeField belongs</param>
            <returns>The height of just the text in the list item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetItemRectangle(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Int32,System.Int32)">
            <summary>
            Gets the list item rectangle in world units relative to the top-left of the parent shape.
            </summary>
            <param name="parentShape">The ShapeElement to which this ShapeField belongs.</param>
            <param name="row">The zero-based row number of the list item.</param>
            <returns>The list item rectangle in world coordinates relative to the top-left of the parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the bounds of this ShapeField in world units relative to the top-left of the parent shape.
            </summary>
            <param name="parentShape">The parent shape of this field.</param>
            <returns>The bounds of this ShapeField in world units relative to the top-left of the parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.FindNextInChildSubFields(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean)">
            <summary>
            Finds this ShapeField's next child subfield in the navigation sequence.
            </summary>
            <param name="parentShape">
            The parent ShapeElement for this ShapeField.
            </param>
            <param name="startFromChildItem">
            The DiagramItem from which to start the search.
            (This DiagramItem is not included in the search.)
            If startFromChildItem is null, then the search starts with the first
            child subfield of this ShapeElement.
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>
            The DiagramItem representing the next child subfield in the navigation sequence.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.FindPreviousInChildSubFields(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean)">
            <summary>
            Finds this ShapeField's previous child subfield in the navigation sequence.
            </summary>
            <param name="parentShape">
            The parent ShapeElement for this ShapeField.
            </param>
            <param name="startFromChildItem">
            The DiagramItem from which to start the search.
            (This DiagramItem is not included in the search.)
            If startFromChildItem is null, then the search starts with the last
            child subfield of this ShapeElement.
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>
            The DiagramItem representing the previous child subfield in the navigation sequence.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.SetSelectionRange(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Sets the selection to a range of subfields
            </summary>
            <param name="selection">The selection to update.</param>
            <param name="anchorItem">The DiagramItem anchor in the selection.</param>
            <param name="toItem">The DiagramItem to which to extend the selection, starting from the anchor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetAccessibleChild(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Int32)">
            <summary>
            Retrieves the accessible child subfield corresponding to the specified index.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <param name="index">The zero-based index of the accessible child subfield.</param>
            <returns>The accessible child subfield corresponding to the specified index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetAccessibleChildCount(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Retrieves the number of accessible children belonging to this ShapeField.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The number of accessible children belonging to this ShapeField.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.IsWatermarkNeeded(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Checks the current state of the listField to determine if the watermark text should
            be displayed.
            </summary>
            <value>true means that the current state of the diagram requires the watermark to be visible.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the default accessible name for a list field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the default accessible description for a list field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible description.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListField.GetAccessibleRole(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Retrieves the accessible role of this ShapeField.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The AccessibleRole of this ShapeField.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SnakingInfo.MaxItemWidth">
            <summary>
            The maximum width of any item in the list
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SnakingInfo.VisibleRows">
            <summary>
            The number of rows currently visible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SnakingInfo.VisibleColumns">
            <summary>
            The number of columns currently visible.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.IListFieldContainer">
            <summary>
            Defines methods for the parent shape of the ListField.
            </summary>
            <remarks>
            Implement this interface on any ShapeElement that will host a ListField.
            The ListField will call these methods to get list item information for
            hit-testing and drawing.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.IListFieldContainer.GetItemCount(Microsoft.VisualStudio.Modeling.Diagrams.ListField)">
            <summary>
            Gets the number of items in the specified list field.
            </summary>
            <param name="listField">The child list field requesting the number of items.</param>
            <returns>The number of items in the specified list field.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.IListFieldContainer.GetItemDrawInfo(Microsoft.VisualStudio.Modeling.Diagrams.ListField,System.Int32,Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo)">
            <summary>
            Gets drawing information for a single list item in the list field.
            </summary>
            <param name="listField">The child list field requesting the drawing information.</param>
            <param name="row">The zero-based row number of the list item to draw.</param>
            <param name="itemDrawInfo">An ItemDrawInfo that receives the drawing information.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField">
            <summary>
            The sub field which represents an item in a ListField.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ListItemSubField class.
            </summary>
            <param name="row">The zero-based row number of the list item.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ListItemSubField class.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="maxRows"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.Row">
            <summary>
            Gets or sets the zero-based row number of this list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.Column">
            <summary>
            Gets or sets the zero-based column number of this list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.RowsPerColumn">
            <summary>
            Gets/sets the number of rows per column of the list in which this item resides.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.SubFieldEquals(System.Object)">
            <summary>
            Determines whether two subfield instances are equal.
            </summary>
            <param name="obj">The subfield to compare with the current subfield.</param>
            <returns>true if the specified subfield is equal to the current subfield.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.SubFieldHashCode">
            <summary>
            Serves as the hash function for the ListItemSubField.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.GetFocusable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Gets a value indicating whether this shape field can receive focus.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>true if this shape field can receive focus.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.GetSelectable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Gets a value indicating whether this shape field can be selected.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>true if this shape field can be selected.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.GetBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Returns the bounds in world coordinates relative to the top-left of the parent shape.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>The bounds in world coordinates relative to the top-left of the parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.OnKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Called when a key is pressed.
            </summary>
            <param name="e">A DiagramKeyEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.OnKeyPress(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs)">
            <summary>
            Invokes the editor if the field is editable and any alpha-numeric character is typed.
            </summary>
            <param name="e">The DiagramKeyPressEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.GetAccessibleRole(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Returns the accessible role.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>The accessible role.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.GetInPlaceEditorBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Returns the bounds of the in-place editor relative to its parent shape in world units.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this subfield.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>The bounds of the in-place editor relative to its parent shape in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.GetItemDrawInfo(Microsoft.VisualStudio.Modeling.Diagrams.IListFieldContainer,Microsoft.VisualStudio.Modeling.Diagrams.ListField)">
            <summary>
            Gets the ItemDrawInfo object used to draw this list item.
            This is not intended to be used in a loop as it allocates 
            an ItemDrawInfo object each time it is called.
            </summary>
            <param name="parentField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.CanEditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether the value of this subfield can be edited.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this subfield.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="view">The view that will become the parent of the editor.</param>
            <returns>true if the value of this field can be edited.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Invokes the in-place editor.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this subfield.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="view">The view that will host the editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Invokes the in-place editor, setting the caret using the specified mouse position.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this subfield.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="view">The view that will host the editor.</param>
            <param name="mousePosition">The mouse position relative to the top-left of the diagram in world units.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.String)">
            <summary>
            Invokes the in-place editor, replacing the text with the specified text.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this subfield.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="view">The view that will host the editor.</param>
            <param name="replacementText">The text that should replace the contents of the editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.ConfigureInPlaceEditor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Sets the in-place editing settings
            </summary>
            <param name="parentShape"></param>
            <param name="parentField"></param>
            <param name="view"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.HasPendingEdit(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether in-place editing is active, with a commit pending.
            </summary>
            <param name="parentShape">The ShapeElement that contains this subfield.</param>
            <param name="parentField">The ShapeField that contains this subfield.</param>
            <param name="view">The view hosting the in-place editor.</param>
            <returns>true if in-place editing is active, with a commit pending.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.CommitPendingEdit(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Commits the pending edit.
            </summary>
            <param name="parentShape">The ShapeElement that contains this subfield.</param>
            <param name="parentField">The ShapeField that contains this subfield.</param>
            <param name="view">The view hosting the in-place editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.OnEndEdit(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            Called when in-place editing has ended.
            </summary>
            <param name="e">A DiagramItemEventArgs containing event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListItemSubField.GetActiveInPlaceEditor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns the control for the active in-place editor.  This method may return null, 
            in which case no in-place editor is active for this subfield.
            </summary>
            <param name="parentShape">The ShapeElement that contains this subfield.</param>
            <param name="parentField">The ShapeField that contains this subfield.</param>
            <param name="view">The view hosting the in-place editor.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo">
            <summary>
            Information for a single list item in a list field. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo.#ctor">
            <summary>
            Initializes a new instance of the ItemDrawInfo class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo.Image">
            <summary>
            Gets or sets the image for the list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo.ImageMargin">
            <summary>
            Gets or sets the image margin - the spacing between image and text - for the list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo.Text">
            <summary>
            Gets or sets the text of the list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo.StringFormat">
            <summary>
            Gets or sets the StringFormat of this list item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo.Indent">
            <summary>
            Gets or sets the margin from the left side of the list field
            to the left side of the item image (or item text if no image exists).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo.Disabled">
            <summary>
            Gets or sets the disabled state of the list item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo.AlternateFont">
            <summary>
            Gets or sets the desire to use the alternate font for this list item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ItemDrawInfo.Clear">
            <summary>
            Clears the item information.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction">
            <summary>
            The MouseAction that manually routes LinkShapes by manipulating their LineSegments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Initializes a new instance of the ManualRouteAction class.
            </summary>
            <param name="diagram">The diagram object that owns this MouseAction.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Saves the starting mouse position.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Invalidates the old and new feedback.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.OnMouseUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            (Does nothing but call the base method. This override should be removed.)
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.DoPaintFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Draws the manual routing feedback.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.CalculateFeedbackBounds(Microsoft.VisualStudio.Modeling.Diagrams.PointD[])">
            <summary>
            Calculates the bounds of the feedback given the points along the route.
            </summary>
            <param name="routePoints"></param>
            <returns>The bounds of the feedback.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor to display at the specified mouse position.
            </summary>
            <param name="currentCursor">The existing cursor.</param>
            <param name="diagramClientView">The DiagramClientView requesting the cursor.</param>
            <param name="mousePosition">The cursor position in world units relative to the top-left of the diagram.</param>
            <returns>The cursor to display at the specified mouse position.</returns>
            <remarks>
            This method is called by the DiagramClientView if this MouseAction is active or
            if it is the potential MouseAction.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.OnDiagramLostFocus(Microsoft.VisualStudio.Modeling.Diagrams.LostFocusEventArgs)">
            <summary>
            Cancels the MouseAction when focus transfers to another window.
            </summary>
            <param name="e">A LostFocusEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.OnDragCompleted(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Performs the manual route.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.OnMouseActionCanceled(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Invalidates the old feedback.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.CalculateRelativeDistance(Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculate the relative distance from the line segment based on whether
            it's horizontal or vertical.
            </summary>
            <param name="currentPoint">current mouse position.</param>
            <returns>PointD with the relative distance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ManualRouteAction.HasSegmentChanged(Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Tests whether the LineSegment will be changed if it's moved to the 
            specified position.
            </summary>
            <param name="relDistance">proposed new relative position of line segment.</param>
            <returns>true means that will cause a change in line segment; false means it won't.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DomainPresentationNavigator">
            <summary>
            Delegate for a method that navigates from a ModelElement to a set of PresentationElements that represent it on a set of Diagrams
            </summary>
            <param name="context">A ModelElement to navigate from</param>
            <returns>The PresentationElement set navigated to</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PresentationDomainNavigator">
            <summary>
            Delegate for a method that navigates from a PresentationElement to a ModelElement
            </summary>
            <param name="context">A PresentationElement to navigate from</param>
            <returns>The ModelElement navigated to</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction">
            <summary>
            Base class for all mouse actions.
            </summary>
            <remarks>
            Derive from this class to create your own custom mouse actions, such as a connector mouse tool.
            </remarks>
            <remarks>
            To implement your own MouseAction behavior, override any of the OnXxx methods 
            as necessary.  To implement feedback drawing, override the methods GetCursor, 
            DoPaintFeedback, and Invalidate.
            </remarks>
            <remarks>
            Custom mouse actions are managed by your Diagram-derived class.  Typically,
            you would have one instance of your mouse action object for every 
            instance of your Diagram-derived class.  For example, in your Diagram-derived 
            class, you would add the following property getter for a connector tool:
            </remarks>
            <remarks>
            <code>
            		private ConnectAction connectAction = null;
            		internal ConnectAction ConnectAction
            		{
            				get
            				{
            					if ( this.connectAction == null )
            					{
            						this.connectAction = new ConnectAction( this );
            					}
            					return this.connectAction;
            				}
            		}
            </code>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseActionActivatedEventHandler">
            <summary>
            Represents the method that will handle the MouseActionActivated event of a MouseAction.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseActionActivated">
            <summary>
            Occurs when the MouseAction is activated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseActionDeactivatedEventHandler">
            <summary>
            Represents the method that will handle the MouseActionDeactivated event of a MouseAction.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseActionDeactivated">
            <summary>
            Occurs when the MouseAction is deactivated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.#ctor">
            <summary>
            Initializes a new instance of the MouseAction class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Initializes a new instance of the MouseAction class.
            </summary>
            <param name="diagram">The Diagram that owns this MouseAction.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.Activate(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Activates this MouseAction.
            </summary>
            <param name="diagramClientView">
            The DiagramClientView that is activating this MouseAction.
            </param>
            <remarks>
            This method is called by the DiagramClientView to activate this MouseAction.
            Typically you should not need to call this method directly.  Instead, set the
            DiagramClientView's ActiveMouseAction property to the MouseAction you want to
            activate.
            </remarks>
            <remarks>
            A MouseAction must be active before it can perform any actions.  
            A MouseAction can be activated either by a MouseDown event or by explicitly
            calling this method.  If called by this method, the MouseAction is set to a 
            hovering state.
            </remarks>
            <remarks>
            Once a MouseAction is active, the MouseAction receives subsequent mouse events.
            </remarks>
            <remarks>
            The GetCursor method will be called on this MouseAction as long as it is active.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a MouseDown event to this MouseAction.
            </summary>
            <param name="mouseArgs">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseEnter(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a MouseEnter event to this MouseAction.
            </summary>
            <param name="pointArgs">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseLeave(Microsoft.VisualStudio.Modeling.Diagrams.LeaveShapeEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a MouseLeave event to this MouseAction.
            </summary>
            <param name="leaveArgs">A LeaveShapeEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseHover(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a MouseHover event to this MouseAction.
            </summary>
            <param name="pointArgs">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a MouseMove event to this MouseAction.
            </summary>
            <param name="mouseArgs">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a MouseUp event to this MouseAction.
            </summary>
            <param name="mouseArgs">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.ContextMenuRequested(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a ContextMenu event to this MouseAction.
            </summary>
            <param name="mouseArgs">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseWheel(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a ContextMenuRequested event to this MouseAction.
            </summary>
            <param name="mouseArgs">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.Click(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a Click event to this MouseAction.
            </summary>
            <param name="pointArgs">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.DoubleClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a DoubleClick event to this MouseAction.
            </summary>
            <param name="pointArgs">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.Cancel(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Cancels this MouseAction.
            </summary>
            <param name="diagramClientView">
            The DiagramClientView that is canceling this MouseAction.
            </param>
            <remarks>
            This method is called by the DiagramClientView to cancel this MouseAction.
            </remarks>
            <remarks>
            Minimally, OnMouseActionCanceled will be called prior to deactivation.
            </remarks>
            <remarks>
            After canceling, the MouseAction must be activated to be used again.  The
            MouseAction can be activated by setting the DiagramClientView's 
            ActiveMouseAction property to an instance of this MouseAction.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.CanCancel(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Gets a value indicating whether this MouseAction can be canceled.
            </summary>
            <param name="diagramClientView">
            The DiagramClientView for which this MouseAction should be canceled.
            </param>
            <returns>true if the MouseAction can be canceled; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.Complete(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Completes this MouseAction.
            </summary>
            <param name="diagramClientView">
            The DiagramClientView for which this MouseAction should be completed.
            </param>
            <remarks>
            Completing a MouseAction forces the MouseAction to advance to deactivation.
            Minimally, OnMouseActionCompleted will be called prior to deactivation.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.CanComplete(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Gets a value indicating whether this MouseAction can be completed.
            </summary>
            <param name="diagramClientView">
            The DiagramClientView for which this MouseAction should be completed.
            </param>
            <returns>true if the MouseAction can be completed; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.GotFocus(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a GotFocus event to this MouseAction.
            </summary>
            <param name="diagramArgs">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.LostFocus(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a LostFocus event to this MouseAction.
            </summary>
            <param name="diagramArgs">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.Scrolled(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Called by the DiagramClientView to dispatch a Scrolled event to this MouseAction.
            </summary>
            <param name="diagramArgs">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.FlushInternalEventQueue">
            <summary>
            Forces a flush of the internal event queue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.IsPreviousChangedToState(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionState,Microsoft.VisualStudio.Modeling.Diagrams.MouseActionState)">
            <summary>
            Checks if the previous state has changed to a given state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.InvokeStateChangeMethods(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionState,Microsoft.VisualStudio.Modeling.Diagrams.MouseActionState,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ActionRequest)">
            <summary>
            Calls the appropriate state change methods.
            </summary>
            <param name="oldState">The old MouseAction state.</param>
            <param name="newState">The new MouseAction state.</param>
            <param name="diagramClientView">The DiagramClientView in which this state change occurred.</param>
            <param name="nextAction">
            A request to queue up another event. 
            If this value is ActionRequest.CompleteAction, this method will
            queue up MouseActionEvent.Complete at the end of the method.  
            If this value is ActionRequest.CancelAction, this method will 
            queue up MouseActionEvent.Cancel.  
            If this value is ActionRequest.ContinueAction, no event will be 
            queued up and normal processing will occur.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.InvokeMouseActionEventMethods(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent,Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Calls the appropriate event methods.
            </summary>
            <param name="mouseActionEvent">The MouseAction event that occurred.</param>
            <param name="diagramArgs">A DiagramEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnMouseActionActivated(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Called when this MouseAction has been activated.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnMouseActionDeactivated(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Called when this MouseAction has been deactivated.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnHoveringBegun(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction has entered the hovering state.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
            <remarks>
            The hovering state begins when the Activate event is received, or when a drag has
            been completed or canceled and the MouseAction is directed to continue,
            or after a click action (i.e., a no-drag MouseDown + MouseUp combination)
            and the MouseAction is directed to continue.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnHoveringEnded(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction has exited the hovering state.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
            <remarks>
            The hovering state ends when the MouseAction receives a MouseDown, Cancel, 
            or Complete event.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnDragPendingBegun(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction has entered the drag/click-pending state.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
            <remarks>
            The drag/click-pending state begins when a MouseDown event occurs while
            the MouseAction is in a hovering state or while it is inactive.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnDragPendingEnded(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction has exited the drag/click-pending state.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
            <remarks>
            The drag/click-pending state ends when the criteria for dragging has been
            satisfied, or when a MouseUp has been received before dragging could begin
            (in which case the user has clicked), or when a Complete or Cancel event 
            has been received.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnDraggingBegun(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction has entered the dragging state.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
            <remarks>
            The dragging state begins when the criteria for dragging has been satisfied.
            Typically, the mouse cursor must move beyond a drag delta.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnDraggingEnded(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction has exited the dragging state.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
            <remarks>
            The dragging state ends when a MouseUp event has been received or when a
            Complete or Cancel event has been received.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnDragCompleted(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction's drag operation has completed.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
            <remarks>
            Set e.ActionRequest to ActionRequest.CompleteAction to complete the
            MouseAction and deactivate it.
            </remarks>
            <remarks>
            Set e.ActionRequest to ActionRequest.CancelAction to cancel the
            MouseAction and deactivate it.
            </remarks>
            <remarks>
            Set e.ActionRequest to ActionRequest.ContinueAction to keep the
            MouseAction active.  This will place the MouseAction in the
            hovering state.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnDragCanceled(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction's drag operation has been canceled.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
            <remarks>
            Set e.ActionRequest to ActionRequest.CompleteAction to complete the
            MouseAction and deactivate it.
            </remarks>
            <remarks>
            Set e.ActionRequest to ActionRequest.CancelAction to cancel the
            MouseAction and deactivate it.
            </remarks>
            <remarks>
            Set e.ActionRequest to ActionRequest.ContinueAction to keep the
            MouseAction active.  This will place the MouseAction in the
            hovering state.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnClicked(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction has received a non-dragging 
            MouseDown + MouseUp combination or when it has received a 
            Complete event.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
            <remarks>
            Set e.ActionRequest to ActionRequest.CompleteAction to complete the
            MouseAction and deactivate it.
            </remarks>
            <remarks>
            Set e.ActionRequest to ActionRequest.CancelAction to cancel the
            MouseAction and deactivate it.
            </remarks>
            <remarks>
            Set e.ActionRequest to ActionRequest.ContinueAction to keep the
            MouseAction active.  This will place the MouseAction in the
            hovering state.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnMouseActionCompleted(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Called when the MouseAction has completed and is ready to be deactivated.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnMouseActionCanceled(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Called when the MouseAction has been canceled and is ready to be deactivated.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called when a MouseDown event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnMouseEnter(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called when a MouseEnter event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnMouseLeave(Microsoft.VisualStudio.Modeling.Diagrams.LeaveShapeEventArgs)">
            <summary>
            Called when a MouseLeave event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A LeaveShapeEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnMouseHover(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called when a MouseHover event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.CanBumpScroll">
            <summary>
            Called when a MouseMove event has been dispatched to this MouseAction.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called when a MouseMove event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
            <remarks>
            To modify the cursor, override GetCursor.
            </remarks>
            <remarks>
            To draw feedback for this MouseAction, override DoPaintFeedback.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnMouseUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called when a MouseUp event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
            <remarks>
            If your intent is to respond to a MouseDown + MouseUp
            combination that does not include dragging, override the
            OnClicked method instead.
            (A MouseMove may occur between MouseDown and MouseUp that does
            not exceed a drag delta and therefore does not start dragging.)
            </remarks>
            <remarks>
            If your intent is to respond to a MouseDown + Drag + MouseUp 
            combination, override the OnDragCompleted method instead.
            (Drag occurs when the MouseMove exceeds a drag delta.) 
            </remarks>
            <remarks>
            If your intent is to respond to a double-click event, override
            the OnDoubleClick method instead.
            </remarks>
            <remarks>
            If your intent is to respond to the right-click event (perhaps
            to prevent the context menu from appearing), override the
            OnContextMenuRequested method instead.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnContextMenuRequested(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called when a ContextMenuRequested event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
            <remarks>
            To prevent any context menu from appearing during this MouseAction,
            override this method and set the Handled property of the 
            DiagramMouseEventArgs to true.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnMouseWheel(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called when a MouseWheel event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnDoubleClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called when a DoubleClick event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnDiagramLostFocus(Microsoft.VisualStudio.Modeling.Diagrams.LostFocusEventArgs)">
            <summary>
            Called when a LostFocus event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnDiagramGotFocus(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Called when a GotFocus event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.OnDiagramScrolled(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Called when a Scrolled event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor to display at the specified mouse position.
            </summary>
            <param name="currentCursor">The existing cursor.</param>
            <param name="diagramClientView">The DiagramClientView requesting the cursor.</param>
            <param name="mousePosition">The cursor position in world units relative to the top-left of the diagram.</param>
            <returns>The cursor to display at the specified mouse position.</returns>
            <remarks>
            This method is called by the DiagramClientView if this MouseAction is active or
            if it is the potential MouseAction.
            </remarks>
            <remarks>
            By default, this method returns the currentCursor.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.DoPaintFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Called by the DiagramClientView to paint the feedback for the MouseAction.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.CaptureMouse(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Captures the mouse.
            </summary>
            <param name="diagramClientView">The DiagramClientView attempting to capture the mouse.</param>
            <remarks>
            Calls to CaptureMouse can be nested. 
            The capture is only released on the outermost ReleaseMouse.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.ReleaseMouse(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Releases the mouse capture.
            </summary>
            <param name="diagramClientView">The DiagramClientView attempting to release the mouse.</param>
            <remarks>
            Calls to CaptureMouse can be nested. 
            The capture is only released on the outermost ReleaseMouse.
            </remarks>
            <remarks>
            ReleaseMouse can be called more than the number of calls to CaptureMouse.
            In the case where the capture has already been released, the extra 
            ReleaseMouse calls are ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.EnsureMouseReleased(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Ensures that the mouse capture has been released.
            </summary>
            <param name="diagramClientView">The DiagramClientView attempting to release the mouse.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.Invalidate(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Called by this MouseAction to invalidate its feedback.
            </summary>
            <param name="diagramClientView">The DiagramClientView to invalidate.</param>
            <remarks>
            By default, this method does nothing. Override this method to invalidate the MouseAction's feedback.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.Diagram">
            <summary>
            The Diagram to which this MouseAction belongs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseDownHitShape">
            <summary>
            Gets the hit shape of the most recent MouseDown event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.MouseDownPoint">
            <summary>
            Gets the mouse position of the most recent MouseDown event. 
            The position is in world units relative to the diagram's top-left.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.PreviousPoint">
            <summary>
            Gets/Sets the mouse position of the previous event.
            The position is in world units relative to the diagram's top-left.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.CurrentPoint">
            <summary>
            Gets/Sets the mouse position for the current event.
            The position is in world units relative to the diagram's top-left.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.IsActive">
            <summary>
            Gets a value indicating whether this MouseAction is currently active.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.CurrentMouseActionState">
            <summary>
            Gets the current MouseAction state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.CurrentMouseActionEvent">
            <summary>
            Gets the current MouseAction event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.CurrentDiagramArgs">
            <summary>
            Gets the latest DiagramEventArgs.
            A null value may be returned.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.InactiveState">
            <summary>
            Gets an object representing the inactive MouseAction state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.DragPendingState">
            <summary>
            Gets an object representing the drag/click pending state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.DraggingState">
            <summary>
            Gets an object representing the dragging state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.DragCompletedState">
            <summary>
            Gets an object representing the state in which the drag operation 
            has completed.
            (The MouseAction itself is not considered completed at this state.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.DragCanceledState">
            <summary>
            Gets an object representing the state in which the drag operation 
            has been canceled.
            (The MouseAction itself is not considered canceled at this state.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.ClickedState">
            <summary>
            Gets an object representing the clicked state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.HoveringState">
            <summary>
            Gets an object representing the hovering state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.ActionCompletedState">
            <summary>
            Gets an object representing MouseAction-completed state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.ActionCanceledState">
            <summary>
            Gets an object representing the MouseAction-canceled state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.HasTooltip">
            <summary>
            Gets whether this mouse action supports dynamic tooltip.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.GetTooltipText(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Gets tooltip text for specified diagram item if HasTooltip returned true.
            </summary>
            <param name="diagramItem">Diagram item to get tooltip for.</param>
            <returns>Tooltip text.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseAction.ResetToolboxOnDragDrop">
            <summary>
            Whether to reset toolbox selection after a drag-drop operation triggered by this
            mouse action.
            Base implementation always returns true, which means the toolbox selection will be
            reset after a drag-drop operation triggered by this mouse action.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs">
            <summary>
            The event args class for events originating from the MouseAction class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs.#ctor">
            <summary>
            Initializes an instance of the MouseActionEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.ActionRequest)">
            <summary>
            Initializes an instance of the MouseActionEventArgs class.
            </summary>
            <param name="diagramClientView">The DiagramClientView that the MouseAction is acting upon.</param>
            <param name="previousMousePosition">
            The mouse position prior to the event.  
            The position is in world coordinates relative to the diagram's top-left.</param>
            <param name="currentMousePosition">
            The mouse position when the event occurred.  
            The position is in world coordinates relative to the diagram's top-left.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs.PreviousMousePosition">
            <summary>
            Gets the mouse position prior to the event.
            The position is in world coordinates relative to the diagram's top-left.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs.CurrentMousePosition">
            <summary>
            Gets the mouse position when the event occurred.
            The position is in world coordinates relative to the diagram's top-left.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs.ActionRequest">
            <summary>
            Gets or sets the action to take at the end 
            of the MouseAction event. 
            Setting this property allows you to
            prematurely complete, prematurely cancel, 
            or prolong a mouse action.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent">
            <summary>
            Types of events that can be raised for a MouseAction.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.Activate">
            <summary>
            The MouseAction has been activated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.MouseDown">
            <summary>
            A mouse button has been pressed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.MouseEnter">
            <summary>
            The mouse cursor has entered a shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.MouseLeave">
            <summary>
            The mouse cursor has left a shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.MouseHover">
            <summary>
            The mouse cursor is hovering over a shape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.MouseMove">
            <summary>
            The mouse cursor has moved.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.MouseUp">
            <summary>
            A mouse button has been released.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.MouseWheel">
            <summary>
            The mouse wheel has rotated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.Click">
            <summary>
            A Click event has occurred.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.DoubleClick">
            <summary>
            A DoubleClick event has occurred.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.Complete">
            <summary>
            The MouseAction should complete.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.Cancel">
            <summary>
            The MouseAction should cancel.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.Continue">
            <summary>
            The MouseAction should continue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.ContextMenuRequested">
            <summary>
            The context menu has been requested.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.LostFocus">
            <summary>
            The DiagramClientView has lost the focus.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.GotFocus">
            <summary>
            The DiagramClientView has received the focus.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEvent.Scrolled">
            <summary>
            The DiagramClientView has scrolled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ActionRequest">
            <summary>
            The types of actions that can be taken at the end of a MouseAction event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ActionRequest.CompleteAction">
            <summary>
            Request to complete the mouse action successfully; User is done with the mouse action.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ActionRequest.CancelAction">
            <summary>
            Request to cancel the mouse action altogether.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ActionRequest.ContinueAction">
            <summary>
            Request to continue with the mouse action.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DragDropPendingAction">
            <summary>
            The MouseAction that detects if Ole drag/drop should start.
            Once started, this MouseAction completes and then gives control 
            to Ole drag/drop.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragDropPendingAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Initializes a new instance of the DragDropPendingAction class.
            </summary>
            <param name="diagram">The diagram object that owns this MouseAction.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragDropPendingAction.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            When dragging has started, this MouseAction will complete and 
            Diagram.DoDragDrop will be called.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragDropPendingAction.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor to display at the specified mouse position.
            </summary>
            <param name="currentCursor">The existing cursor.</param>
            <param name="diagramClientView">The DiagramClientView requesting the cursor.</param>
            <param name="mousePosition">The cursor position in world units relative to the top-left of the diagram.</param>
            <returns>The cursor to display at the specified mouse position.</returns>
            <remarks>
            This method is called by the DiagramClientView if this MouseAction is active or
            if it is the potential MouseAction.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LassoAction">
            <summary>
            The MouseAction that allows selection using the rectangle
            defined by clicking and dragging.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LassoAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Initializes a new instance of the LassoAction class.
            </summary>
            <param name="diagram">The diagram object that owns this MouseAction.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LassoAction.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Saves the starting mouse position.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LassoAction.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Invalidates the old and new feedback.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LassoAction.OnDragCompleted(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Selects the shapes within the rectangle defined by the 
            starting mouse position and the current mouse position.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LassoAction.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor to display at the specified mouse position.
            </summary>
            <param name="currentCursor">The existing cursor.</param>
            <param name="diagramClientView">The DiagramClientView requesting the cursor.</param>
            <param name="mousePosition">The cursor position in world units relative to the top-left of the diagram.</param>
            <returns>The cursor to display at the specified mouse position.</returns>
            <remarks>
            This method is called by the DiagramClientView if this MouseAction is active or
            if it is the potential MouseAction.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LassoAction.DoPaintFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Called by the DiagramClientView to paint the feedback for the MouseAction.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LassoAction.Invalidate(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Invalidates the old and new feedback.
            </summary>
            <param name="diagramClientView">The DiagramClientView to invalidate.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction">
            <summary>
            The MouseAction that performs zoom.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Initializes a new instance of the PanZoomAction class.
            </summary>
            <param name="diagram">The diagram object that owns this MouseAction.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Saves the starting mouse position.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Invalidates old and new feedback.
            </summary>
            <param name="e">The DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.OnMouseWheel(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Zooms in and out.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.OnDiagramLostFocus(Microsoft.VisualStudio.Modeling.Diagrams.LostFocusEventArgs)">
            <summary>
            Cancels the MouseAction.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.OnDragCompleted(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Performs the zoom action given the rectangle specified by 
            the starting mouse position and the current mouse position.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.OnClicked(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Zooms in or out around the current point.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.OnDoubleClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Prevents the double-click from having any effect.
            </summary>
            <param name="e">A DiagramPointEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.OnContextMenuRequested(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called when the context menu is requested.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor to display at the specified mouse position.
            </summary>
            <param name="currentCursor">The existing cursor.</param>
            <param name="diagramClientView">The DiagramClientView requesting the cursor.</param>
            <param name="mousePosition">The cursor position in world units relative to the top-left of the diagram.</param>
            <returns>The cursor to display at the specified mouse position.</returns>
            <remarks>
            This method is called by the DiagramClientView if this MouseAction is active or
            if it is the potential MouseAction.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.ZoomCursor">
            <summary>
            Gets the zoom cursor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.DoPaintFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Called by the DiagramClientView to paint the feedback for the MouseAction.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PanZoomAction.Invalidate(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Invalidates the old and new feedback.
            </summary>
            <param name="diagramClientView">The DiagramClientView to invalidate.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction">
            <summary>
            The MouseAction that resizes shapes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.GrabHandle">
            <summary>
            Gets or sets the grab handle.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.SelectedShape">
            <summary>
            Gets or sets the shape being resized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Initializes a new instance of the ResizeAction class.
            </summary>
            <param name="diagram">The diagram object that owns this MouseAction.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Saves the starting mouse position.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Invalidates the old and new feedback.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.OnMouseUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            (Does nothing but call the base method. This override should be removed.)
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.OnDiagramLostFocus(Microsoft.VisualStudio.Modeling.Diagrams.LostFocusEventArgs)">
            <summary>
            Cancels the MouseAction.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.OnDragCompleted(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Performs the resize.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.OnMouseActionCanceled(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Invalidates the old feedback.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor to display at the specified mouse position.
            </summary>
            <param name="currentCursor">The existing cursor.</param>
            <param name="diagramClientView">The DiagramClientView requesting the cursor.</param>
            <param name="mousePosition">The cursor position in world units relative to the top-left of the diagram.</param>
            <returns>The cursor to display at the specified mouse position.</returns>
            <remarks>
            This method is called by the DiagramClientView if this MouseAction is active or
            if it is the potential MouseAction.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.DoPaintFeedback(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs)">
            <summary>
            Draws the resize feedback.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResizeAction.Invalidate(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Invalidates the old and new feedback.
            </summary>
            <param name="diagramClientView">The DiagramClientView to invalidate.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionState">
            <summary>
            The base class for all MouseAction states.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionState.#ctor">
            <summary>
            Initializes a new instance of the MouseActionState class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MouseActionState.Next(Microsoft.VisualStudio.Modeling.Diagrams.MouseAction)">
            <summary>
            Returns the next MouseAction state. 
            </summary>
            <param name="mouseAction">
            The MouseAction containing information to determine the next state. 
            The information includes: 
            (1) the current MouseAction event, and
            (2) the current mouse position.
            </param>
            <returns>The next MouseAction state.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.InactiveState">
            <summary>
            The MouseAction state that indicates that the MouseAction
            is not in use.  When a MouseAction is first created, it is in
            an inactive state.  The MouseAction must be activated before it
            can be used.  After a MouseAction completes or has been canceled, 
            it is once again inactivated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InactiveState.#ctor">
            <summary>
            Initializes a new instance of the InactiveState class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.InactiveState.Next(Microsoft.VisualStudio.Modeling.Diagrams.MouseAction)">
            <summary>
            Returns the next MouseAction state.
            Valid next states are:
            (1) HoveringState, if the current MouseAction event is Activate;
            (2) DragPendingState, if the current MouseAction event is MouseDown;
            (3) this state, for all other events.
            </summary>
            <param name="mouseAction">
            The MouseAction containing information to determine the next state. 
            The information includes: 
            (1) the current MouseAction event, and
            (2) the current mouse position.
            </param>
            <returns>The next MouseAction state.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DragPendingState">
            <summary>
            The MouseAction state that indicates that the user has pressed down
            the mouse button but not yet lifted up on the mouse button or not yet 
            moved the mouse far enough to initiate dragging.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragPendingState.#ctor">
            <summary>
            Initializes a new instance of the DragPendingState.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragPendingState.Next(Microsoft.VisualStudio.Modeling.Diagrams.MouseAction)">
            <summary>
            Returns the next MouseAction state.
            Valid next states are:
            (1) DraggingState, if the user has moved the mouse far enough to invoke a drag; 
            (2) ClickedState, if the user has lifted up on the mouse 
                button without moving it far enough to invoke a drag; 
            (3) DragCanceledState, if the current MouseAction state is Cancel;
            (4) this state, for all other events.
            </summary>
            <param name="mouseAction">
            The MouseAction containing information to determine the next state. 
            The information includes: 
            (1) the current MouseAction event, and
            (2) the current mouse position.
            </param>
            <returns>The next MouseAction state.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DraggingState">
            <summary>
            The MouseAction state that indicates that the user is actively dragging
            with the mouse.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DraggingState.#ctor">
            <summary>
            Initializes a new instance of the DraggingState class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DraggingState.Next(Microsoft.VisualStudio.Modeling.Diagrams.MouseAction)">
            <summary>
            Returns the next MouseAction state.
            Valid next states are:
            (1) DragCompletedState, if the current MouseAction event is MouseUp or Complete;
            (2) DragCanceledState, if the current MouseAction event is Cancel;
            (3) this state, for all other events.
            </summary>
            <param name="mouseAction">
            The MouseAction containing information to determine the next state. 
            The information includes: 
            (1) the current MouseAction event, and
            (2) the current mouse position.
            </param>
            <returns>The next MouseAction state.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DragCompletedState">
            <summary>
            The MouseAction state that indicates that dragging has completed.
            This is not to be confused with the ActionCompletedState.  This  
            DragCompletedState indicates that only the drag has been completed;  
            not the entire MouseAction.  The MouseAction can remain active even 
            after completing the drag.  This allows for multiple drag operations
            within a single MouseAction.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragCompletedState.#ctor">
            <summary>
            Initializes a new instance of the DragCompletedState class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragCompletedState.Next(Microsoft.VisualStudio.Modeling.Diagrams.MouseAction)">
            <summary>
            Returns the next MouseAction state.
            Valid next states are:
            (1) HoveringState, if the current MouseAction event is Continue;
            (2) ActionCanceledState, if the current MouseAction event is Cancel;
            (3) ActionCompletedState, if the current MouseAction event is Complete;
            (4) this state, for all other events.
            </summary>
            <param name="mouseAction">
            The MouseAction containing information to determine the next state. 
            The information includes: 
            (1) the current MouseAction event, and
            (2) the current mouse position.
            </param>
            <returns>The next MouseAction state.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DragCanceledState">
            <summary>
            The MouseAction state that indicates that dragging has been canceled.
            This is not to be confused with the ActionCanceledState.  This  
            DragCanceledState indicates that only the drag has been canceled;  
            not the entire MouseAction.  The MouseAction can remain active even 
            after canceling the drag.  This allows for multiple drag operations
            within a single MouseAction.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragCanceledState.#ctor">
            <summary>
            Initializes a new instance of the DragCanceledState class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DragCanceledState.Next(Microsoft.VisualStudio.Modeling.Diagrams.MouseAction)">
            <summary>
            Returns the next MouseAction state.
            Valid next states are:
            (1) HoveringState, if the current MouseAction state is Continue;
            (2) ActionCanceledState, if the current MouseAction state is Cancel;
            (3) ActionCompletedState, if the current MouseAction state is Complete;
            (4) state, for all other events.
            </summary>
            <param name="mouseAction">
            The MouseAction containing information to determine the next state. 
            The information includes: 
            (1) the current MouseAction event, and
            (2) the current mouse position.
            </param>
            <returns>The next MouseAction state.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ClickedState">
            <summary>
            The MouseAction state that indicates that the user has pressed down
            and lifted up on the mouse button without moving far enough to invoke
            a drag.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ClickedState.#ctor">
            <summary>
            Initializes a new instance of the ClickedState class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ClickedState.Next(Microsoft.VisualStudio.Modeling.Diagrams.MouseAction)">
            <summary>
            Returns the next MouseAction state.
            Valid next states are:
            (1) HoveringState, if the current MouseAction event is Continue;
            (2) ActionCanceledState, if the current MouseAction event is Cancel;
            (3) ActionCompletedState, if the current MouseAction event is Complete;
            (4) this state, for all other events.
            </summary>
            <param name="mouseAction">
            The MouseAction containing information to determine the next state. 
            The information includes: 
            (1) the current MouseAction event, and
            (2) the current mouse position.
            </param>
            <returns>The next MouseAction state.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.HoveringState">
            <summary>
            The MouseAction state that indicates that the MouseAction is
            active and waiting for events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HoveringState.#ctor">
            <summary>
            Initializes a new instance of the HoveringState class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.HoveringState.Next(Microsoft.VisualStudio.Modeling.Diagrams.MouseAction)">
            <summary>
            Returns the next MouseAction state.
            Valid next states are:
            (1) DragPendingState, if the current MouseAction event is MouseDown;
            (2) ActionCanceledState, if the current MouseAction event is Cancel;
            (3) ActionCompletedState, if the current MouseAction event is Complete;
            (4) this state, for all other events.
            </summary>
            <param name="mouseAction">
            The MouseAction containing information to determine the next state. 
            The information includes: 
            (1) the current MouseAction event, and
            (2) the current mouse position.
            </param>
            <returns>The next MouseAction state.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ActionCompletedState">
            <summary>
            The MouseAction state that indicates that the MouseAction has completed.
            This is not to be confused with the DragCompletedState.  This ActionCompletedState
            indicates that the entire MouseAction has been completed; not just the drag itself.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ActionCompletedState.#ctor">
            <summary>
            Initializes a new instance of the ActionCompletedState class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ActionCompletedState.Next(Microsoft.VisualStudio.Modeling.Diagrams.MouseAction)">
            <summary>
            Returns the next MouseAction state.
            The only valid next state is the InactiveState.
            </summary>
            <param name="mouseAction">
            The MouseAction containing information to determine the next state. 
            The information includes: 
            (1) the current MouseAction event, and
            (2) the current mouse position.
            </param>
            <returns>The next MouseAction state.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ActionCanceledState">
            <summary>
            The MouseAction state that indicates that the MouseAction has been canceled.
            This is not to be confused with the DragCanceledState.  This ActionCanceledState 
            indicates that the entire MouseAction has been canceled;  not just the drag itself.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ActionCanceledState.#ctor">
            <summary>
            Initializes a new instance of the ActionCanceledState class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ActionCanceledState.Next(Microsoft.VisualStudio.Modeling.Diagrams.MouseAction)">
            <summary>
            Returns the next MouseAction state.
            The only valid next state is the InactiveState.
            </summary>
            <param name="mouseAction">
            The MouseAction containing information to determine the next state. 
            The information includes: 
            (1) the current MouseAction event, and
            (2) the current mouse position.
            </param>
            <returns>The next MouseAction state.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeTypeDescriptionProvider">
            <summary>
            TypeDescriptionProvider for MoveableDecoratorHostShape, which will return the type descriptor of its parent shape instead.
            </summary>
            <remarks>
            Note that this doesn't derive from PresentationElementTypeDescriptionProvider, because PresentationElementTypeDescriptionProvider
            wants the PresentationElement to have an associated ModelElement. If there's no associated MEL (as in the case of 
            MoveableDecoratorHostShape), the implementation will just call ElementTypeDescriptionProvider.CreateTypeDescriptor(), 
            and there's no way to override this behavior. So we have to derive from TypeDescriptionProvider directly to override
            the behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Create type descriptor for given MoveableDecoratorHostShape, which will be the same as the type descriptor 
            for the parent shape. Even though MoveableDecoratorHostShape is selectable (the pre-requisite of being 
            moveable), it should behave as a normal DecoratorHostShape, which is not selectable. So a MoveableDecoratorHostShape
            is selected, we just show the properties of its parent shape, which is the same behavior of a normal DecoratorHostShape.
            </summary>
            <param name="parent">Parent type descriptor.</param>
            <param name="element">Model element to create type descriptor for.</param>
            <returns>Created type descriptor.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionPoint">
            <summary>
            ConnectionPoint wraps VGConnection objects from the graph object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ConnectionPointCollection">
            <summary>
            Handles a list of ConnectionPoints; makes sure the underlying collection in the graph object is kept in sync
            when connection points are removed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeTypeDescriptor">
            <summary>
            Specialized type descriptor for the Shape class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor,Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Creates a new ShapeTypeDescriptor
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PortGroupBoundsRules">
            <summary>
            Rules that constrain the overall bounds of a group of shapes that contain
            ports as a whole.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortGroupBoundsRules.GetCompliantGroupBounds(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Updates the GhostShapeCollection so that it complies with
            this GroupBoundsRules after the proposed location
            delta is applied.
            </summary>
            <param name="store">
            The store containing the ShapeElements that the ghost shapes refer to.
            </param>
            <param name="targetShape">
            The target parent shape if the source shapes are being reparented 
            or duplicated.  This parameter can be null, in which case the 
            source shapes are being repositioned.
            </param>
            <param name="ghostShapes">
            A collection of ghost shapes which describe ShapeElements 
            prior to the proposed location delta.
            This method should modify the ghost shape properties such 
            that the properties are compliant with this rule after 
            the proposed location delta is applied.
            </param>
            <param name="proposedLocationDelta">
            The proposed location delta in world units 
            to apply to each shape in the group.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortGroupBoundsRules.GetCompliantGroupBoundsForPortCollection(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Get Compliant GroupBounds For PortCollection
            </summary>
            <param name="store">store</param>
            <param name="targetShape">targetShape</param>
            <param name="ghostShapes">ghostShapes</param>
            <param name="proposedLocationDelta">propsedLocationDelta</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortGroupBoundsRules.GetCompliantGroupBoundsForPortsOnDifferentParentShapes(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Collections.ArrayList)">
            <summary>
            Calculate Compliant Group Bounds for Ports on Different Parent Shapes
            </summary>
            <param name="store">store</param>
            <param name="ghostShapes">ghostShapes</param>
            <param name="proposedLocationDelta">proposedLocationDelta</param>
            <param name="parentIds">parentIds</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortGroupBoundsRules.GetCompliantGroupBoundsForPortsOnSameParentShape(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.GhostShapeCollection,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.Port,System.Object)">
            <summary>
            Get Compliant GroupBounds ForPorts On Same ParentShape
            </summary>
            <param name="store">store</param>
            <param name="ghostShapes">ghostShapes</param>
            <param name="proposedLocationDelta">proposedLocationDelta</param>
            <param name="primaryShape">primaryShape</param>
            <param name="parentId">parentId</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacement">
            <summary>
            Port shape can be on one of the four sides of parent shape
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacement.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacement.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacement.Right">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacement.Top">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacement.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacementHelper.GetBottomPortChildren(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            List of children port shapes on the bottom side of this component.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacementHelper.GetTopPortChildren(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
            <summary>
            List of children port shapes on the bottom side of this component.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacementHelper.PositionChildPort(Microsoft.VisualStudio.Modeling.Diagrams.Port,Microsoft.VisualStudio.Modeling.Diagrams.NodeShape)">
             <summary>
             Auto place port shape.
             </summary>
             <remarks>
             Derived classes can override this to specialize placement behavior.
            
            	By default:
             1. A port is positioned on the left vertical edge beneath any existing ports.
             2. It then goes counter clockwise around the shape, until it finds an empty space.
             3. If multiple ports are added in a single action these should be distributed in the 
                available space.
             4. If it requires the height of the component shape needs to be increased to accommodate 
                the newly added ports. 
             </remarks>
             <param name="portShape"></param>
             <param name="parentShape"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacementHelper.OnParentShapeResized(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            This method is no longer invoked within DSL and is deprecated. 
            DSL now provides another hook: a virtual method:"OnParentNodeShapeChanged" on Microsoft.VisualStudio.Modeling.DiagramsNodeShape class.
            This method is invoked on a child NodeShape whenever the Parent NodeShape is moved/resized.
            </summary>
            <param name="parentShape">parentShape</param>
            <param name="oldBounds">oldBounds</param>
            <param name="newBounds">newBounds</param>
            <remarks>deprecated</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacementHelper.FindPerimeterRotation(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.PortPlacement,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.PortPlacement)">
            <summary>
            Given initial and final bounds of the port, find the rotation distance on the 
            perimeter of the component and the rotation direction. Clockwise is positive and 
            anticlockwise is negative.
            Assumption: initialBounds and finalBounds are a small delta apart. 
            Hence called between two GetCompliantBounds calls
            </summary>
            <param name="initialBounds">Initial port bounds relative to the parent</param>
            <param name="initialPlacement"></param>
            <param name="finalBounds">Final port bounds relative to the parent</param>
            <param name="finalPlacement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortPlacementHelper.RotateOnPerimeter(Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,System.Double,Microsoft.VisualStudio.Modeling.Diagrams.PortPlacement)">
            <summary>
            
            </summary>
            <param name="childBounds"></param>
            <param name="perimeterRotation"></param>
            <param name="portPlacement"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.InternalPresentationElementTypeDescriptionProvider">
            <summary>
            Returns a new instance of PresentationElementTypeDescriptor.
            </summary>
            <remarks>The original "PresentationElementDescriptionProvider" class has been marked as obsolete.
            The original class only created a PresentationElementTypeDescriptor if there was a mel linked
            to the pel. The PresentationEelementTypeDescriptor now handles the mel being null. The new virtual
            method introduced on the old class also didn't make sense as it required both a pel and mel.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementTypeDescriptionProvider">
            <summary>
            PresentationElementTypeDescriptionProvider provides the wrapper class which encapsulates the ModelElement object. This class is invoked
            when property grid wants to render the ModelElement object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementTypeDescriptionProvider.CreateTypeDescriptor(System.ComponentModel.ICustomTypeDescriptor,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Provides a custom type descriptor for a PresentationElement. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementTypeDescriptionProvider.CreatePresentationElementTypeDescriptor(System.ComponentModel.ICustomTypeDescriptor,Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Create a new PresentationElementTypeDescriptor for the property grid to render the properties. Class derives
            from PresentationElementTypeDescriptionProvider can override this method to provide his/her own type descriptor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementTypeDescriptor">
            <summary>
            Class for providing ModelElement TypeDesriptor for the propety grid support!
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor,Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            ctor for creating the wrapper class which represents the element to be consumed by the property grid.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementTypeDescriptor.PresentationElement">
            <summary>
            Returns the presentation model element described by this descriptor 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementTypeDescriptor.RepresentedModelElement">
            <summary>
            Returns the model element represented by the presentation element
            being described.
            </summary>
            <remarks>Will return null if this.PresentationElement is null (e.g. if a type-based
            descriptor), or if the presentation element is not linked to a MEL.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementTypeDescriptor.GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type Attribute that is used as a filter. </param>
            <returns>An array of type Attribute that represents the properties for this component instance that match the given set of attributes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementTypeDescriptor.IncludeOppositeRolePlayerProperties(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            For all the relationships this model element participate, return whether to display the opposite role player's ElementName property if there's one
            </summary>
            <param name="requestor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementTypeDescriptor.GetClassName">
            <summary>
            Gets the class name displayed in the property grid.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementTypeDescriptor.GetComponentName">
            <summary>
            Gets the component name displayed in the property grid.
            </summary>
            <returns>Returns the component name of the represented model element, or an empty
            string if no represented model element / the represented model element does not
            have a name.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ResourceCache">
            <summary>
            ResourceCache
            Provides a central cache for Resource Descriptor objects
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResourceCache.GetPen(Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo)">
            <summary>
            Gets the local instance of the pen.
            This is a singleton.  Do not dispose - this will crash!
            Use immediately.  Use GetPenCopy if another pen is needed!
            </summary>
            <param name="penStyleSetInfo"></param>
            <returns>Appropriate Pen</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResourceCache.GetPenCopy(Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo)">
            <summary>
            Gets an unique copy of the pen.  Caller is resposible for disposal.
            </summary>
            <param name="penStyleSetInfo"></param>
            <returns>Unique copy of a pen</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResourceCache.GetBrush(Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo)">
            <summary>
            Gets the local instance of the brush.
            This is a singleton.  Do not dispose - this will crash!
            Use immediately.  Use GetBrushCopy if another brush is needed!
            </summary>
            <param name="brushStyleSetInfo"></param>
            <returns>Appropriate Brush</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ResourceCache.GetBrushCopy(Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo)">
            <summary>
            Gets an unique copy of the brush.  Caller is resposible for disposal.
            </summary>
            <param name="penStyleSetInfo"></param>
            <returns>Unique copy of a brush</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction">
            <summary>
            The base mouse action that selects shapes under the mouse.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Initializes a new instance of the SelectAction class.
            </summary>
            <param name="diagram">The diagram object that owns this MouseAction.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Selects the shape under the mouse.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.OnContextMenuRequested(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Completes the select action first so that the context menu has 
            a valid selection to work with.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.OnClicked(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Performs any deferred select action if the deferredSelection member is set.
            </summary>
            <param name="e">A MouseActionEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.OnDiagramLostFocus(Microsoft.VisualStudio.Modeling.Diagrams.LostFocusEventArgs)">
            <summary>
            Cancels the action if the view loses the focus.
            </summary>
            <param name="e">LostFocusEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.OnMouseActionDeactivated(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Cleans up any member variables, such as the deferredSelection member.
            </summary>
            <param name="e">A DiagramEventArgs that contains the event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.Select(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Selects the first selectable diagram item (shape, field, or subfield) 
            under the mouse cursor and sets focus to the first item that can receive focus.
            </summary>
            <param name="mouseArgs">A DiagramMouseEventArgs that contains the event data.</param>
            <remarks>
            The first selectable or focusable item is found by querying the subfield first, 
            then its parent field, then its parent shape, and then on up through the shape parent hierarchy.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.ReplaceSelection(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Replaces the existing selection with the specified item.
            </summary>
            <param name="selection">The collection of selected items to update.</param>
            <param name="selectableItem">
            The DiagramItem that will replace the existing selection.
            </param>
            <param name="focusableItem">
            The DiagramItem that will become the focused item in the selection.
            This can be different from the selectable item.
            </param>
            <param name="preserveSelectionIfItemAlreadySelected">
            A value of true leaves the selection untouched if the item is already in the selection.
            </param>
            <remarks>
            If the item is already in the selection, this function will
            hold on to a reference to the item until the Clicked or 
            DraggingBegun event to determine whether to deselect 
            the multiselection.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.ExtendSelection(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Extends the selection to include the specified item.
            </summary>
            <param name="selection">The collection of selected items to update.</param>
            <param name="selectableItem">
            The DiagramItem that will be added to the existing selection.
            </param>
            <param name="focusableItem">
            The DiagramItem that will become the focused item in the selection.
            This can be different from the selectable item.
            </param>
            <remarks>
            This method will call the ShapeField's SetSelectionRange method 
            if the selection is being extended from a valid anchor subfield
            to another subfield within the same field.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.ToggleSelection(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Toggles the specified item into or out of the existing selection.  
            If the item is not in the selection, the item is added.
            If the item is in the selection, the item is removed.
            </summary>
            <param name="selection">The collection of selected items to update.</param>
            <param name="selectableItem">
            The DiagramItem that will be toggled into or out of the existing selection.
            </param>
            <param name="focusableItem">
            The DiagramItem that will become the focused item in the selection.
            This can be different from the selectable item.
            </param>
            <remarks>
            If the item is already in the selection, this method will
            hold on to a reference to the item until the Clicked 
            event to determine whether to remove it from the selection. 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.IsDiagramSelectedOnly(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Gets a value indicating whether the diagram is the only selected item in the selection.
            </summary>
            <param name="selection">The current selection.</param>
            <returns>true if the diagram is the only selected item in the selection. Otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.DeferredFocusableItem">
            <summary>
            Gets the item that will become the selection's focused item if and when the OnClicked event occurs.
            </summary>
            <value>The item that will become the selection's focused item if and when the OnClicked event occurs.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectAction.DeferredSelectableItem">
            <summary>
            Gets the item that the selection will be set to if and when the OnClicked event occurs.
            </summary>
            <value>The item that the selection will be set to if and when the OnClicked event occurs.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection">
            <summary>
            
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ShapeSelectionChanging">
            <summary>
            Occurs when the selection is about to change.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ShapeSelectionChanged">
            <summary>
             Occurs when the selection has changed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.SelectionChangedByDeletion">
            <summary>
            Occurs when the selection is about to change because a ModelElement that
            an item in the selection refers to has been deleted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the SelectedShapesCollection class.
            </summary>
            <param name="diagramClientView"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.SelectionRules">
            <summary>
            Gets the DiagramSelectionRules object that constrains how 
            ShapeElements can be added and removed from the selection.
            </summary>
            <remarks>
            To define your own constraints on the selection, override
            your Diagram's SelectionRules property and return your own
            DiagramSelectionRules derived class.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.OnShapeSelectionChanging(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.OnShapeSelectionChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.OnSelectionChangedByDeletion(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            Raises the SelectionChangedByDeletion event.
            </summary>
            <param name="e">
            The DiagramItemEventArgs that contains the DiagramItem which 
            refers to a ModelElement that has been deleted.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.RepresentedElements">
            <summary>
            Gets corresponding ModelElements that represent this selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.PrimaryItem">
            <summary>
            Gets the primary DiagramItem in the selection.
            </summary>
            <remarks>
            Setting the primary item in the selection does 
            not set the focus.  The focus must be set separately.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.FocusedItem">
            <summary>
            Gets or sets the DiagramItem that has the focus.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.AnchorItem">
            <summary>
            Gets or sets the DiagramItem that serves as the anchor for extending the selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.TopLevelItems">
            <summary>
            Gets the top level items in the selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.GridSize">
            <summary>
            Gets the grid size for the selection.  The grid size is determined 
            by finding the top-level node shape in the selection that is on the 
            largest grid and returning its grid size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Add(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Adds a DiagramItem to the current selection.
            </summary>
            <param name="diagramItem">The DiagramItem to add to the current selection.</param>
            <remarks>
            The added DiagramItem automatically becomes the primary DiagramItem.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Remove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Removes a DiagramItem from the current selection.
            </summary>
            <param name="diagramItem">The DiagramItem to remove from the current selection.</param>
            <remarks>
            If a DiagramItem does not exist in the selection, the DiagramItem is ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Set(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Replaces the current selection with a new single selection.
            </summary>
            <param name="diagramItem">The DiagramItem that is to replace the current selection.</param>
            <remarks>
            If the DiagramItem is null, then the selection is cleared.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Add(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection)">
            <summary>
            Adds the specified DiagramItems to the current selection.
            </summary>
            <remarks>
            The last DiagramItem in the collection becomes the primary DiagramItem.
            If a DiagramItem in the collection is already in the selection,
            the DiagramItem is ignored.
            </remarks>
            <param name="diagramItems">The collection of DiagramItems to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Remove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection)">
            <summary>
            Removes the specified DiagramItems from the current selection.
            </summary>
            <remarks>
            If a DiagramItem does not exist in the selection, the DiagramItem
            is ignored.
            </remarks>
            <param name="diagramItems">The collection of DiagramItems to remove</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Set(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection)">
            <summary>
            Replaces the current selection with a new selection.
            </summary>
            <param name="diagramItems">The collection of DiagramItems that is to replace the current selection.</param>
            <remarks>
            If the DiagramItemCollection is null, then the selection is cleared.
            Clears deferred selection before taking any actions.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Toggle(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Toggles the specified DiagramItem into or out of the selection;
            i.e., if the DiagramItem is selected, it is deselected.  If the DiagramItem
            is not selected, it is selected.
            </summary>
            <param name="diagramItem">The diagramItem to toggle into or out of the selection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Toggle(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection)">
            <summary>
            Toggles the specified DiagramItems into or out of the selection;
            i.e., if a DiagramItem is selected, it is deselected.  If a DiagramItem
            is not selected, it is selected.
            </summary>
            <param name="diagramItems">The diagramItems to toggle into or out of the selection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Clear">
            <summary>
            Clears the current selection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ClearDeferredSelection">
            <summary>
            Clears the deferred selection
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.SelectFocusedItemOrAncestor">
            <summary>
            Selects the currently focused item in the selection (which
            may or may not be selected).  If it is not selectable, the 
            parent chain will be searched for the first selectable 
            ancestor.  The focused item remains unchanged.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.FindFirstSelectableAncestor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Finds the first selectable DiagramItem up the parent hierarchy.
            </summary>
            <param name="focusedItem">The focused item to start the search from.</param>
            <returns>The first selectable DiagramItem up the parent hierarchy.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.FindFirstFocusableDiagramItem(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Given the specified diagram item, find the first 
            diagram item that can receive focus.
            If the specified diagram item can receive focus, a clone of it is returned.
            If the diagram item is not focusable, then its first focusable
            descendant is returned, if any.  If that search fails, then the
            parent hierarchy is traversed for the first focusable ancestor.
            </summary>
            <param name="startFromItem">The DiagramItem from which to start the search.</param>
            <returns>The first diagram item that can receive focus</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.FindFirstFocusableDescendant(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Returns the DiagramItem's first non-selectable, focusable descendant in the navigation sequence.  This method
            returns null if a focusable descendant was not found.
            </summary>
            <param name="diagramItem">The parent DiagramItem whose descendants will be searched.</param>
            <returns>The DiagramItem's first focusable descendant in the navigation sequence.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.FindFirstFocusableAncestor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Returns the DiagramItem's first focusable ancestor. This method
            returns null if a focusable ancestor was not found.
            </summary>
            <param name="diagramItem">The DiagramItem whose ancestors will be searched.</param>
            <returns>The DiagramItem's first focusable ancestor.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.FindFirstSelectableDiagramItem(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Given the specified diagram item, find the first 
            selectable diagram item.
            If the specified diagram item is selectable, a clone of it is returned.
            If the diagram item is not selectable, then the parent hierarchy
            is traversed for the first selectable ancestor.
            </summary>
            <param name="startFromItem">The DiagramItem from which to start the search.</param>
            <returns>The first diagram item that can be selected.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.FindFirstSelectedAncestor(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Finds the first ancestor that is in this collection.
            </summary>
            <param name="item">The DiagramItem whose ancestor is to be searched for in this collection.</param>
            <returns>The first ancestor that is in this collection.  If an ancestor is not found, null is returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.DeferredAdd(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Defers adding a DiagramItem to the selection until ElementEventsEnded is raised.
            The DeferredAdd, DeferredRemove, DeferredPrimaryItem, and DeferredClear 
            methods define the parameters to use in a single call to set the selection 
            when ElementEventsEnded is raised.
            </summary>
            <param name="diagramItem">The DiagramItem to add to the selection.</param>
            <remarks>This method must be called during a transaction since the selection is deferred to ElementEventsEnded.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.DeferredRemove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Defers removing a DiagramItem from the selection until ElementEventsEnded is raised.
            The DeferredAdd, DeferredRemove, DeferredPrimaryItem, and DeferredClear 
            methods define the parameters to use in a single call to set the selection 
            when ElementEventsEnded is raised.
            </summary>
            <param name="diagramItem">The DiagramItem to remove from the selection.</param>
            <remarks>This method must be called during a transaction since the selection is deferred to ElementEventsEnded.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.DeferredRemoveInternal(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean@)">
            <summary>
            Defers removing a DiagramItem from the selection until ElementEventsEnded is raised.
            The DeferredAdd, DeferredRemove, DeferredPrimaryItem, and DeferredClear 
            methods define the parameters to use in a single call to set the selection 
            when ElementEventsEnded is raised.
            </summary>
            <param name="diagramItem">The DiagramItem to remove from the selection.</param>
            <param name="alreadyDeferred">set to true if the diagramItem is already marked to be removed from the selection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.DeferredPrimaryItem(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Defers setting the primary item in the selection until ElementEventsEnded is raised.
            The DeferredAdd, DeferredRemove, DeferredPrimaryItem, and DeferredClear 
            methods define the parameters to use in a single call to set the selection 
            when ElementEventsEnded is raised.
            </summary>
            <param name="diagramItem">The DiagramItem to set as the primary item in the selection.</param>
            <remarks>This method must be called during a transaction since the selection is deferred to ElementEventsEnded.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.DeferredClearBeforeAdditions">
            <summary>
            Defers clearing the selection until ElementEventsEnded is raised.
            This clears the selection first, and then any deferred additions or
            removals are applied.
            The DeferredAdd, DeferredRemove, DeferredPrimaryItem, and DeferredClear 
            methods define the parameters to use in a single call to set the selection 
            when ElementEventsEnded is raised.
            </summary>
            <remarks>This method must be called during a transaction since the selection is deferred to ElementEventsEnded.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.IsDeferredSelectionPending">
            <summary>
            Gets a value indicating whether a deferred selection is pending.
            </summary>
            <value>true if a deferred selection is pending.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.SetDeferredSelection">
            <summary>
            Sets the selection using the information gathered from DeferredAdd, 
            DeferredRemove, DeferredPrimaryItem, and DeferredClear.  If no 
            deferred information is available, then this method does nothing.
            This method is intended to be called only during OnElementEventsEnded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Contains(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Gets a value indicating whether the selection contains the specified DiagramItem.
            </summary>
            <param name="diagramItem"></param>
            <returns>true if the specified DiagramItem is found in the selection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.GetDiagramItemsContainingShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a collection of diagram items in the selection 
            whose Shape property is the specified shape.
            </summary>
            <param name="shape">The shape to find.</param>
            <returns>A collection of diagram items in the selection whose Shape property is the specified shape.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.BoundingBox">
            <summary>
            Gets the bounding rectangle surrounding all selected 
            ShapeElements in world units relative to the diagram's top-left.
            </summary>
            <remarks>
            The coordinate system increases positively down and to the right.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.EnsureVisible">
            <summary>
            Ensures that the selection is within the view.  If it is
            not, it is centered in the view.
            If the selection is the diagram, then nothing happens.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.EnsureVisible(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView.EnsureVisiblePreferences)">
            <summary>
            Ensures that the selection is within the view.  
            If the selection is the diagram, then nothing happens.
            </summary>
            <param name="preferences">Preferences on how the selection should be brought into view.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.InternalSetSelection(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean)">
            <summary>
            Sets the selection
            </summary>
            <param name="proposedItemsToAdd">DiagramItems to add to the selection.</param>
            <param name="proposedItemsToRemove">DiagramItems to remove from the selection.</param>
            <param name="proposedPrimaryItem">Primary DiagramItem.  A null value signifies that 
            the last DiagramItem in the selection is assumed to be the primary DiagramItem.</param>
            <param name="clearSelection">true if the selection should be cleared first before 
            filtering the selection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Invalidate">
            <summary>
            Invalidates the current selection of ShapeElements
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ElementDeletedListener">
            <summary>
            This object will listen to element deletions and notify this object when relevant deletions occur.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.EditItem">
            <summary>
            Gets the item to edit.  This is typically the FocusedItem.
            </summary>
            <value>The item to edit.  This is typically the FocusedItem.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.CanEditValue(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether this DiagramItem can be edited.
            </summary>
            <param name="view">The DiagramClientView that will host the in-place editor.</param>
            <returns>true if this DiagramItem can be edited.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Invoke the in-place editor for this DiagramItem.
            </summary>
            <param name="view">The DiagramClientView that will host the in-place editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.HasPendingEdit(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether in-place editing is active.
            </summary>
            <param name="view">The DiagramClientView that would host the in-place editor.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.CommitPendingEdit(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Commits the in-place edit.
            </summary>
            <param name="view">The DiagramClientView that is hosting the in-place editor.</param>
            <returns>true if the commit succeeded. Otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.Count">
            <summary>
            Gets the number of ShapeElements in the selection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the ShapeElements of the selection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the ShapeElements copied from the selection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.CopyTo(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem[],System.Int32)">
            <summary>
            Copies the DiagramItems of the selection to a DiagramItem[] array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional DiagramItem[] array that is the destination of the DiagramItems copied from the selection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the DiagramItem collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the DiagramItem collection.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ElementDeletedManager">
            <summary>
            Notifies the SelectedShapesCollection object when a relevant 
            ModelElement is deleted. A relevant ModelElement is one that
            is referenced by items in the SelectedShapesCollection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ElementDeletedManager.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Initializes a new instance of the ElementDeletedManager class.
            </summary>
            <param name="store">The store that will be listened to.</param>
            <param name="selection">The selection that will be notified when relevant deletions occur.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ElementDeletedManager.Add(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Adds a relevant DiagramItem.  If the ModelElements that this item 
            refers to are deleted, the selection will be notified.
            </summary>
            <param name="diagramItem">The relevant DiagramItem.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ElementDeletedManager.Remove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Removes a relevant DiagramItem.  The selection will no longer be notified
            when the ModelElements that this DiagramItem refers to are deleted.
            </summary>
            <param name="diagramItem">The DiagramItem that should no longer be relevant.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ElementDeletedManager.Clear">
            <summary>
            Removes all DiagramItems from the list of relevant DiagramItems.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ElementDeletedManager.Disposed">
            <summary>
            Indicates whether this object has been disposed
            </summary>
            <value>true if object has been disposed</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ElementDeletedManager.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection.ElementDeletedManager.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing">false if finalizing</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SelectionChangedByDeletionEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSelectionRules.GetCompliantSelection(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Called by the design surface to allow selection filtering
            </summary>
            <param name="currentSelection">[in] The current selection before any ShapeElements are added or removed.</param>
            <param name="proposedItemsToAdd">[in/out] The proposed DiagramItems to be added to the selection.</param>
            <param name="proposedItemsToRemove">[in/out] The proposed DiagramItems to be removed from the selection.</param>
            <param name="primaryItem">[in/out] The proposed DiagramItem to become the primary DiagramItem of the selection. 
            A null value signifies that the last DiagramItem in the resultant selection should be assumed as the 
            primary DiagramItem.</param>
            <returns>true if some or all of the selection was accepted; false if the entire selection proposal 
            was rejected. If false, appropriate feedback will be given to the user to indicate that the
            selection was rejected.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GeneralDiagramSelectionRules.GetCompliantSelection(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Called by the design surface to allow selection filtering
            </summary>
            <param name="currentSelection">[in] The current selection before any ShapeElements are added or removed.</param>
            <param name="proposedShapesToAdd">[in/out] The proposed DiagramItems to be added to the selection.</param>
            <param name="proposedShapesToRemove">[in/out] The proposed DiagramItems to be removed from the selection.</param>
            <param name="primaryShape">[in/out] The proposed DiagramItem to become the primary DiagramItem of the selection. 
            A null value signifies that the last DiagramItem in the resultant selection should be assumed as the 
            primary DiagramItem.</param>
            <returns>true if some or all of the selection was accepted; false if the entire selection proposal 
            was rejected. If false, appropriate feedback will be given to the user to indicate that the
            selection was rejected.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GeneralDiagramSelectionRules.ProposedSelection(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemCollection)">
            <summary>
            Returns a hashtable that maps shapes to DiagramItems.
            </summary>
            <param name="currentSelection"></param>
            <param name="proposedShapesToAdd"></param>
            <param name="proposedShapesToRemove"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SelectionContext">
            <summary>
            Abstract class implementing a method to get the current selection state for a given selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionContext.KnownSelectionStates">
            <summary>
            Override to define the set of supported selection states, ordering 
            determines which states will be checked first.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionContext.GetSelectionState(System.Collections.ICollection)">
            <summary>
            Iterates the known selection states, and returns the first that is applicable.
            </summary>
            <param name="actualSelection"></param>
            <returns>the first selection state that is appliable to the specified selection</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionContext.Reset">
            <summary>
            Resets internal state of selection context and all its states.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState">
            <summary>
            Abstract class representing any selection state.  Provides the interface for querying infomation
            about the specified selection, including: the ActualSelection, CoercedSelection, and weather or not
            a specifc command is to be filtered out for the selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.CoercedSelectionCache">
            <summary>
            cache for the coerced selection
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.CacheCoercedSelection(System.Collections.ICollection)">
            <summary>
            Cache the specified collection.
            </summary>
            <param name="coercedSelection"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.Initialize(System.Collections.ICollection)">
            <summary>
            specifies the actual selection to operate upon.
            </summary>
            <param name="actualSelection"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.ActualSelection">
            <summary>
            Gets the actual selection.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.IsCoercible">
            <summary>
            Determines if the actual selection can be coerced.  Togegher IsCoercible and
            IsCoercionFailure distinguish between coercion failure, and no coercion available.
            </summary>
            <value>true if the seleciton can be coerced (i.e. the selection state does define coercion rules).</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.IsCoercionFailure">
            <summary>
            Togegher IsCoercible and IsCoercionFailure distinguish between coercion failure, and no coercion available.
            </summary>
            <value>
            true if the actual selection can be coerced, but the coercion fails (due coercion rules.)  
            Note: coercion failure is a "normal" occurance, and not an error.
            </value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.HasCoercion">
            <summary>
            Determines if the selection has a valid coercion.
            </summary>
            <value>true if the actual selection is coercable and its coercion does not fail.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.CoercedSelection">
             <summary>
             Gets the coerced selection by applying coercion rules to the actual selection.
            
             NOTE: 
             The returned value can be null.  A null coercion indicates that the selection
             state doesn't define coercion rules (i.e. a multiple seleciton including only  
             comment connectors is covered by the GeneralSelection state, which doesn't 
             define any coercions rules, so the seleciton's coercion is null).  
             
             If coercion rules are defined for a selection state, but the coercion fails 
             (as would be the case for a selection including several components belonging 
             to different zones), the coerced selection exists but is empty.
            
             These helpers can be used to demystify the results of coercing a selection: 
             * IsCoercible - true if the seleciton can be coerced (i.e. the selection state does define coercion rules). CoercedSelection will return a collection, but it may be empty.
             * IsCoercionFailure - true if the actual selection can be coerced, but the coercion fails (due coercion rules.) CoercedSelection will be an empy collection.
             * HasCoercion - true if the actual selection is coercable and its coercion does not fail.  CoercedSelection will return a non-empty collection.
             </summary>
             <value>Collection of pels/mels in the coerced selection.  Can be null.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.CoercedSelectionPresentationElements">
             <summary>
             It is possible for the CoercedSelection to include Pels and Mels which are  
             associated with Pels that are not already included.
            
             This method returns a collection which excludes any Mels.
             </summary>
             <value>Collection of pels in the coerced selection. Can be null.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.CoercedSelectionModelElements">
             <summary>
             It is possible for the CoercedSelection to include Pels and Mels which are  
             associated with Pels that are not already included.
            
             This method returns a list that replaces the Pels in the coerced selection 
             with their associated Mels, plus any mels from the coerced selection that did not have
             pels.
             </summary>
             <value>Collection of mels in the coerced selection. Can be null.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.CoercionCompliantSelection">
            <summary>
            Returns the list of selected objects which comply with the coercion rules.
            If the selection is coercable, then the coerced selection will be returned; if 
            there is a coercion failure the list will be empty.  If there are no coercion 
            rules (!IsCoercable), then the actual selection is returned.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.IsActualSelectionMixed">
            <summary>
            True if all selected objects in the actual selection are of the same type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.IsCoercedSelectionMixed">
            <summary>
            True if all selected objects in the coerced selection are of the same type.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.IsApplicable(System.Collections.ICollection)">
            <summary>
            True if the SelectionState appiles to the specified selection (actualSelection.)
            </summary>
            <param name="actualSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.IsCommandToBeFilteredOut(System.ComponentModel.Design.CommandID)">
            <summary>
            True if the specified command should not be enabled for this selection state.
            The method is evaluated for the coerced selection.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.IsCommandToBeFilteredOutForSingleSelection(System.ComponentModel.Design.CommandID)">
            <summary>
            True if the specified command should not be enabled for this selection state.
            The method is evaluated for the coerced selection.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.IdentifyCommandsToBeFilteredOutForSingleSelection(Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection)">
            <summary>
            Override to identify the commands which are not valid in a single selection scenario, for this 
            selection state.
            </summary>
            <param name="invalidCommands"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.IsCommandToBeFilteredOutForMultipleSelection(System.ComponentModel.Design.CommandID)">
            <summary>
            True if the specified command should not be enabled for this selection state.
            The method is evaluated for the coerced selection.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionState.IdentifyCommandsToBeFilteredOutForMultipleSelection(Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection)">
            <summary>
            Override to identify the commands which are not valid in a single selection scenario, for this 
            selection state.
            </summary>
            <param name="invalidCommands"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GeneralSelection">
            <summary>
            Handles general selections not covered by other selection states.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GeneralSelection.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GeneralSelection.IsApplicable(System.Collections.ICollection)">
            <summary>
            Determines if this selection state is apppropriate for use with the specified selection.
            </summary>
            <param name="actualSelection"></param>
            <returns>always returns true</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GeneralSelection.IsCommandToBeFilteredOutForMultipleSelection(System.ComponentModel.Design.CommandID)">
            <summary>
            True if the specified command should not be enabled for this selection state.
            The method is evaluated for the coerced selection.
            </summary>
            <param name="command"></param>
            <returns>true if the specified command is to be disabled for this (coerced) selection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GeneralSelection.IdentifyCommandsToBeFilteredOutForMultipleSelection(Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection)">
            <summary>
            Override to identify the commands which are not valid.
            </summary>
            <param name="invalidCommands"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.EmptySelection">
            <summary>
            Handles empty selections.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EmptySelection.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.EmptySelection.IsApplicable(System.Collections.ICollection)">
            <summary>
            Determines if this selection state is appropriate for use with the specified selection.
            </summary>
            <param name="actualSelection"></param>
            <returns>true iff the selection is empty.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.EmptySelection.CoercedSelection">
            <summary>
            We need to return an empty collection here to cause a coercion failure.
            This is a bit odd, but necessary given implementation of SelectionState.IsCoercionFailure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.EmptySelection.Instance">
            <summary>
            Singleton EmptySelection instance
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection.Add(Microsoft.VisualStudio.Modeling.Diagrams.SelectionState)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection.IndexOf(Microsoft.VisualStudio.Modeling.Diagrams.SelectionState)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection.Insert(System.Int32,Microsoft.VisualStudio.Modeling.Diagrams.SelectionState)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection.Remove(Microsoft.VisualStudio.Modeling.Diagrams.SelectionState)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection.Contains(Microsoft.VisualStudio.Modeling.Diagrams.SelectionState)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection.OnValidate(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection.CopyTo(Microsoft.VisualStudio.Modeling.Diagrams.SelectionStateCollection,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection.Add(System.ComponentModel.Design.CommandID)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection.IndexOf(System.ComponentModel.Design.CommandID)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection.Insert(System.Int32,System.ComponentModel.Design.CommandID)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection.Remove(System.ComponentModel.Design.CommandID)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection.Contains(System.ComponentModel.Design.CommandID)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection.CopyTo(Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommandIdCollection.OnValidate(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializer">
            <summary>
            Customized part of BinaryLinkShapeSerializer. We want to special-case BinaryLinkShape which connects to relationship MELs
            so that the relationship doesn't have to be marked with SerializeID and UseFullForm, as long as the relationship doesn't 
            allow multiple instances between the same two ends.
            </summary>
            <summary>
            Serializer BinaryLinkShapeSerializer for DomainClass BinaryLinkShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializer.UseRelationshipId(Microsoft.VisualStudio.Modeling.ElementLink,Microsoft.VisualStudio.Modeling.SerializationContext)">
            <summary>
            Calculate whether the BinaryLinkShape should serialize its relationship to the presented link using an Id or its source and target shapes.
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializer.ReassociateConnectorToLink(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShape)">
            <summary>
            Fix up a BinaryLinkShape to connect to the underlying ElementLink.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Reads in attributes on the BinaryLinkShape. We customize it here to reads in the type of the target ElementLink if it was
            written out.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializer.ReadElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Reads in child elements. We customize it here to skip the target ElementLink instance if it's not AllowDuplicates=true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Writes out attributes on this BinaryLinkShape. We customize it here to write out the type of the target ElementLink if it will
            be skipped by WriteElements() method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializer.WriteElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Writes out child elements. We customize it here to skip the target ElementLink instance if it's not AllowDuplicates=true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializer.#ctor">
            <summary>
            BinaryLinkShapeSerializer Constructor
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehavior">
            <summary>
            A DomainXmlSerializationBehavior implementation for defined behavior CoreDesignSurfaceSerializationBehavior.
            This is the concrete type of the double-derived implementation.
            </summary>
            <summary>
            A DomainXmlSerializationBehavior implementation for defined behavior CoreDesignSurfaceSerializationBehavior.
            This is the concrete type of the double-derived implementation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehavior.CustomSerializerTypes">
            <summary>
            Provides custom serializer types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehavior.instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehavior.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehavior.#ctor">
            <summary>
            Private constructor to prevent public instantiation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase">
            <summary>
            Helper class for serializing and deserializing CoreDesignSurface models.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.InitializeSerialization(Microsoft.VisualStudio.Modeling.Store)">
            <summary>
            Ensure that moniker resolvers and domain element serializers are installed properly on the given store, 
            so that deserialization can be carried out correctly.
            </summary>
            <param name="store">Store on which moniker resolvers will be set up.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.InitializeSerializationContext(Microsoft.VisualStudio.Modeling.Partition,Microsoft.VisualStudio.Modeling.SerializationContext,System.Boolean)">
            <Summary>
            Called by the serialization helper to allow any necessary setup to be done on each load / save.
            </Summary>
            <param name="partition">The partition being serialized.</param>
            <param name="serializationContext">The current serialization context instance.</param>
            <param name="isLoading">Flag to indicate whether the file is being loaded or saved.</param>
            <Remarks>The base implementation does nothing</Remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.GetDirectory(Microsoft.VisualStudio.Modeling.Store)">
            <summary>
            Return the directory of serializers to use
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.GetMonikerResolvers(Microsoft.VisualStudio.Modeling.Store)">
            <summary>
            This method returns the moniker resolvers for each of the domain models in the store
            </summary>
            <param name="store">Store on which the moniker resolvers are set up.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.WriteExtensions(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write extension element data inside the current XML element
            </summary>
            <param name="serializationContext">The current serialization context instance.</param>
            <param name="element">The element whose attributes have just been written.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <remarks>The default implemenation is to write out all non-embedded extension elements,
            regardless of whether they relate to the current element or not.
            The additional data should be written as a series of one or more
            XML elements.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.ReadExtensions(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Read any extension data written inside this XML element
            </summary>
            <param name="serializationContext">The current serialization context instance.</param>
            <param name="element">In-memory ModelElement instance that is currently being read.</param>
            <param name="reader">Reader for the file being read. The reader is positioned after the attributes of the specified element.</param>
            <remarks>The method reads any extension element data, regardless of whether it relates the current
            element or not. There may be no additional data for the specified element.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.WriteAttributeString(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Writes the specified attribute to the file.
            </summary>
            <param name="serializationContext">The current serialization context instance.</param>
            <param name="element">The element whose attributes have just been written.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="attributeName">Name of the attribute to be written</param>
            <param name="attributeValue">Value of the attribute to be written</param>
            <remarks>This is an extension point to allow customisation e.g. to encode the data
            being written to the file.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.WriteElementString(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Writes the specified element to the file.
            </summary>
            <param name="serializationContext">The current serialization context instance.</param>
            <param name="element">The element whose attributes have just been written.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="elementName">Name of the element to be written.</param>
            <param name="elementValue">Value of the element to be written.</param>
            <remarks>This is an extension point to allow customisation e.g. to encode the data
            being written to the file.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.ReadAttribute(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader,System.String)">
            <summary>
            Reads and returns the value of an attribute.
            </summary>
            <param name="serializationContext">The current serialization context instance.</param>
            <param name="element">The element whose attributes have just been written.</param>
            <param name="reader">XmlReader to read the serialized data from.</param>
            <param name="attributeName">The name of the attribute to be read.</param>
            <returns>The value of the attribute.</returns>
            <remarks>This is an extension point to allow customisation e.g. to decode the data
            being written to the file.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.ReadElementContentAsString(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Reads and returns the value of an element.
            </summary>
            <param name="serializationContext">The current serialization context instance.</param>
            <param name="element">The element whose attributes have just been written.</param>
            <param name="reader">XmlReader to read the serialized data from.</param>
            <returns>The value of the element.</returns>
            <remarks>This is an extension point to allow customisation e.g. to decode the data
            being written to the file.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.CreateXmlReaderSettings(Microsoft.VisualStudio.Modeling.SerializationContext,System.Boolean)">
            <summary>
            Creates and returns the settings used when reading a file.
            </summary>
            <param name="serializationContext">The current serialization context instance.</param>
            <param name="isDiagram">Indicates whether a diagram or model file is currently being serialized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelperBase.CreateXmlWriterSettings(Microsoft.VisualStudio.Modeling.SerializationContext,System.Boolean,System.Text.Encoding)">
            <summary>
            Creates and returns the settings used when writing a file.
            </summary>
            <param name="serializationContext">The current serialization context instance.</param>
            <param name="isDiagram">Indicates whether a diagram or model file is currently being serialized.</param>
            <param name="encoding">The encoding to use when writing the file.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelper">
            <summary>
            Helper class for serializing and deserializing CoreDesignSurface models.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelper.#ctor">
            <summary>
            Private constructor to prevent direct instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelper.instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationHelper.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer">
            <summary>
            Serializer PresentationElementSerializer for DomainClass PresentationElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.#ctor">
            <summary>
            PresentationElementSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            PresentationElement is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the PresentationElement element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory PresentationElement instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory PresentationElement instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.ReadElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This methods deserializes nested XML elements inside the passed-in element.
            </summary>
            <remarks>
            The caller will guarantee that the current element does have nested XML elements, and the call will position the 
            reader at the open tag of the first child XML element.
            This method will read as many child XML elements as it can. It returns under three circumstances:
            1) When an unknown child XML element is encountered. In this case, this method will position the reader at the open 
               tag of the unknown element. This implies that if the first child XML element is unknown, this method should return 
               immediately and do nothing.
            2) When all child XML elemnets are read. In this case, the reader will be positioned at the end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory PresentationElement instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.ReadChildElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all child model elements.
            </summary>
            <remarks>
            The caller will position the reader at the open tag of the first child XML element to deserialized.
            This method will read as many child elements as it can. It returns under three circumstances:
            1) When an unknown child XML element is encountered. In this case, this method will position the reader at the 
               open tag of the unknown element. This implies that if the first child XML element is unknown, this method 
               should return immediately and do nothing.
            2) When all child XML elemnets are read. In this case, the reader will be positioned at the end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="element">In-memory PresentationElement instance that will get the deserialized data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of PresentationElement based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized PresentationElement, a new PresentationElement instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created PresentationElement instance, or null if the reader is not pointing to a serialized PresentationElement instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of PresentationElement based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of PresentationElement.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new PresentationElement instance should be created.</param>	
            <returns>Created PresentationElement instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from PresentationElement, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from PresentationElement.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including PresentationElement itself) instance of PresentationElement based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of PresentationElement based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from PresentationElement, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from PresentationElement.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized PresentationElement instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">PresentationElement instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the PresentationElement instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the PresentationElement instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one PresentationElement instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">PresentationElement instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">PresentationElement instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.WriteElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            This methods serializes 1) properties serialized as nested XML elements and 2) child model elements into XML. 
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">PresentationElement instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>        
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.WriteChildElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.PresentationElement,System.Xml.XmlWriter)">
            <summary>
            Serialize all child model elements.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">PresentationElement instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given PresentationElement instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">PresentationElement instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the PresentationElement instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationElementSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">PresentationElement instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer">
            <summary>
            Serializer ShapeElementSerializer for DomainClass ShapeElement.
            </summary>
            <summary>
            Customized ShapeElement serialization.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.#ctor">
            <summary>
            ShapeElementSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.DefaultConstructor">
            <summary>
            Default implementation of constructor, which does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            ShapeElement is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the ShapeElement element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ShapeElement instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.ReadElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This methods deserializes nested XML elements inside the passed-in element.
            </summary>
            <remarks>
            The caller will guarantee that the current element does have nested XML elements, and the call will position the 
            reader at the open tag of the first child XML element.
            This method will read as many child XML elements as it can. It returns under three circumstances:
            1) When an unknown child XML element is encountered. In this case, this method will position the reader at the open 
               tag of the unknown element. This implies that if the first child XML element is unknown, this method should return 
               immediately and do nothing.
            2) When all child XML elemnets are read. In this case, the reader will be positioned at the end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ShapeElement instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.DefaultReadElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Default implementation of ReadElements().
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.ReadChildElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all child model elements.
            </summary>
            <remarks>
            The caller will position the reader at the open tag of the first child XML element to deserialized.
            This method will read as many child elements as it can. It returns under three circumstances:
            1) When an unknown child XML element is encountered. In this case, this method will position the reader at the 
               open tag of the unknown element. This implies that if the first child XML element is unknown, this method 
               should return immediately and do nothing.
            2) When all child XML elemnets are read. In this case, the reader will be positioned at the end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="element">In-memory ShapeElement instance that will get the deserialized data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.ReadParentShapeHasRelativeChildShapesInstances(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Xml.XmlReader)">
            <summary>
            Reads all instances of relationship ParentShapeHasRelativeChildShapes.
            </summary>
            <remarks>
            The caller will position the reader at the open tag of the first XML element inside the relationship tag, so it can be
            either the first instance, or a bogus tag. This method will deserialize all instances and ignore all bogus tags. When the
            method returns, the reader will be positioned at the end tag of the relationship (or EOF if somehow that happens).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ShapeElement instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.ReadParentShapeContainsNestedChildShapesInstances(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Xml.XmlReader)">
            <summary>
            Reads all instances of relationship ParentShapeContainsNestedChildShapes.
            </summary>
            <remarks>
            The caller will position the reader at the open tag of the first XML element inside the relationship tag, so it can be
            either the first instance, or a bogus tag. This method will deserialize all instances and ignore all bogus tags. When the
            method returns, the reader will be positioned at the end tag of the relationship (or EOF if somehow that happens).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ShapeElement instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of ShapeElement based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized ShapeElement, a new ShapeElement instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created ShapeElement instance, or null if the reader is not pointing to a serialized ShapeElement instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.DefaultTryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            Default implementation of TryCreateInstance().
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of ShapeElement based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of ShapeElement.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new ShapeElement instance should be created.</param>	
            <returns>Created ShapeElement instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.DefaultCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            Default implementation of CreateInstance().
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from ShapeElement, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from ShapeElement.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including ShapeElement itself) instance of ShapeElement based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.DefaultTryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            Default implementation of TryCreateMonikerInstance().
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of ShapeElement based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.DefaultCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            Default implementation of CreateMonikerInstance().
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from ShapeElement, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from ShapeElement.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized ShapeElement instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ShapeElement instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the ShapeElement instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the ShapeElement instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one ShapeElement instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ShapeElement instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.WriteElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            This methods serializes 1) properties serialized as nested XML elements and 2) child model elements into XML. 
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ShapeElement instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>        
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.DefaultWriteElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Default implementation of WriteElements().
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.WriteChildElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Xml.XmlWriter)">
            <summary>
            Serialize all child model elements.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ShapeElement instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given ShapeElement instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">ShapeElement instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the ShapeElement instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.DefaultCalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Default implementation of CalculateQualifiedName().
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">ShapeElement instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.DefaultGetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Default implementation of GetMonikerQualifier().
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.ReadShapeElementChildElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Xml.XmlReader)">
            <summary>
            Read child elements defined on ShapeElement.
            </summary>
            <param name="serializationContext"></param>
            <param name="shapeElement"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.WriteShapeElementChildElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Xml.XmlWriter)">
            <summary>
            Write child elements defined on ShapeElement.
            </summary>
            <param name="serializationContext"></param>
            <param name="shapeElement"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CustomReadElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This methods deserializes nested XML elements inside the passed-in element.
            </summary>
            <remarks>
            The caller will guarantee that the current element does have nested XML elements, and the call will position the 
            reader at the open tag of the first child XML element.
            This method will read as many child XML elements as it can. It returns under three circumstances:
            1) When an unknown child XML element is encountered. In this case, this method will position the reader at the open 
               tag of the unknown element. This implies the if the first child XML element is unknown, this method should return 
               immediately and do nothing.
            2) When all child XML elemnets are read. In this case, the reader will be positioned at the end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ShapeElement instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CustomWriteElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            This methods serializes 1) properties serialized as nested XML elements and 2) child model elements into XML. 
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ShapeElement instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>        
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CustomConstructor">
            <summary>
            Custom constructor logic.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CustomTryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of ShapeElement based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized ShapeElement, a new ShapeElement instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created ShapeElement instance, or null if the reader is not pointing to a serialized ShapeElement instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CustomCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of ShapeElement based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of ShapeElement.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new ShapeElement instance should be created.</param>	
            <returns>Created ShapeElement instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CustomTryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including ShapeElement itself) instance of ShapeElement based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CustomCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of ShapeElement based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CustomCalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given ShapeElement instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">ShapeElement instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the ShapeElement instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.CustomGetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">ShapeElement instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.ReadMoveableDecoratorHostShapeInstances(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Xml.XmlReader)">
            <summary>
            Reads all instances of class MoveableDecoratorHostShape.
            </summary>
            <remarks>
            The caller will position the reader at the open tag of the first XML element inside the "moveableDecoratorhostShape" tag, so it can be
            either the first instance, or a bogus tag. This method will deserialize all instances and ignore all bogus tags. When the
            method returns, the reader will be positioned at the end tag of the relationship (or EOF if somehow that happens).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="shapeElement">In-memory ShapeElement instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementSerializer.WriteMoveableDecoratorHostShapeInstances(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Xml.XmlWriter)">
            <summary>
            Serialize all MoveableDecoratorHostShape instances.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="shapeElement">ShapeElement instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer">
            <summary>
            Serializer NodeShapeSerializer for DomainClass NodeShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.#ctor">
            <summary>
            NodeShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            NodeShape is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the NodeShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory NodeShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory NodeShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of NodeShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized NodeShape, a new NodeShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created NodeShape instance, or null if the reader is not pointing to a serialized NodeShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of NodeShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of NodeShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new NodeShape instance should be created.</param>	
            <returns>Created NodeShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from NodeShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from NodeShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including NodeShape itself) instance of NodeShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of NodeShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from NodeShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from NodeShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized NodeShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">NodeShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the NodeShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the NodeShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one NodeShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">NodeShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">NodeShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given NodeShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">NodeShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the NodeShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.NodeShapeSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">NodeShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer">
            <summary>
            Serializer DiagramSerializer for DomainClass Diagram.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.#ctor">
            <summary>
            DiagramSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Diagram is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the Diagram element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory Diagram instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory Diagram instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of Diagram based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized Diagram, a new Diagram instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created Diagram instance, or null if the reader is not pointing to a serialized Diagram instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of Diagram based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of Diagram.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new Diagram instance should be created.</param>	
            <returns>Created Diagram instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from Diagram, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from Diagram.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including Diagram itself) instance of Diagram based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of Diagram based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from Diagram, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from Diagram.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized Diagram instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">Diagram instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the Diagram instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the Diagram instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one Diagram instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">Diagram instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">Diagram instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given Diagram instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">Diagram instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the Diagram instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">Diagram instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer">
            <summary>
            Serializer LinkShapeSerializer for DomainClass LinkShape.
            </summary>
            <summary>
            Customized ShapeElement serialization.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.#ctor">
            <summary>
            LinkShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            LinkShape is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the LinkShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LinkShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LinkShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.ReadElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This methods deserializes nested XML elements inside the passed-in element.
            </summary>
            <remarks>
            The caller will guarantee that the current element does have nested XML elements, and the call will position the 
            reader at the open tag of the first child XML element.
            This method will read as many child XML elements as it can. It returns under three circumstances:
            1) When an unknown child XML element is encountered. In this case, this method will position the reader at the open 
               tag of the unknown element. This implies that if the first child XML element is unknown, this method should return 
               immediately and do nothing.
            2) When all child XML elemnets are read. In this case, the reader will be positioned at the end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LinkShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.ReadChildElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,System.Xml.XmlReader)">
            <summary>
            This method deserializes all child model elements.
            </summary>
            <remarks>
            The caller will position the reader at the open tag of the first child XML element to deserialized.
            This method will read as many child elements as it can. It returns under three circumstances:
            1) When an unknown child XML element is encountered. In this case, this method will position the reader at the 
               open tag of the unknown element. This implies that if the first child XML element is unknown, this method 
               should return immediately and do nothing.
            2) When all child XML elemnets are read. In this case, the reader will be positioned at the end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="element">In-memory LinkShape instance that will get the deserialized data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.ReadLinkConnectsToNodeInstances(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,System.Xml.XmlReader)">
            <summary>
            Reads all instances of relationship LinkConnectsToNode.
            </summary>
            <remarks>
            The caller will position the reader at the open tag of the first XML element inside the relationship tag, so it can be
            either the first instance, or a bogus tag. This method will deserialize all instances and ignore all bogus tags. When the
            method returns, the reader will be positioned at the end tag of the relationship (or EOF if somehow that happens).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LinkShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of LinkShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized LinkShape, a new LinkShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created LinkShape instance, or null if the reader is not pointing to a serialized LinkShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of LinkShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of LinkShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new LinkShape instance should be created.</param>	
            <returns>Created LinkShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from LinkShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from LinkShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including LinkShape itself) instance of LinkShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of LinkShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from LinkShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from LinkShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized LinkShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LinkShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the LinkShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the LinkShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one LinkShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LinkShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LinkShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.WriteElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            This methods serializes 1) properties serialized as nested XML elements and 2) child model elements into XML. 
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LinkShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>        
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.WriteChildElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,System.Xml.XmlWriter)">
            <summary>
            Serialize all child model elements.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LinkShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given LinkShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">LinkShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the LinkShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">LinkShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.ReadLinkShapeChildElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,System.Xml.XmlReader)">
            <summary>
            Read child elements defined on LinkShape.
            </summary>
            <param name="serializationContext"></param>
            <param name="linkShape"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkShapeSerializer.WriteLinkShapeChildElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,System.Xml.XmlWriter)">
            <summary>
            Write child elements defined on LinkShape.
            </summary>
            <param name="serializationContext"></param>
            <param name="linkShape"></param>
            <param name="reader"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase">
            <summary>
            Serializer BinaryLinkShapeSerializerBase for DomainClass BinaryLinkShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.#ctor">
            <summary>
            BinaryLinkShapeSerializerBase Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            BinaryLinkShape is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the BinaryLinkShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory BinaryLinkShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory BinaryLinkShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of BinaryLinkShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized BinaryLinkShape, a new BinaryLinkShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created BinaryLinkShape instance, or null if the reader is not pointing to a serialized BinaryLinkShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of BinaryLinkShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of BinaryLinkShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new BinaryLinkShape instance should be created.</param>	
            <returns>Created BinaryLinkShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from BinaryLinkShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from BinaryLinkShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including BinaryLinkShape itself) instance of BinaryLinkShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of BinaryLinkShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from BinaryLinkShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from BinaryLinkShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized BinaryLinkShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">BinaryLinkShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the BinaryLinkShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the BinaryLinkShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one BinaryLinkShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">BinaryLinkShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">BinaryLinkShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given BinaryLinkShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">BinaryLinkShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the BinaryLinkShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BinaryLinkShapeSerializerBase.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">BinaryLinkShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer">
            <summary>
            Serializer GenericLinkShapeSerializer for DomainClass GenericLinkShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.#ctor">
            <summary>
            GenericLinkShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.XmlTagName">
            <summary>
            This is the XML tag name used to serialize an instance of GenericLinkShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Public Read() method that deserializes one GenericLinkShape instance from XML.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the GenericLinkShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory GenericLinkShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory GenericLinkShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of GenericLinkShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized GenericLinkShape, a new GenericLinkShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created GenericLinkShape instance, or null if the reader is not pointing to a serialized GenericLinkShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of GenericLinkShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of GenericLinkShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new GenericLinkShape instance should be created.</param>	
            <returns>Created GenericLinkShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from GenericLinkShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from GenericLinkShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including GenericLinkShape itself) instance of GenericLinkShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of GenericLinkShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from GenericLinkShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from GenericLinkShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized GenericLinkShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">GenericLinkShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the GenericLinkShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the GenericLinkShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one GenericLinkShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">GenericLinkShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">GenericLinkShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given GenericLinkShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">GenericLinkShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the GenericLinkShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GenericLinkShapeSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">GenericLinkShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer">
            <summary>
            Serializer LabelShapeSerializer for DomainClass LabelShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.#ctor">
            <summary>
            LabelShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.XmlTagName">
            <summary>
            This is the XML tag name used to serialize an instance of LabelShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.MonikerTagName">
            <summary>
            This is the XML tag name used to serialize a monikerized instance of LabelShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.MonikerAttributeName">
            <summary>
            This is the name of the XML attribute that stores the moniker of LabelShape in a serialized monikerized instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Public Read() method that deserializes one LabelShape instance from XML.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the LabelShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LabelShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LabelShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of LabelShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized LabelShape, a new LabelShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created LabelShape instance, or null if the reader is not pointing to a serialized LabelShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of LabelShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of LabelShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new LabelShape instance should be created.</param>	
            <returns>Created LabelShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from LabelShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from LabelShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including LabelShape itself) instance of LabelShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of LabelShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from LabelShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from LabelShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized LabelShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LabelShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the LabelShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the LabelShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one LabelShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LabelShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LabelShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given LabelShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">LabelShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the LabelShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LabelShapeSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">LabelShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer">
            <summary>
            Serializer LineLabelShapeSerializer for DomainClass LineLabelShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.#ctor">
            <summary>
            LineLabelShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.XmlTagName">
            <summary>
            This is the XML tag name used to serialize an instance of LineLabelShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.MonikerTagName">
            <summary>
            This is the XML tag name used to serialize a monikerized instance of LineLabelShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.MonikerAttributeName">
            <summary>
            This is the name of the XML attribute that stores the moniker of LineLabelShape in a serialized monikerized instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Public Read() method that deserializes one LineLabelShape instance from XML.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the LineLabelShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LineLabelShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LineLabelShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of LineLabelShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized LineLabelShape, a new LineLabelShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created LineLabelShape instance, or null if the reader is not pointing to a serialized LineLabelShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of LineLabelShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of LineLabelShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new LineLabelShape instance should be created.</param>	
            <returns>Created LineLabelShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from LineLabelShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from LineLabelShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including LineLabelShape itself) instance of LineLabelShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of LineLabelShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from LineLabelShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from LineLabelShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized LineLabelShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LineLabelShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the LineLabelShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the LineLabelShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one LineLabelShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LineLabelShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LineLabelShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given LineLabelShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">LineLabelShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the LineLabelShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LineLabelShapeSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">LineLabelShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer">
            <summary>
            Serializer CommentShapeSerializer for DomainClass CommentShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.#ctor">
            <summary>
            CommentShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.XmlTagName">
            <summary>
            This is the XML tag name used to serialize an instance of CommentShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.MonikerTagName">
            <summary>
            This is the XML tag name used to serialize a monikerized instance of CommentShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.MonikerAttributeName">
            <summary>
            This is the name of the XML attribute that stores the moniker of CommentShape in a serialized monikerized instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Public Read() method that deserializes one CommentShape instance from XML.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the CommentShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory CommentShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of CommentShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized CommentShape, a new CommentShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created CommentShape instance, or null if the reader is not pointing to a serialized CommentShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of CommentShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of CommentShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new CommentShape instance should be created.</param>	
            <returns>Created CommentShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from CommentShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from CommentShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including CommentShape itself) instance of CommentShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of CommentShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from CommentShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from CommentShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized CommentShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">CommentShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the CommentShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the CommentShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one CommentShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">CommentShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given CommentShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">CommentShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the CommentShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CommentShapeSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">CommentShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer">
            <summary>
            Serializer PortShapeSerializer for DomainClass PortShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.#ctor">
            <summary>
            PortShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            PortShape is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the PortShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory PortShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of PortShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized PortShape, a new PortShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created PortShape instance, or null if the reader is not pointing to a serialized PortShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of PortShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of PortShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new PortShape instance should be created.</param>	
            <returns>Created PortShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from PortShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from PortShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including PortShape itself) instance of PortShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of PortShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from PortShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from PortShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized PortShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">PortShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the PortShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the PortShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one PortShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">PortShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given PortShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">PortShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the PortShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortShapeSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">PortShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer">
            <summary>
            Serializer CompartmentShapeSerializer for DomainClass CompartmentShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.#ctor">
            <summary>
            CompartmentShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            CompartmentShape is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the CompartmentShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory CompartmentShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of CompartmentShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized CompartmentShape, a new CompartmentShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created CompartmentShape instance, or null if the reader is not pointing to a serialized CompartmentShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of CompartmentShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of CompartmentShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new CompartmentShape instance should be created.</param>	
            <returns>Created CompartmentShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from CompartmentShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from CompartmentShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including CompartmentShape itself) instance of CompartmentShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of CompartmentShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from CompartmentShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from CompartmentShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized CompartmentShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">CompartmentShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the CompartmentShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the CompartmentShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one CompartmentShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">CompartmentShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given CompartmentShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">CompartmentShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the CompartmentShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentShapeSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">CompartmentShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer">
            <summary>
            Serializer ImageShapeSerializer for DomainClass ImageShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.#ctor">
            <summary>
            ImageShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            ImageShape is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the ImageShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ImageShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of ImageShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized ImageShape, a new ImageShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created ImageShape instance, or null if the reader is not pointing to a serialized ImageShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of ImageShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of ImageShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new ImageShape instance should be created.</param>	
            <returns>Created ImageShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from ImageShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from ImageShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including ImageShape itself) instance of ImageShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of ImageShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from ImageShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from ImageShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized ImageShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ImageShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the ImageShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the ImageShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one ImageShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ImageShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given ImageShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">ImageShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the ImageShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageShapeSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">ImageShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer">
            <summary>
            Serializer SwimlaneShapeSerializer for DomainClass SwimlaneShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.#ctor">
            <summary>
            SwimlaneShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            SwimlaneShape is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the SwimlaneShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory SwimlaneShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of SwimlaneShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized SwimlaneShape, a new SwimlaneShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created SwimlaneShape instance, or null if the reader is not pointing to a serialized SwimlaneShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of SwimlaneShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of SwimlaneShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new SwimlaneShape instance should be created.</param>	
            <returns>Created SwimlaneShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from SwimlaneShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from SwimlaneShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including SwimlaneShape itself) instance of SwimlaneShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of SwimlaneShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from SwimlaneShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from SwimlaneShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized SwimlaneShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">SwimlaneShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the SwimlaneShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the SwimlaneShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one SwimlaneShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">SwimlaneShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given SwimlaneShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">SwimlaneShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the SwimlaneShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShapeSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">SwimlaneShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer">
            <summary>
            Serializer PortSerializer for DomainClass Port.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.#ctor">
            <summary>
            PortSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Port is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the Port element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory Port instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of Port based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized Port, a new Port instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created Port instance, or null if the reader is not pointing to a serialized Port instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of Port based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of Port.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new Port instance should be created.</param>	
            <returns>Created Port instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from Port, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from Port.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including Port itself) instance of Port based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of Port based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from Port, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from Port.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized Port instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">Port instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the Port instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the Port instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one Port instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">Port instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given Port instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">Port instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the Port instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PortSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">Port instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer">
            <summary>
            Serializer CompartmentSerializer for DomainClass Compartment.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.#ctor">
            <summary>
            CompartmentSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Compartment is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the Compartment element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory Compartment instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory Compartment instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of Compartment based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized Compartment, a new Compartment instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created Compartment instance, or null if the reader is not pointing to a serialized Compartment instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of Compartment based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of Compartment.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new Compartment instance should be created.</param>	
            <returns>Created Compartment instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from Compartment, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from Compartment.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including Compartment itself) instance of Compartment based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of Compartment based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from Compartment, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from Compartment.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized Compartment instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">Compartment instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the Compartment instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the Compartment instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one Compartment instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">Compartment instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">Compartment instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given Compartment instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">Compartment instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the Compartment instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CompartmentSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">Compartment instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer">
            <summary>
            Serializer ListCompartmentSerializer for DomainClass ListCompartment.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.#ctor">
            <summary>
            ListCompartmentSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.XmlTagName">
            <summary>
            Cannot be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            ListCompartment is abstract and cannot be instantiated, so this method throws NotSupportedException.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the ListCompartment element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ListCompartment instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ListCompartment instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of ListCompartment based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized ListCompartment, a new ListCompartment instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created ListCompartment instance, or null if the reader is not pointing to a serialized ListCompartment instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of ListCompartment based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of ListCompartment.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new ListCompartment instance should be created.</param>	
            <returns>Created ListCompartment instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from ListCompartment, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from ListCompartment.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including ListCompartment itself) instance of ListCompartment based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of ListCompartment based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from ListCompartment, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from ListCompartment.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized ListCompartment instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ListCompartment instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the ListCompartment instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the ListCompartment instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one ListCompartment instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ListCompartment instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ListCompartment instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given ListCompartment instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">ListCompartment instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the ListCompartment instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ListCompartmentSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">ListCompartment instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer">
            <summary>
            Serializer ElementListCompartmentSerializer for DomainClass ElementListCompartment.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.#ctor">
            <summary>
            ElementListCompartmentSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.XmlTagName">
            <summary>
            This is the XML tag name used to serialize an instance of ElementListCompartment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.MonikerTagName">
            <summary>
            This is the XML tag name used to serialize a monikerized instance of ElementListCompartment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.MonikerAttributeName">
            <summary>
            This is the name of the XML attribute that stores the moniker of ElementListCompartment in a serialized monikerized instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Public Read() method that deserializes one ElementListCompartment instance from XML.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the ElementListCompartment element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ElementListCompartment instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of ElementListCompartment based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized ElementListCompartment, a new ElementListCompartment instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created ElementListCompartment instance, or null if the reader is not pointing to a serialized ElementListCompartment instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of ElementListCompartment based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of ElementListCompartment.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new ElementListCompartment instance should be created.</param>	
            <returns>Created ElementListCompartment instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from ElementListCompartment, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from ElementListCompartment.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including ElementListCompartment itself) instance of ElementListCompartment based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of ElementListCompartment based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from ElementListCompartment, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from ElementListCompartment.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized ElementListCompartment instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ElementListCompartment instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the ElementListCompartment instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the ElementListCompartment instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one ElementListCompartment instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">ElementListCompartment instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given ElementListCompartment instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">ElementListCompartment instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the ElementListCompartment instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ElementListCompartmentSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">ElementListCompartment instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase">
            <summary>
            Serializer DecoratorHostShapeSerializerBase for DomainClass DecoratorHostShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.#ctor">
            <summary>
            DecoratorHostShapeSerializerBase Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.XmlTagName">
            <summary>
            This is the XML tag name used to serialize an instance of DecoratorHostShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.MonikerTagName">
            <summary>
            This is the XML tag name used to serialize a monikerized instance of DecoratorHostShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.MonikerAttributeName">
            <summary>
            This is the name of the XML attribute that stores the moniker of DecoratorHostShape in a serialized monikerized instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Public Read() method that deserializes one DecoratorHostShape instance from XML.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the DecoratorHostShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory DecoratorHostShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory DecoratorHostShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.ReadElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This methods deserializes nested XML elements inside the passed-in element.
            </summary>
            <remarks>
            The caller will guarantee that the current element does have nested XML elements, and the call will position the 
            reader at the open tag of the first child XML element.
            This method will read as many child XML elements as it can. It returns under three circumstances:
            1) When an unknown child XML element is encountered. In this case, this method will position the reader at the open 
               tag of the unknown element. This implies that if the first child XML element is unknown, this method should return 
               immediately and do nothing.
            2) When all child XML elemnets are read. In this case, the reader will be positioned at the end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory DecoratorHostShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of DecoratorHostShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized DecoratorHostShape, a new DecoratorHostShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created DecoratorHostShape instance, or null if the reader is not pointing to a serialized DecoratorHostShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of DecoratorHostShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of DecoratorHostShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new DecoratorHostShape instance should be created.</param>	
            <returns>Created DecoratorHostShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from DecoratorHostShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from DecoratorHostShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including DecoratorHostShape itself) instance of DecoratorHostShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of DecoratorHostShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from DecoratorHostShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from DecoratorHostShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized DecoratorHostShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">DecoratorHostShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the DecoratorHostShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the DecoratorHostShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one DecoratorHostShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">DecoratorHostShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">DecoratorHostShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.WriteElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            This methods serializes 1) properties serialized as nested XML elements and 2) child model elements into XML. 
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">DecoratorHostShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>        
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given DecoratorHostShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">DecoratorHostShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the DecoratorHostShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializerBase.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">DecoratorHostShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializer">
            <summary>
            Serializer DecoratorHostShapeSerializer for DomainClass DecoratorHostShape.
            </summary>
            <summary>
            Partial class for DecoratorHostShapeSerializer to provide custom serialization behavior
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializer.#ctor">
            <summary>
            DecoratorHostShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            DecoratorHostShape is not serialized, so can't be read.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            DecoratorHostShape is not serialized.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase">
            <summary>
            Serializer MoveableDecoratorHostShapeSerializerBase for DomainClass MoveableDecoratorHostShape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.#ctor">
            <summary>
            MoveableDecoratorHostShapeSerializerBase Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.XmlTagName">
            <summary>
            This is the XML tag name used to serialize an instance of MoveableDecoratorHostShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.MonikerTagName">
            <summary>
            This is the XML tag name used to serialize a monikerized instance of MoveableDecoratorHostShape.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.MonikerAttributeName">
            <summary>
            This is the name of the XML attribute that stores the moniker of MoveableDecoratorHostShape in a serialized monikerized instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Public Read() method that deserializes one MoveableDecoratorHostShape instance from XML.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the MoveableDecoratorHostShape element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory MoveableDecoratorHostShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.ReadElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This methods deserializes nested XML elements inside the passed-in element.
            </summary>
            <remarks>
            The caller will guarantee that the current element does have nested XML elements, and the call will position the 
            reader at the open tag of the first child XML element.
            This method will read as many child XML elements as it can. It returns under three circumstances:
            1) When an unknown child XML element is encountered. In this case, this method will position the reader at the open 
               tag of the unknown element. This implies that if the first child XML element is unknown, this method should return 
               immediately and do nothing.
            2) When all child XML elemnets are read. In this case, the reader will be positioned at the end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory MoveableDecoratorHostShape instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of MoveableDecoratorHostShape based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized MoveableDecoratorHostShape, a new MoveableDecoratorHostShape instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created MoveableDecoratorHostShape instance, or null if the reader is not pointing to a serialized MoveableDecoratorHostShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of MoveableDecoratorHostShape based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of MoveableDecoratorHostShape.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new MoveableDecoratorHostShape instance should be created.</param>	
            <returns>Created MoveableDecoratorHostShape instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from MoveableDecoratorHostShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from MoveableDecoratorHostShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including MoveableDecoratorHostShape itself) instance of MoveableDecoratorHostShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of MoveableDecoratorHostShape based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from MoveableDecoratorHostShape, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from MoveableDecoratorHostShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized MoveableDecoratorHostShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">MoveableDecoratorHostShape instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the MoveableDecoratorHostShape instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the MoveableDecoratorHostShape instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one MoveableDecoratorHostShape instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">MoveableDecoratorHostShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.WriteElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            This methods serializes 1) properties serialized as nested XML elements and 2) child model elements into XML. 
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">MoveableDecoratorHostShape instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>        
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given MoveableDecoratorHostShape instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">MoveableDecoratorHostShape instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the MoveableDecoratorHostShape instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializerBase.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">MoveableDecoratorHostShape instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializer">
            <summary>
            Serializer MoveableDecoratorHostShapeSerializer for DomainClass MoveableDecoratorHostShape.
            </summary>
            <summary>
            Partial class for MoveableDecoratorHostShapeSerializer to provide custom serialization behavior
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializer.#ctor">
            <summary>
            MoveableDecoratorHostShapeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Unlike DecoratorHostShape, MoveableDecoratorHostShape does need to be serialized to preserve the location
            information. However, due to the special handling of decorators and host shapes in CDS, the normal generated
            serialization won't work. So we short-circuit the generated serializer here, and handle the serialization in
            ShapeElementSerializer.CustomReadElements() instead.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.MoveableDecoratorHostShapeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Unlike DecoratorHostShape, MoveableDecoratorHostShape does need to be serialized to preserve the location
            information. However, due to the special handling of decorators and host shapes in CDS, the normal generated
            serialization won't work. So we short-circuit the generated serializer here, and handle the serialization in
            ShapeElementSerializer.CustomWriteElements() instead.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer">
            <summary>
            Serializer PresentationViewsSubjectSerializer for DomainClass PresentationViewsSubject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.#ctor">
            <summary>
            PresentationViewsSubjectSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.XmlTagName">
            <summary>
            This is the XML tag name used to serialize an instance of PresentationViewsSubject.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Public Read() method that deserializes one PresentationViewsSubject instance from XML.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the PresentationViewsSubject element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory PresentationViewsSubject instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.ReadTargetRolePlayer(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method reads the target role player Subject.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at the open tag of the first child XML element.
            This method will read only one target role player instance. The method will skip any child XML element it encounters until it reaches:
            1) The open tag of the target role player.
            2) The end tag of the parent element (dangling relationship).
            3) EOF (dangling relationship).
            After the call, the reader is positioned at:
            1) The open tag of the next child element after the target role player.
            2) The end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory PresentationViewsSubject instance that will link to the target ModelElement instance.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory PresentationViewsSubject instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.ReadElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This methods deserializes nested XML elements inside the passed-in element.
            </summary>
            <remarks>
            The caller will guarantee that the current element does have nested XML elements, and the call will position the 
            reader at the open tag of the first child XML element.
            This method will read as many child XML elements as it can. It returns under three circumstances:
            1) When an unknown child XML element is encountered. In this case, this method will position the reader at the open 
               tag of the unknown element. This implies that if the first child XML element is unknown, this method should return 
               immediately and do nothing.
            2) When all child XML elemnets are read. In this case, the reader will be positioned at the end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory PresentationViewsSubject instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of PresentationViewsSubject based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized PresentationViewsSubject, a new PresentationViewsSubject instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created PresentationViewsSubject instance, or null if the reader is not pointing to a serialized PresentationViewsSubject instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.TryCreateDerivedInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct derived instance of PresentationViewsSubject based on the tag currently pointed by the reader.
            Note that the difference between this method and the above one is that this method will never create an instance of the
            PresentationViewsSubject type itself, only derived types are checked.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>
            <returns>Created instance that derives from PresentationViewsSubject, or null if the reader is not pointing to such a serialized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.InternalTryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition,System.Boolean)">
            <summary>
            Internal helper method for TryCreateInstance() and TryCreateDerivedInstance().
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>
            <param name="derivedTypesOnly">If true, this method will only check derived types, but not the domain class iitself.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of PresentationViewsSubject based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of PresentationViewsSubject.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new PresentationViewsSubject instance should be created.</param>	
            <returns>Created PresentationViewsSubject instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from PresentationViewsSubject, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from PresentationViewsSubject.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including PresentationViewsSubject itself) instance of PresentationViewsSubject based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of PresentationViewsSubject based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from PresentationViewsSubject, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from PresentationViewsSubject.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized PresentationViewsSubject instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">PresentationViewsSubject instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the PresentationViewsSubject instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the PresentationViewsSubject instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one PresentationViewsSubject instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">PresentationViewsSubject instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">PresentationViewsSubject instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.WriteElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            This methods serializes 1) properties serialized as nested XML elements and 2) child model elements into XML. 
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">PresentationViewsSubject instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>        
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given PresentationViewsSubject instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">PresentationViewsSubject instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the PresentationViewsSubject instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">PresentationViewsSubject instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.MonikerizeReference(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,System.String,Microsoft.VisualStudio.Modeling.Store)">
            <summary>
            Calculates a Moniker, given a reference to a ModelElement
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="sourceElement">Instance of PresentationElement that contains the given serialized reference</param>
            <param name="domainClassId">DomainClassId of the model element that the given moniker string will be resolved to.</param>
            <param name="monikerString">Serialized string reference to an instance of ModelElement</param>
            <param name="store">Store where the Moniker will be created</param>
            <returns>A Moniker encapsulating the serialized string reference of ModelElement instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.SerializeReference(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Calculates a monikerized string reference to a ModelElement.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="sourceElement">Source side of reference relationship. The referenced target element will be serialized.</param>
            <param name="targetElement">Target side of relationship that will be serialized.</param>
            <returns>A monikerized string reference to target element.</returns>		
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.SerializesId">
            <summary>
            Exposes whether serializers derived from this class are serializing Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PresentationViewsSubjectSerializer.UsesFullForm">
            <summary>
            Exposes whether serializers derived from this class are serializing this relationship in full form.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer">
            <summary>
            Serializer ParentShapeHasRelativeChildShapesSerializer for DomainClass ParentShapeHasRelativeChildShapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.#ctor">
            <summary>
            ParentShapeHasRelativeChildShapesSerializer Constructor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.XmlTagName">
            <summary>
            This is the XML tag name used to serialize an instance of ParentShapeHasRelativeChildShapes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Public Read() method that deserializes one ParentShapeHasRelativeChildShapes instance from XML.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the ParentShapeHasRelativeChildShapes element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ParentShapeHasRelativeChildShapes instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.ReadTargetRolePlayer(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method reads the target role player RelativeChildShapes.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at the open tag of the first child XML element.
            This method will read only one target role player instance. The method will skip any child XML element it encounters until it reaches:
            1) The open tag of the target role player.
            2) The end tag of the parent element (dangling relationship).
            3) EOF (dangling relationship).
            After the call, the reader is positioned at:
            1) The open tag of the next child element after the target role player.
            2) The end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ParentShapeHasRelativeChildShapes instance that will link to the target ShapeElement instance.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of ParentShapeHasRelativeChildShapes based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized ParentShapeHasRelativeChildShapes, a new ParentShapeHasRelativeChildShapes instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created ParentShapeHasRelativeChildShapes instance, or null if the reader is not pointing to a serialized ParentShapeHasRelativeChildShapes instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of ParentShapeHasRelativeChildShapes based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of ParentShapeHasRelativeChildShapes.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new ParentShapeHasRelativeChildShapes instance should be created.</param>	
            <returns>Created ParentShapeHasRelativeChildShapes instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.TryCreateDerivedInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct derived instance of ParentShapeHasRelativeChildShapes based on the tag currently pointed by the reader.
            Note that the difference between this method and the above one is that this method will never create an instance of the
            ParentShapeHasRelativeChildShapes type itself, only derived types are checked.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>
            <returns>Created instance that derives from ParentShapeHasRelativeChildShapes, or null if the reader is not pointing to such a serialized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including ParentShapeHasRelativeChildShapes itself) instance of ParentShapeHasRelativeChildShapes based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of ParentShapeHasRelativeChildShapes based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.SerializesId">
            <summary>
            Exposes whether serializers derived from this class are serializing Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeHasRelativeChildShapesSerializer.UsesFullForm">
            <summary>
            Exposes whether serializers derived from this class are serializing this relationship in full form.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer">
            <summary>
            Serializer ParentShapeContainsNestedChildShapesSerializer for DomainClass ParentShapeContainsNestedChildShapes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.#ctor">
            <summary>
            ParentShapeContainsNestedChildShapesSerializer Constructor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.XmlTagName">
            <summary>
            This is the XML tag name used to serialize an instance of ParentShapeContainsNestedChildShapes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Public Read() method that deserializes one ParentShapeContainsNestedChildShapes instance from XML.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the ParentShapeContainsNestedChildShapes element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ParentShapeContainsNestedChildShapes instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.ReadTargetRolePlayer(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method reads the target role player NestedChildShapes.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at the open tag of the first child XML element.
            This method will read only one target role player instance. The method will skip any child XML element it encounters until it reaches:
            1) The open tag of the target role player.
            2) The end tag of the parent element (dangling relationship).
            3) EOF (dangling relationship).
            After the call, the reader is positioned at:
            1) The open tag of the next child element after the target role player.
            2) The end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory ParentShapeContainsNestedChildShapes instance that will link to the target ShapeElement instance.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of ParentShapeContainsNestedChildShapes based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized ParentShapeContainsNestedChildShapes, a new ParentShapeContainsNestedChildShapes instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created ParentShapeContainsNestedChildShapes instance, or null if the reader is not pointing to a serialized ParentShapeContainsNestedChildShapes instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of ParentShapeContainsNestedChildShapes based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of ParentShapeContainsNestedChildShapes.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new ParentShapeContainsNestedChildShapes instance should be created.</param>	
            <returns>Created ParentShapeContainsNestedChildShapes instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.TryCreateDerivedInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct derived instance of ParentShapeContainsNestedChildShapes based on the tag currently pointed by the reader.
            Note that the difference between this method and the above one is that this method will never create an instance of the
            ParentShapeContainsNestedChildShapes type itself, only derived types are checked.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>
            <returns>Created instance that derives from ParentShapeContainsNestedChildShapes, or null if the reader is not pointing to such a serialized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including ParentShapeContainsNestedChildShapes itself) instance of ParentShapeContainsNestedChildShapes based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of ParentShapeContainsNestedChildShapes based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.SerializesId">
            <summary>
            Exposes whether serializers derived from this class are serializing Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ParentShapeContainsNestedChildShapesSerializer.UsesFullForm">
            <summary>
            Exposes whether serializers derived from this class are serializing this relationship in full form.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer">
            <summary>
            Serializer LinkConnectsToNodeSerializer for DomainClass LinkConnectsToNode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.#ctor">
            <summary>
            LinkConnectsToNodeSerializer Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.Reset">
            <summary>
            Reset the serializer
            </summary>
            <remarks>
            Clear the cached information about any derived classes so that it is recalculated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.XmlTagName">
            <summary>
            This is the XML tag name used to serialize an instance of LinkConnectsToNode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.MonikerTagName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.MonikerAttributeName">
            <summary>
            Cannot be monikerized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.Read(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            Public Read() method that deserializes one LinkConnectsToNode instance from XML.
            </summary>
            <remarks>
            When this method is called, caller guarantees that the passed-in XML reader is positioned at the open XML tag
            of the LinkConnectsToNode element that is about to be deserialized. 
            The method needs to ensure that when it returns, the reader is positioned at the open XML tag of the next sibling element,
            or the close tag of the parent element (or EOF).
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LinkConnectsToNode instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.ReadTargetRolePlayer(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method reads the target role player Nodes.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at the open tag of the first child XML element.
            This method will read only one target role player instance. The method will skip any child XML element it encounters until it reaches:
            1) The open tag of the target role player.
            2) The end tag of the parent element (dangling relationship).
            3) EOF (dangling relationship).
            After the call, the reader is positioned at:
            1) The open tag of the next child element after the target role player.
            2) The end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LinkConnectsToNode instance that will link to the target NodeShape instance.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.ReadPropertiesFromAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This method deserializes all properties that are serialized as XML attributes.
            </summary>
            <remarks>
            Because this method only handles properties serialized as XML attributes, the passed-in reader shouldn't be moved inside this method.
            The caller will guarantee that the reader is positioned on the open XML tag of the current element being deserialized.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LinkConnectsToNode instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.ReadElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlReader)">
            <summary>
            This methods deserializes nested XML elements inside the passed-in element.
            </summary>
            <remarks>
            The caller will guarantee that the current element does have nested XML elements, and the call will position the 
            reader at the open tag of the first child XML element.
            This method will read as many child XML elements as it can. It returns under three circumstances:
            1) When an unknown child XML element is encountered. In this case, this method will position the reader at the open 
               tag of the unknown element. This implies that if the first child XML element is unknown, this method should return 
               immediately and do nothing.
            2) When all child XML elemnets are read. In this case, the reader will be positioned at the end tag of the parent element.
            3) EOF.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">In-memory LinkConnectsToNode instance that will get the deserialized data.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.TryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct instance of LinkConnectsToNode based on the tag currently pointed by the reader. If the reader
            is positioned at a serialized LinkConnectsToNode, a new LinkConnectsToNode instance will be created in the given partition, otherwise 
            null is returned.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>	
            <returns>Created LinkConnectsToNode instance, or null if the reader is not pointing to a serialized LinkConnectsToNode instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.TryCreateDerivedInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a correct derived instance of LinkConnectsToNode based on the tag currently pointed by the reader.
            Note that the difference between this method and the above one is that this method will never create an instance of the
            LinkConnectsToNode type itself, only derived types are checked.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>
            <returns>Created instance that derives from LinkConnectsToNode, or null if the reader is not pointing to such a serialized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.InternalTryCreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition,System.Boolean)">
            <summary>
            Internal helper method for TryCreateInstance() and TryCreateDerivedInstance().
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new elements should be created.</param>
            <param name="derivedTypesOnly">If true, this method will only check derived types, but not the domain class iitself.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.CreateInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates an instance of LinkConnectsToNode based on the tag currently pointed by the reader. The reader is guaranteed (by the caller)
            to be pointed at a serialized instance of LinkConnectsToNode.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the ModelRoot instance being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="partition">Partition in which new LinkConnectsToNode instance should be created.</param>	
            <returns>Created LinkConnectsToNode instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.derivedClasses">
            <summary>
            Stores a mapping from XmlTagName to DomainClassInfo that derives from LinkConnectsToNode, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.ConstructDerivedClassesLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the apping from XmlTagName to DomainClassInfo that derives from LinkConnectsToNode.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.TryCreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of the correct derived (including LinkConnectsToNode itself) instance of LinkConnectsToNode based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.CreateMonikerInstance(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,Microsoft.VisualStudio.Modeling.Partition)">
            <summary>
            This method creates a Moniker of LinkConnectsToNode based on the tag currently pointed by the reader.
            </summary>
            <remarks>
            The caller will guarantee that the reader is positioned at open XML tag of the next element being read. This method should
            not move the reader; the reader should remain at the same position when this method returns.
            </remarks>		
            <param name="serializationContext">Serialization context.</param>
            <param name="reader">XmlReader to read serialized data from.</param>
            <param name="sourceRolePlayer">The source role-player instance from which the moniker being created is referenced.</param>
            <param name="relDomainClassId">The DomainClass Id of the relationship that connects the sourceRolePlayer to the moniker being created.</param>
            <param name="partition">The new Moniker should be created in the Store associated with this partition.</param>			
            <returns>Created ModelRoot instance, or null if the reader is not pointing to a correct monikerized instance.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.derivedClassMonikers">
            <summary>
            Stores a mapping from Moniker Xml tag name to DomainClassInfo that derives from LinkConnectsToNode, created on demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.ConstructDerivedClassMonikersLookupTable(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.DomainDataDirectory)">
            <summary>
            Construct the mapping from Moniker Xml tag name to DomainClassInfo that derives from LinkConnectsToNode.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="domainDataDirectory">DomainDataDirectory to be used to discover all derived classes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.WriteMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.DomainRelationshipXmlSerializer)">
            <summary>
            Public WriteMoniker() method that writes a monikerized LinkConnectsToNode instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LinkConnectsToNode instance to be monikerized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="sourceRolePlayer">Source element that references the LinkConnectsToNode instance being monikerized.</param>
            <param name="relSerializer">Serializer that handles the relationship connecting the source element to the LinkConnectsToNode instance being monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.Write(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter,Microsoft.VisualStudio.Modeling.RootElementSettings)">
            <summary>
            Public Write() method that serializes one LinkConnectsToNode instance into XML.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LinkConnectsToNode instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>
            <param name="rootElementSettings">
            The root element settings if the passed in element is serialized as a root element in the XML. The root element contains additional
            information like schema target namespace, version, etc.
            This should only be passed for root-level elements. Null should be passed for rest elements (and ideally call the Write() method 
            without this parameter).
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.WritePropertiesAsAttributes(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            Write all properties that need to be serialized as XML attributes.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LinkConnectsToNode instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.WriteElements(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Xml.XmlWriter)">
            <summary>
            This methods serializes 1) properties serialized as nested XML elements and 2) child model elements into XML. 
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="element">LinkConnectsToNode instance to be serialized.</param>
            <param name="writer">XmlWriter to write serialized data to.</param>        
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            This method calculates a moniker to a given LinkConnectsToNode instance.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">LinkConnectsToNode instance to calculate qualified name for.</param>
            <returns>A fully qualified string moniker to the LinkConnectsToNode instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.GetMonikerQualifier(Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            A domain class can be monikerized in different ways: standard /qualifier/key mechanism, custom moniker, or element ID. If the domain class is serialized
            using standard /qualifier/key mechanism, this method returns the qualifier of the moniker; if the domain class uses other ways for monikerization, this method
            returns empty string.
            </summary>
            <param name="directory">Directory to look up serializer based on model element type.</param>
            <param name="element">LinkConnectsToNode instance to get moniker qualifier from.</param>
            <returns>
            Value of this element's moniker qualifier property, if it has one, or the value of the container's moniker qualifier property. Or empty string if this
            element is not monikerized using standard /qualifier/key mechanism.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.MonikerizeReference(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,System.Guid,System.String,Microsoft.VisualStudio.Modeling.Store)">
            <summary>
            Calculates a Moniker, given a reference to a NodeShape
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="sourceElement">Instance of LinkShape that contains the given serialized reference</param>
            <param name="domainClassId">DomainClassId of the model element that the given moniker string will be resolved to.</param>
            <param name="monikerString">Serialized string reference to an instance of NodeShape</param>
            <param name="store">Store where the Moniker will be created</param>
            <returns>A Moniker encapsulating the serialized string reference of NodeShape instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.SerializeReference(Microsoft.VisualStudio.Modeling.SerializationContext,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Calculates a monikerized string reference to a NodeShape.
            </summary>
            <param name="serializationContext">Serialization context.</param>
            <param name="sourceElement">Source side of reference relationship. The referenced target element will be serialized.</param>
            <param name="targetElement">Target side of relationship that will be serialized.</param>
            <returns>A monikerized string reference to target element.</returns>		
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.SerializesId">
            <summary>
            Exposes whether serializers derived from this class are serializing Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.LinkConnectsToNodeSerializer.UsesFullForm">
            <summary>
            Exposes whether serializers derived from this class are serializing this relationship in full form.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorBase">
            <summary>
            A DomainXmlSerializationBehavior implementation for defined behavior CoreDesignSurfaceSerializationBehavior.
            This is the abstract base of the double-derived implementation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorBase.DomainModelXmlNamespace">
            <summary>
             The xml namespace used by this domain model when serializing
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorBase.serializerTypes">
            <summary>
            A list of DomainClass Ids mapped to DomainClassXmlSerializer types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorBase.namespaceEntries">
            <summary>
            A list of xml namespaces mapped to domain model types.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorBase.#ctor">
            <summary>
            Protected constructor to prevent public instantiation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorBase.CustomSerializerTypes">
            <summary>
            Allows custom serializers to be added.
            Base implementation doesn't do anything.
            </summary>
            <returns>Custom serializer types, null or empty list if there's no custom serializer types.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorBase.AllSerializers">
            <summary>
            This provides a mapping from DomainClass Id to DomainXmlSerializer implementation types.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorBase.AllNamespaces">
            <summary>
            This provides a mapping from xml namespaces to domain model implementation types.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorMonikerResolver">
            <summary>
            Moniker resolver for serialization behavior CoreDesignSurfaceSerializationBehavior.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorMonikerResolver.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory)">
            <summary>
            Constructor.
            </summary>
            <param name="store">Store for this moniker resolver.</param>
            <param name="directory">Directory to used by this resolver to look up for serializers.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorMonikerResolverBase">
            <summary>
            Base moniker resolver for serialization behavior CoreDesignSurfaceSerializationBehavior.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorMonikerResolverBase.directory">
            <summary>
            Look-up directory to find serializers for domain classes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorMonikerResolverBase.#ctor(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.DomainXmlSerializerDirectory)">
            <summary>
            Constructor.
            </summary>
            <param name="store">Store for this moniker resolver.</param>
            <param name="directory">Directory to used by this resolver to look up for serializers.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorMonikerResolverBase.CanBeMonikerized(Microsoft.VisualStudio.Modeling.DomainClassInfo)">
            <summary>
            Tells if a DomainClass can be monikerized or not.
            </summary>
            <param name="domainClassInfo">DomainClassInfo of the DomainClass to be checked.</param>
            <returns>True if the DomainClass can be monikerized, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorMonikerResolverBase.CalculateQualifiedName(Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Calculate the fully qualified monikerized string of the given ModelElement.
            </summary>
            <param name="mel">ModelElement to get moniker from.</param>
            <returns>Calculated moniker string, returns null or empty string is the given ModelElement cannot be monikerized.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorMonikerResolverBase.OnUnresolvedMoniker(Microsoft.VisualStudio.Modeling.SerializationResult,Microsoft.VisualStudio.Modeling.Moniker)">
            <summary>
            Called at the end of synchronization when they're unresolved monikers.
            </summary>
            <param name="serializationResult">SerializationResult to store error/warning messages.</param>
            <param name="moniker">Unresolved moniker.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorMonikerResolverBase.OnMonikerResolvedToDuplicateLink(Microsoft.VisualStudio.Modeling.SerializationResult,Microsoft.VisualStudio.Modeling.Moniker)">
            <summary>
            Called when resolving a moniker causes a duplicate link to be created.
            </summary>
            <param name="serializationResult">SerializationResult to store error/warning messages.</param>
            <param name="moniker">Moniker that causes duplicate link to be created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorMonikerResolverBase.OnAmbiguousMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,System.String,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Called when two new elements are giving the same moniker, which will cause ambiguity during moniker resolution.
            </summary>
            <param name="context">SerializationContext to store error/warning messages.</param>
            <param name="moniker">Moniker that both elements give.</param>
            <param name="element1">The first element giving the moniker.</param>
            <param name="element2">The second element giving the same moniker.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorMonikerResolverBase.UnresolvedMonikerExceptionMessage">
            <summary>
            Error message for UnresolvedMonikerException.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages">
            <summary>
            Utility class to provide serialization messages
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.ResourceManager">
            <summary>
            ResourceManager to get serialization messages from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.AmbiguousSchema(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Add a warning for ambiguous schemas.
            </summary>
            <param name="serializationContext">SerializationContext to add the warning message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
            <param name="targetNamespace">Target namespace to be resolved.</param>
            <param name="schemaPath">The schema that is used to resolve the definition of the target namespace.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.ExpectingFullFormRelationship(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,System.Type)">
            <summary>
            Add a warning when a full-form relationship seems to be serialized in short-form.
            </summary>
            <param name="serializationContext">SerializationContext to add the warning message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
            <param name="relationshipType">Type of the relationship.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.ExpectingShortFormRelationship(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,System.Type)">
            <summary>
            Add a warning when a short-form relationship seems to be serialized in full-form.
            </summary>
            <param name="serializationContext">SerializationContext to add the warning message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
            <param name="relationshipType">Type of the relationship.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.IgnoredPropertyValue(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,System.String,System.Type,System.String)">
            <summary>
            Add a warning for invalid property value with the given type, which will be ignored.
            </summary>
            <param name="serializationContext">SerializationContext to add the warning message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="value">Invalid value that causes this warning.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.MissingId(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,System.Guid)">
            <summary>
            Add a warning for missing "Id" property.
            </summary>
            <param name="serializationContext">SerializationContext to add the warning message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
            <param name="newId">Auto-generated new Id.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.MonikerResolvedToDuplicateLink(Microsoft.VisualStudio.Modeling.SerializationResult,Microsoft.VisualStudio.Modeling.Moniker)">
            <summary>
            Add an warning for moniker resolved to duplicate link. The moniker will be ignored.
            </summary>
            <param name="serializationResult">SerializationResult to add the error message to.</param>
            <param name="moniker">Offending moniker.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.NoSchema(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,System.String)">
            <summary>
            Add a warning for no schema found for the given target namespace, schema validation will be skipped in this case.
            </summary>
            <param name="serializationContext">SerializationContext to add the warning message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
            <param name="targetNamespace">Target namespace that cannot be resolved.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.SchemaValidationError(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,System.String)">
            <summary>
            Add a warning for schema validation error.
            </summary>
            <param name="serializationContext">SerializationContext to add the warning message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
            <param name="message">Validation message reported from schema validation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.UnexpectedXmlElement(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader)">
            <summary>
            Add an warning for unexpected XML element.
            </summary>
            <param name="serializationContext">SerializationContext to add the warning message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.AmbiguousMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,System.String,Microsoft.VisualStudio.Modeling.ModelElement,Microsoft.VisualStudio.Modeling.ModelElement)">
            <summary>
            Add an error for ambiguous moniker.
            </summary>
            <param name="serializationContext">SerializationContext to add the error message to.</param>
            <param name="moniker">The ambiguous moniker string.</param>
            <param name="element1">The first element using the given moniker.</param>
            <param name="element2">The second element using the given moniker.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.CannotMonikerizeElement(Microsoft.VisualStudio.Modeling.SerializationContext,System.String)">
            <summary>
            Add an error for not able to monikerize an instance of the given DomainClass.
            </summary>
            <param name="serializationContext">SerializationContext to add the error message to.</param>
            <param name="domainClassName">Name of the DomainClass whose instance cannot be monikerized.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.DanglingRelationship(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,System.String)">
            <summary>
            Add an error for dangling relationship instance.
            </summary>
            <param name="serializationContext">SerializationContext to add the error message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
            <param name="relationshipType">Type name of the relationship.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.InvalidPropertyValue(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,System.String,System.Type,System.String)">
            <summary>
            Add an error for invalid property value with given type.
            </summary>
            <param name="serializationContext">SerializationContext to add the error message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="value">Invalid value that causes this error.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.MissingMoniker(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,System.String)">
            <summary>
            Add an error for missing moniker.
            </summary>
            <param name="serializationContext">SerializationContext to add the error message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
            <param name="monikerAttributeName">Name of the attribute that should hold the moniker.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.UnresolvedMoniker(Microsoft.VisualStudio.Modeling.SerializationResult,Microsoft.VisualStudio.Modeling.Moniker)">
            <summary>
            Add an error for unresolved moniker.
            </summary>
            <param name="serializationResult">SerializationResult to add the error message to.</param>
            <param name="moniker">Unresolved moniker.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceSerializationBehaviorSerializationMessages.VersionMismatch(Microsoft.VisualStudio.Modeling.SerializationContext,System.Xml.XmlReader,System.Version,System.Version)">
            <summary>
            Add an error for Version mismatch.
            </summary>
            <param name="serializationContext">SerializationContext to add the error message to.</param>
            <param name="reader">The reader pointing to where the message is raised.</param>
            <param name="expectedVersion">The version that's expected.</param>
            <param name="actualVersion">Actual version from the file.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModelSerializer">
            <summary>
            Provides an implementation of the IDomainModelSerializer interface
            that can be used to serialize / deserialize the CoreDesignSurface domain model.
            </summary>
            <remarks>Double-derived class - the default implementation is in CoreDesignSurfaceDomainModelSerializerBase.
            This class exist so users can customize behavior easily.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModelSerializerBase">
            <summary>
            Base class that implements IDomainModelSerializer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModelSerializerBase.DomainModelNamespace">
            <summary>
            The XML namespace used when serializing the domain model
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModelSerializerBase.DomainModelType">
            <summary>
            The type of the domain model
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModelSerializerBase.IsSerializable">
            <summary>
            Returns false: Dsl libraries cannot be serialized / deserialized directly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModelSerializerBase.ModelFileExtension">
            <summary>
            Returns null: Dsl libraries cannot be serialized / deserialized directly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModelSerializerBase.CalculateDiagramFileName(System.String)">
            <summary>
            Throws NotImplementedException - Dsl libraries cannot be serialized / deserialized directly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModelSerializerBase.LoadModel(Microsoft.VisualStudio.Modeling.SerializationResult,Microsoft.VisualStudio.Modeling.Partition,System.String,Microsoft.VisualStudio.Modeling.ISerializerLocator)">
            <summary>
            Throws NotImplementedException - Dsl libraries cannot be serialized / deserialized directly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModelSerializerBase.LoadModelAndDiagram(Microsoft.VisualStudio.Modeling.SerializationResult,Microsoft.VisualStudio.Modeling.Partition,System.String,Microsoft.VisualStudio.Modeling.Partition,System.String,Microsoft.VisualStudio.Modeling.ISerializerLocator)">
            <summary>
            Throws NotImplementedException - Dsl libraries cannot be serialized / deserialized directly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModelSerializerBase.SaveModel(Microsoft.VisualStudio.Modeling.SerializationResult,Microsoft.VisualStudio.Modeling.ModelElement,System.String,System.Text.Encoding)">
            <summary>
            Throws NotImplementedException - Dsl libraries cannot be serialized / deserialized directly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModelSerializerBase.SaveModelAndDiagram(Microsoft.VisualStudio.Modeling.SerializationResult,Microsoft.VisualStudio.Modeling.ModelElement,System.String,Microsoft.VisualStudio.Modeling.ModelElement,System.String,System.Text.Encoding)">
            <summary>
            Throws NotImplementedException - Dsl libraries cannot be serialized / deserialized directly.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphicsTranslator">
            <summary>
            Temporarily applies a translation on a Graphics object, 
            restoring when Dispose() is called.
            </summary>
            <remarks>
            This class will:
             (1) save the graphics state.
             (2) call TranslateTransform on the graphics object.
            On Dispose(), this class will restore the graphics state.
            
            BeginContainer/EndContainer are not used because they
            reset several settings, including PageUnit and clipping region.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphicsTranslator.#ctor(System.Drawing.Graphics,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the GraphicsTranslator class.
            </summary>
            <param name="g">The graphics object on which the translation will be applied.</param>
            <param name="horizontalComponent">x component of the translation in world units</param>
            <param name="verticalComponent">y component of the translation in world units</param>
            <remarks>
            The Graphics object's state will be saved in the constructor and restored 
            when the GraphicsTranslator's Dispose() is called.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementAddRule">
            <summary>
            A rule which executes when a Diagram has been removed from the Store.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeElementAddRule.ElementAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Initializes a new instance of the ShapeElement class
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.IShapeIterator">
            <summary>
            An interface for a shape iterator, which will be used to iterate through a shape and all its child shapes. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.IShapeIterator.OnShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            This method is called when a new shape is encountered during the iteration.
            </summary>
            <param name="shape">Shape encountered during iteration.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject">
            <summary>
            Provides information that accessibility applications use to adjust an application's UI for users with impairments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the ShapeAccessibleObject class.
            </summary>
            <param name="shape">The ShapeElement to represent.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="navdir">One of the AccessibleNavigation values.</param>
            <returns>An AccessibleObject that represents one of the AccessibleNavigation values.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
            <summary>
            Modifies the selection or moves the keyboard focus of the accessible object.
            </summary>
            <param name="flags">One of the AccessibleSelection values.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.HitTest(System.Int32,System.Int32)">
            <summary>
                Performs hit-test of the shape at specified screen coordinates and returns MSAA object
                for the hit child.
            </summary>
            <param name="x">X in screen coordinates.</param>
            <param name="y">Y in screen coordinates.</param>
            <returns>Hit child MSAA object or self if not child is hit.</returns>
            <remarks>
                We override this here since base class's code loops though all children by calling
                GetChildCount/GetChild(ID) which are very inefficient.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.State">
            <summary>
            Gets the state of this accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.Value">
            <summary>
            Gets or sets the accessible value for this element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.Help">
            <summary>
            Gets a description of what the object does or how the object is used.
            </summary>
            <value>A description of what the object does or how the object is used.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.GetHelpTopic(System.String@)">
            <summary>
            Gets an identifier for a Help topic identifier and the path 
            to the Help file associated with this accessible object.
            </summary>
            <param name="fileName">On return, this property contains the path to the Help file associated with this accessible object.</param>
            <returns>An identifier for a Help topic, or -1 if there is no Help topic.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.KeyboardShortcut">
            <summary>
            Gets the shortcut key or access key for the accessible object.
            </summary>
            <value>The shortcut key or access key for the accessible object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object. Not all objects have a default action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeModelingCollection.Add(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Adds a specific ShapeElement to the collection.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeModelingCollection.Add(System.Collections.ICollection)">
            <summary>
            Adds the ShapeElements of an ICollection to the end of the ShapeModelingCollection
            </summary>
            <param name="shapesToAdd"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeModelingCollection.Remove(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Removes the first occurrence of a specific ShapeElement from the collection.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeModelingCollection.Remove(System.Collections.ICollection)">
            <summary>
            Removes the specified ShapeElements from an ICollection 
            </summary>
            <param name="shapesToRemove"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeModelingCollection.Contains(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Determines whether a ShapeElement is in the collection.
            </summary>
            <param name="shape"></param>
            <returns>true if shape is in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeModelingCollection.Insert(System.Int32,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeModelingCollection.CopyTo(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeModelingCollection.IndexOf(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator">
            <summary>
            Class to encapsulate the way ShapeFields and child shapes are used to represent Notation Decorators
            when they are placed on a Shape
            </summary>
            <remarks>
            Inner shapes are simple ShapeFields, whereas Outer shapes require host shapes
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition)">
            <summary>
            Construct a new ShapeDecorator.
            </summary>
            <param name="field">ShapeField used by the decorator.</param>
            <param name="position">Decorator position.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Construct a new ShapeDecorator.
            </summary>
            <param name="field">ShapeField used by the decorator.</param>
            <param name="position">Decorator position.</param>
            <param name="offset">
            Offset used to modify the default position of the decorator specified by position.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition,System.Boolean)">
            <summary>
            Construct a new ShapeDecorator.
            </summary>
            <param name="field">ShapeField used by the decorator.</param>
            <param name="position">Decorator position.</param>
            <param name="canMove">Whether this decorator can be moved.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecoratorPosition,Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Boolean)">
            <summary>
            Construct a new ShapeDecorator.
            </summary>
            <param name="field">ShapeField used by the decorator.</param>
            <param name="position">Decorator position.</param>
            <param name="offset">
            Offset used to modify the default position of the decorator specified by position.
            </param>
            <param name="canMove">Whether this decorator can be moved.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator.Position">
            <summary>
            Gets or sets the position of this decorator relative to the parent shape.
            </summary>
            <remarks>
            Changing the position of the decorator does not automatically cause
            the diagram to update.  If the decorator exists inside the shape, all shapes
            using the decorator must be invalidated after the change.  If the decorator exists
            outside the shape, ConfigureHostShape and RepositionHostShape must be called for all
            host shapes hosting this decorator.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator.OnAfterOffsetChanged">
            <summary>
            Shape decorators need to update anchoring after the offset changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator.RequiresHost">
            <summary>
            For shapes, outer shape decorators require an additional host shape; inner decorators are 
            implemented as shape fields on the shape itself.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator.ConfigureHostShape(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Configures a host shape for use with this decorator.  
            If the given parent does not have a host shape for this decorator,
            a new one will be created.  If a host shape already exists,
            settings for this decorator will be re-applied to the existing host shape; 
            a new host shape will not be created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator.RepositionHostShape(Microsoft.VisualStudio.Modeling.Diagrams.DecoratorHostShape)">
            <summary>
            Updates the position of the given host shape based on current decorator settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator.GetOuterDecoratorPosition(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.SizeD,System.Boolean)">
            <summary>
            Enforce the position of a decorator host relative to the parent shape.
            It will return the position the decorator correctly respecting the size of the rectangle provided.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeDecorator.ShapeDecoratorBoundsRules.GetCompliantBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            Ensure shape decorator position is accurate when the parent shape resizes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField">
            <summary>
            Defines the base class for shape fields, which are components of a ShapeElement
            that are capable of drawing and editing.  ShapeFields are 
            analogous to Controls on a Form.
            </summary>
            <remarks>
            If you want to display items such as text or images within a ShapeElement, instantiate 
            ShapeField-derived classes such as TextField or ImageField.
            </remarks>
            <remarks>
            ShapeFields typically describe behavior rather than store instance information 
            about themselves. For example, the "value" property can be described using 
            a domain property and the "bounds" property can be described by anchoring styles.  
            By doing so, ShapeFields do not have to be instanced per-Shape, and as a result are
            very lightweight.
            </remarks>
            <remarks>
            To instance ShapeFields for a particular ShapeElement type, override the method 
            InitializeShapeFields in your ShapeElement-derived class.
            </remarks>
            <remarks>
            ShapeFields can be associated with a domain property of any ModelElement.
            As the domain property value changes, the associated ShapeFields automatically 
            update with it.
            </remarks>
            <remarks>
            To connect a ShapeField up with a domain property, call the ShapeField method
            AssociateValueWith after creating the ShapeField.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ShapeField class.
            </summary>
            <param name="fieldName">Unique identifier for the shape field within the parent shape's shape field collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Gets a value indicating whether the specified point is within the bounds of the ShapeField.
            </summary>
            <param name="point">A point in world units relative to the specified parent ShapeElement's top-left</param>
            <param name="parentShape">The ShapeElement to which this ShapeField belongs</param>
            <param name="diagramHitTestInfo">The hit test information to update with the hit test results.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetPotentialMouseAction(System.Windows.Forms.MouseButtons,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Retrieves a mouse action that should be made active on the next
            MouseDown event if the mouse is over the specified point.
            
            By default, this method will return the SelectAction.  If the
            field's CanEditValue returns true and the field is already
            focused, then the InvokeEditorAction will be returned instead.
            </summary>
            <param name="mouseButtons">The MouseButtons depressed.</param>
            <param name="point">Mouse position relative to Diagram's top-left in world units.</param>
            <param name="hitTestInfo">The hit test information that corresponds to the mouse position.</param>
            <returns>The mouse action that should be made active on the next MouseDown event.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.Tag">
            <summary>
            Extensibility point for ShapeFields, for example Decorators - weakly typed so as not to couple.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.Name">
            <summary>
            Gets the unique identifier for this ShapeField.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultVisibility">
            <summary>
            Gets or sets a value indicating whether the ShapeField is visible by default.
            </summary>
            <remarks>
            The ShapeField's GetVisible method returns this value unless GetVisible is overridden.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultFocusable">
            <summary>
            Gets or sets a value indicating whether the ShapeField can receive focus by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultSelectable">
            <summary>
            Gets or sets a value indicating whether the ShapeField can be selected by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultReflectParentFocusedState">
            <summary>
            Gets or sets a value indicating whether this field should show
            the focused state of its parent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultReflectParentSelectedState">
            <summary>
            Gets or sets a value indicating whether this field should show
            the selected state of its parent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultAccessibleName">
            <summary>
            Gets or sets the default accessible name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultAccessibleDescription">
            <summary>
            Gets or sets the default accessible description.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultAccessibleState">
            <summary>
            Gets or sets the default accessible state.
            </summary>
            <value>the default accessible state.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultPenId">
            <summary>
            Gets or sets the id of the default pen to use for this ShapeField.
            </summary>
            <remarks>
            The ShapeField's GetPenId method returns this value unless GetPenId is overridden.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultBackgroundBrushId">
            <summary>
            Gets or sets the id of the default background brush to use for this ShapeField.
            </summary>
            <remarks>
            The ShapeField's GetBackgroundBrushId method returns this value unless 
            GetBackgroundBrushId is overridden.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultSelectedBackgroundBrushId">
            <summary>
            Gets or sets the id of the default background brush to use for this ShapeField.
            </summary>
            <remarks>
            The ShapeField's GetBackgroundBrushId method returns this value unless 
            GetBackgroundBrushId is overridden.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DefaultInactiveSelectedBackgroundBrushId">
            <summary>
            Gets or sets the id of the default background brush to use for this ShapeField.
            </summary>
            <remarks>
            The ShapeField's GetBackgroundBrushId method returns this value unless 
            GetBackgroundBrushId is overridden.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.AnchoringBehavior">
            <summary>
            Gets the AnchoringBehavior for this ShapeField.
            </summary>
            <remarks>
            The AnchoringBehavior describes how the ShapeField should
            position and size itself as the parent ShapeElement moves and
            resizes.
            
            Alter the returned AnchoringBehavior object to describe
            how the ShapeField should reposition and resize itself.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the value of this ShapeField for the specified ShapeElement instance.
            </summary>
            <param name="parentShape">The ShapeElement instance from which to retrieve the value</param>
            <returns>The value of this ShapeField for the specified ShapeElement instance.</returns>
            <remarks>
            This method can return null.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.SetValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Object)">
            <summary>
            Sets the value of this ShapeField for the specified ShapeElement instance.
            </summary>
            <param name="parentShape">The ShapeElement instance from which to retrieve the value</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetValueDomainPropertyInfo(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the DomainPropertyInfo for the value of this field.
            </summary>
            <param name="parentShape">The ShapeElement instance.</param>
            <returns>The Property info for the value of this field.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetValueElement(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the ModelElement that hosts the DomainPropertyInfo for the value of this field.
            </summary>
            <param name="parentShape">The ShapeElement instance.</param>
            <returns>The Model element that hosts the property info for the value of this field.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetInPlaceEditorBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the bounds of the in-place editor relative to its parent shape in world units.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <returns>The bounds of the in-place editor relative to its parent shape in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.AllowInPlaceEditorAutoSize(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns a Boolean value indicating whether in-place editor should be allowed to size automatically.
            Default is false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetMinimumInPlaceEditorSize(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the minimum bounds allowed for the in-place editor for the given parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetMaximumInPlaceEditorSize(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the maximum bounds allowed for the in-place editor for the given parent shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.CanEditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether the value of this field can be edited.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="view">The view that will become the parent of the editor.</param>
            <returns>true if the value of this field can be edited.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Invokes the in-place editor.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="view">The view that will host the editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Invokes the in-place editor, setting the caret using the specified mouse position.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="view">The view that will host the editor.</param>
            <param name="mousePosition">The mouse position relative to the top-left of the diagram in world units.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnBeginEdit(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            Called when in-place editing has begun.
            </summary>
            <param name="e">A DiagramItemEventArgs containing event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnEndEdit(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            Called when in-place editing has ended.
            </summary>
            <param name="e">A DiagramItemEventArgs containing event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnBeginEditInternal(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnEndEditInternal(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.HasPendingEdit(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether in-place editing is active, with a commit pending.
            </summary>
            <param name="parentShape">The ShapeElement that contains this field.</param>
            <param name="view">The view hosting the in-place editor.</param>
            <returns>true if in-place editing is active, with a commit pending.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.CommitPendingEdit(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Commits the pending edit.
            </summary>
            <param name="parentShape">The ShapeElement that contains this field.</param>
            <param name="view">The view hosting the in-place editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetActiveInPlaceEditor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns the control for the active in-place editor.  This method may return null, 
            in which case no in-place editor is active for this field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this field.</param>
            <param name="view">The view hosting the in-place editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DoPaint(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Draws the shape field.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains the event data.</param>
            <param name="parentShape">The parent shape of this field.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetPenId(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the id of the pen to draw with for the specified ShapeElement instance.
            </summary>
            <param name="parentShape">The ShapeElement on which to draw.</param>
            <returns>The id of the pen to draw with for the specified ShapeElement instance.</returns>
            <remarks>
            By default, this method returns the default pen id.  
            
            To dynamically change the pen for this ShapeField, override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetPen(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Drawing.Color@)">
            <summary>
            Gets the pen to draw with for the specified ShapeElement instance.
            </summary>
            <param name="view">Current view to check for highlighting list. This may be null.</param>
            <param name="parentShape">The ShapeElement on which to draw.</param>
            <returns>The pen to draw with for the specified ShapeElement instance.</returns>
            <remarks>
            By default, this method returns the default pen of this ShapeField.
            
            To dynamically change the pen for this ShapeField, consider overriding
            GetPenId first.  If that method is inadequate, override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetBackgroundBrushId(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the id of the background brush to draw with for the specified ShapeElement instance.
            </summary>
            <param name="parentShape">The ShapeElement on which to draw.</param>
            <returns>The id of the background brush to draw with for the specified ShapeElement instance.</returns>
            <remarks>
            By default, this method returns the default background brush id.  
            
            To dynamically change the background brush for this ShapeField, override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetBackgroundBrush(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Drawing.Color@)">
            <summary>
            Gets the background brush to draw with for the specified ShapeElement instance.
            </summary>
            <param name="view">Current view to check for highlighting list. This may be null.</param>
            <param name="parentShape">The ShapeElement on which to draw.</param>
            <returns>The background brush to draw with for the specified ShapeElement instance.</returns>
            <remarks>
            By default, this method returns the default background brush of this ShapeField.
            
            To dynamically change the background brush for this ShapeField, consider overriding
            GetBackgroundBrushId first.  If that method is inadequate, override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.CanSnapToPixel">
            <summary>
            Can we snap to a pixel?
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.SnapToPixel(System.Drawing.Graphics,System.Drawing.PointF)">
            <summary>
            Snap to the nearest pixel (floor).
            </summary>
            <param name="g"></param>
            <param name="location">Location to snap</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetMinimumSize(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the minimum width and height for this ShapeField in world units
            </summary>
            <param name="parentShape">The ShapeElement instance</param>
            <returns>The minimum size for this ShapeField in world units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the bounds of this ShapeField in world units relative to the top-left of the parent shape.
            </summary>
            <param name="parentShape">The parent shape of this field.</param>
            <returns>The bounds of this ShapeField in world units relative to the top-left of the parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetVisible(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a value indicating whether the ShapeField is visible
            </summary>
            <param name="parentShape">The ShapeElement instance</param>
            <returns>true if the ShapeField visible.  Otherwise, false.</returns>
            <remarks>
            Override this method to dynamically change the visibility of the ShapeField 
            based on the ShapeElement instance.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.SetVisible(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Object)">
            <summary>
            Sets the visibility of this ShapeField for the specified ShapeElement instance.
            </summary>
            <param name="parentShape">The ShapeElement instance from which to retrieve the value</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetFocusable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a value indicating whether the ShapeField can receive focus.
            </summary>
            <param name="parentShape">The ShapeElement instance.</param>
            <returns>true if the ShapeField can receive focus.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetSelectable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a value indicating whether the ShapeField is selectable.
            </summary>
            <param name="parentShape">The ShapeElement instance.</param>
            <returns>true if the ShapeField can receive focus.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.Focused(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Gets a value indicating whether the ShapeField has the focus.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeField.</param>
            <param name="diagramClientView">The DiagramClientView to check.</param>
            <returns>true if the ShapeField has the focus.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.HasFocusedAppearance(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value that indicates whether this field should show the
            field as focused.  This can be different from the Focused property
            when this field reflects the Focused state of its parent.
            (See DefaultReflectParentFocusedState property.)
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeField.</param>
            <param name="view">The DiagramClientView to check.</param>
            <returns>true if this field should show itself as focused.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.Selected(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether the field is selected.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeField.</param>
            <param name="view">The DiagramClientView to check.</param>
            <returns>true if the field is selected.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.HasSelectedAppearance(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value that indicates whether this field should show the
            field as selected.  This can be different from the Selected property
            when this field reflects the Selected state of its parent.
            (See DefaultReflectParentSelectedState property.)
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeField.</param>
            <param name="view">The DiagramClientView to check.</param>
            <returns>true if this field should show itself as selected.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.SetSelectionRange(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Sets the selection to a range of subfields
            </summary>
            <param name="selection"></param>
            <param name="anchorItem"></param>
            <param name="toItem"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.IsNavigationKey(System.Windows.Forms.Keys)">
            <summary>
            Returns a value indicating whether the specified key data corresponds to
            a navigational command.
            </summary>
            <param name="keyData"></param>
            <returns>true if the specified key data corresponds to a navigational command.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.IsNavigationKey(System.Char)">
            <summary>
            Returns a value indicating whether the specified character corresponds to
            a navigational command.
            </summary>
            <param name="keyCharacter"></param>
            <returns>true if the specified character corresponds to a navigational command.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.DoKeyboardNavigation(System.Windows.Forms.Keys,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Calls the appropriate navigation method on the shape field.
            </summary>
            <param name="keyData">Keyboard data indicating keys that are currently pressed (includes modifier keys).</param>
            <param name="diagramClientView">Diagram client view where navigation should occur.</param>
            <param name="focusedItem">Currently focused diagram item.</param>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Called when a key is pressed.  To be called, this ShapeField must be the focused ShapeField in the selection.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnKeyUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Called when a key is released.  To be called, this ShapeField must be the focused ShapeField in the selection.
            </summary>
            <param name="e">A DiagramKeyEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnKeyPress(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs)">
            <summary>
            Called between a key down and key up.  To be called, this ShapeField must be the focused ShapeField in the selection.
            </summary>
            <param name="e">A DiagramKeyPressEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseDown().
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseMove().
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnMouseUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseUp().
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnMouseWheel(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseWheel().
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called by the control's OnClick().
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.OnDoubleClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called by the control's OnDoubleClick().
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor that is displayed when the mouse pointer is over the ShapeField.
            </summary>
            <param name="currentCursor">The current cursor.</param>
            <param name="diagramClientView">The view that the cursor will be drawn on.</param>
            <param name="mousePosition">The mouse position in world units relative to diagram's top-left.</param>
            <returns>The cursor to display.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.NavigateToFirst(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeField to set focus to this field's first sibling 
            (i.e., the parent's first child) in the navigation sequence.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeField.</param>
            <param name="selection">The current selection whose focus and selection will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.NavigateToNext(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeField to set focus to the next object in the navigation sequence.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeField.</param>
            <param name="selection">The current selection whose focus and selection will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.NavigateToPrevious(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeField to set focus to the previous object in the navigation sequence.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeField.</param>
            <param name="selection">The current selection whose focus and selection will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.NavigateToLast(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeField to set focus to this field's last sibling 
            (i.e., the parent's last child) in the navigation sequence.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeField.</param>
            <param name="selection">The current selection whose focus and selection will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.NavigateAscend(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeField to set focus to its first 
            focusable ancestor in the navigation sequence.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeField.</param>
            <param name="selection">The current selection whose focus and selection will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.NavigateDescend(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeField to set focus to its first 
            focusable descendant in the navigation sequence.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeField.</param>
            <param name="selection">The current selection whose focus and selection will be updated.</param>
            <remarks>
            By default, shape fields precede child shapes in the navigation sequence.
            </remarks>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.NavigateTo(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Sets the focus to the specified DiagramItem.
            </summary>
            <param name="newFocusItem">The DiagramItem to receive the focus.</param>
            <param name="selection">The selection to update. (The selection maintains the focus.)</param>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.FindFirstChild(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Boolean)">
            <summary>
            Called by this ShapeField to get its first 
            child subfield in the navigation sequence.
            </summary>
            <param name="parentShape">
            The parent ShapeElement for this ShapeField.
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>
            The first child subfield in the navigation sequence.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.FindNextChild(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean)">
            <summary>
            Called by the ShapeSubField to get the next
            sibling item following it in the navigation 
            sequence.
            </summary>
            <param name="startFromChildItem">
            The DiagramItem representing the ShapeSubField from which to start the search.  
            (This DiagramItem is not included in the search.)
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>
            The next DiagramItem in the navigation sequence.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.FindPreviousChild(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean)">
            <summary>
            Called by the ShapeSubField to get the next
            sibling item preceding it in the navigation 
            sequence.
            </summary>
            <param name="startFromChildItem">
            The DiagramItem representing the ShapeSubField from which to start the search.  
            (This DiagramItem is not included in the search.)
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>
            The preceding DiagramItem in the navigation sequence.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.FindLastChild(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Boolean)">
            <summary>
            Called by this ShapeField to get its last 
            subfield in the navigation sequence.
            </summary>
            <param name="parentShape">
            The parent ShapeElement for this ShapeField.
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>
            The last subfield in the navigation sequence.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.FindNextInChildSubFields(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean)">
            <summary>
            Finds this ShapeField's next child subfield in the navigation sequence.
            </summary>
            <param name="parentShape">
            The parent ShapeElement for this ShapeField.
            </param>
            <param name="startFromChildItem">
            The DiagramItem from which to start the search.
            (This DiagramItem is not included in the search.)
            If startFromChildItem is null, then the search starts with the first
            child subfield of this ShapeElement.
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>The DiagramItem representing the next child subfield in the navigation sequence.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.FindPreviousInChildSubFields(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,System.Boolean)">
            <summary>
            Finds this ShapeField's previous child subfield in the navigation sequence.
            </summary>
            <param name="parentShape">
            The parent ShapeElement for this ShapeField.
            </param>
            <param name="startFromChildItem">
            The DiagramItem from which to start the search.
            (This DiagramItem is not included in the search.)
            If startFromChildItem is null, then the search starts with the last
            child subfield of this ShapeElement.
            </param>
            <param name="focusableRequired">
            A value indicating whether the DiagramItem to find must be focusable.
            </param>
            <returns>The DiagramItem representing the previous child subfield in the navigation sequence.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.AssociateValueWith(Microsoft.VisualStudio.Modeling.Store,System.Guid)">
            <summary>
            Associates this shape field's value with a domain property on the ShapeElement.
            Use this method when the domain property is a proxy for another property.
            </summary>
            <param name="store"></param>
            <param name="propertyId">Guid identifying the property to associate.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.AssociateValueWith(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo)">
            <summary>
            Associates this shape field's value with a domain property on the ShapeElement.
            Use this method when the domain property is a proxy for another property.
            </summary>
            <param name="store"></param>
            <param name="propertyInfo">Provides information about the property association.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.AssociateValueWith(Microsoft.VisualStudio.Modeling.Store,System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo)">
            <summary>
            Associates this shape field's value with a domain property on the ShapeElement,
            when the shape is mapped to an instance of the given domain class.
            Use this method when there are multiple domain classes that this shape field can be mapped to.
            </summary>
            <param name="store"></param>
            <param name="domainClassId">Domain class id.</param>
            <param name="propertyInfo">Provides information about the property association.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.AssociateVisibilityWith(Microsoft.VisualStudio.Modeling.Store,System.Guid)">
            <summary>
            Associates this shape field's visibility with a domain property on the ShapeElement.
            </summary>
            <param name="store"></param>
            <param name="propertyId">Guid identifying the property to associate.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.AssociateVisibilityWith(Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo)">
            <summary>
            Associates this shape field's visibility with a domain property on the ShapeElement.
            </summary>
            <param name="store"></param>
            <param name="propertyInfo">Provides information about the property association.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.AssociateVisibilityWith(Microsoft.VisualStudio.Modeling.Store,System.Guid,Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo)">
            <summary>
            Associates this shape field's visibility with a domain property on the ShapeElement,
            when the shape is mapped to an instance of the given domain class.
            Use this method when there are multiple domain classes that this shape field can be mapped to.
            </summary>
            <param name="store"></param>
            <param name="domainClassId">Domain class id.</param>
            <param name="propertyInfo">Provides information about the property association.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAssociatedValuePresentationElements(Microsoft.VisualStudio.Modeling.ModelElement,System.Guid)">
            <summary>
            Gets the collection of presentation elements associated with the given model element, which
            should be an instance of the class that owns the property associated with this ShapeField.  In the case that
            this ShapeField has multiple associations, domainClassId is used to specify which mapping to use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.UpdateSelection(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection,System.Windows.Forms.Keys,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Updates selection based on keyboard event and newly focused/selected item.
            </summary>
            <param name="e">Keyboard event arguments.</param>
            <param name="newItem">Diagram item - result of keyboard navigation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.CanAddToSelection(Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Gets whether specified diagram item can be added to current selection.
            </summary>
            <param name="diagramClientView">Diagram client view containing selection.</param>
            <param name="item">Item which we're trying to add.</param>
            <returns>True if selection will accept adding this item.</returns>
            <remarks>Used by shift+move actions to determine next item in selection.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.FindLastVisibleDescendant(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Find last (bottom-most) visible child node located under specified node.
            </summary>
            <param name="node">Node to look under.</param>
            <returns>Bottom-most visible node.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.FindNodeAbove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.FindFlags)">
            <summary>
            Finds node on a type shape located immediately above from the specified node.
            </summary>
            <param name="node">DiagramItem representing a node inside a type shape.</param>
            <param name="flags">Find flags - NoWrap is supported.</param>
            <returns>Next node in bottom-up direction from the given node.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.FindNodeBelow(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.FindFlags)">
            <summary>
            
            Finds node on a type shape located immediately below from the specified node.
            </summary>
            <param name="node">DiagramItem representing a node inside a type shape.</param>
            <param name="flags">Find flags</param>
            <returns>Next node in top-down direction from the given node.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.IsNestedShapeTitle(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Gets whether specified diagram item represents nested type shape title field.
            </summary>
            <param name="diagramItem">Diagram item.</param>
            <returns>True if item is nested type shape's field.</returns>
            <remarks>Such fields should be avoided in some navigation scenarios.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the accessible name.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibleValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the accessible value.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the accessible description.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible description.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibleHelp(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a description of what the object does or how the object is used.
            </summary>
            <value>A description of what the object does or how the object is used.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibleHelpTopicId(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets an identifier for a Help topic identifier 
            associated with this accessible object.
            </summary>
            <returns>An identifier for a Help topic, or -1 if there is no Help topic.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibleHelpTopicFileName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
             <summary>
             Gets the path to the Help file associated with this accessible object.
             </summary>
             <returns>
             The path to the Help file associated with this accessible object.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibleDefaultActionDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a string that describes the default action of the object. Not all objects have a default action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.AccessibleDoDefaultAction(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibleChild(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Int32)">
            <summary>
            Retrieves the accessible child subfield corresponding to the specified index.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <param name="index">The zero-based index of the accessible child subfield.</param>
            <returns>The accessible child subfield corresponding to the specified index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibleChildCount(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Retrieves the number of accessible children belonging to this ShapeField.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The number of accessible children belonging to this ShapeField.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibleRole(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Retrieves the accessible role of this ShapeField.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The AccessibleRole of this ShapeField.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibleState(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Retrieves the accessible state of this ShapeField.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
            <returns>The AccessibleState of this ShapeField.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeField.GetAccessibilityObject(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Gets the AccessibleObject assigned to the field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField">
            <summary>
            A sub component of a ShapeField that is optionally 
            selectable, focusable, hit-testable, in-place-editable,
            and IAccessible.  Examples of a ShapeSubField are list items
            in a list field, grid cells and grid lines in a grid field,
            and radio buttons in a radio button group.
            
            ShapeSubFields are only created as needed.  For example, a grid 
            containing 10,000 cells only needs to create a subfield for a cell 
            when the subfield is selected, focused, hit-tested, edited, or 
            accessed via IAccessible.
            
            A future enhancement is to allow a subfield to represent multiple
            elements.  For example, a single subfield could represent an 
            entire column in a grid.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.#ctor">
            <summary>
            Initializes a new instance of the ShapeSubField class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.SubFieldEquals(System.Object)">
            <summary>
            Gets a value indicating whether this ShapeSubField 
            and the specified ShapeSubField are equal.
            </summary>
            <param name="obj">The ShapeSubField with which to compare this ShapeSubField.</param>
            <returns>true if the ShapeSubFields are equal.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.SubFieldHashCode">
            <summary>
            Gets a hash code for this ShapeSubField.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetFocusable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Gets a value indicating whether this ShapeSubField is focusable.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>true if this ShapeSubField is focusable.</returns>
            <remarks>
            If a ShapeSubField is focusable, it can receive and process keyboard events.
            A focusable ShapeSubField does not have to be selectable.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetSelectable(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Gets a value indicating whether this ShapeSubField is selectable.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>true if this ShapeSubField is selectable.</returns>
            <remarks>
            If a ShapeSubField is selectable, it can participate in processes which operate on the selection,
            such as drag/drop, displaying properties in the property browser, and processes invoked by 
            menu commands. 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Returns the bounds in world coordinates relative to the top-left of the parent shape.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>The bounds in world coordinates relative to the top-left of the parent shape.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetPotentialMouseAction(System.Windows.Forms.MouseButtons,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Retrieves a mouse action that should be made active on the next
            MouseDown event if the mouse is over the specified point.
            </summary>
            <param name="mouseButtons"></param>
            <param name="point">Mouse position relative to Diagram's top-left in world units.</param>
            <param name="hitTestInfo"></param>
            <returns>The mouse action that should be made active on the next MouseDown event.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetInPlaceEditorBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Returns the bounds of the in-place editor relative to its parent shape in world units.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this subfield.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>The bounds of the in-place editor relative to its parent shape in world units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.CanEditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether the value of this subfield can be edited.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this subfield.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="view">The view that will become the parent of the editor.</param>
            <returns>true if the value of this field can be edited.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Invokes the in-place editor.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this subfield.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="view">The view that will host the editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Invokes the in-place editor, setting the caret using the specified mouse position.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this subfield.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="view">The view that will host the editor.</param>
            <param name="mousePosition">The mouse position relative to the top-left of the diagram in world units.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnBeginEdit(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            Called when in-place editing has begun.
            </summary>
            <param name="e">A DiagramItemEventArgs containing event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnEndEdit(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            Called when in-place editing has ended.
            </summary>
            <param name="e">A DiagramItemEventArgs containing event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnBeginEditInternal(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnEndEditInternal(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItemEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.HasPendingEdit(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether in-place editing is active, with a commit pending.
            </summary>
            <param name="parentShape">The ShapeElement that contains this subfield.</param>
            <param name="parentField">The ShapeField that contains this subfield.</param>
            <param name="view">The view hosting the in-place editor.</param>
            <returns>true if in-place editing is active, with a commit pending.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.CommitPendingEdit(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Commits the pending edit.
            </summary>
            <param name="parentShape">The ShapeElement that contains this subfield.</param>
            <param name="parentField">The ShapeField that contains this subfield.</param>
            <param name="view">The view hosting the in-place editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetActiveInPlaceEditor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns the control for the active in-place editor.  This method may return null, 
            in which case no in-place editor is active for this subfield.
            </summary>
            <param name="parentShape">The ShapeElement that contains this subfield.</param>
            <param name="parentField">The ShapeField that contains this subfield.</param>
            <param name="view">The view hosting the in-place editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.IsNavigationKey(System.Windows.Forms.Keys)">
            <summary>
            Returns a value indicating whether the specified key data corresponds to
            a navigational command.
            </summary>
            <param name="keyData"></param>
            <returns>true if the specified key data corresponds to a navigational command.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.IsNavigationKey(System.Char)">
            <summary>
            Returns a value indicating whether the specified character corresponds to
            a navigational command.
            </summary>
            <param name="keyCharacter"></param>
            <returns>true if the specified character corresponds to a navigational command.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.DoKeyboardNavigation(System.Windows.Forms.Keys,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem)">
            <summary>
            Calls the appropriate navigation method on the shape sub-field.
            </summary>
            <param name="keyData">Keyboard data indicating keys that are currently pressed (includes modifier keys).</param>
            <param name="diagramClientView">Diagram client view where navigation should occur.</param>
            <param name="focusedItem">Currently focused diagram item.</param>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnKeyDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Called when a key is pressed.  To be called, this ShapeSubField must be the focused ShapeSubField in the selection.
            </summary>
            <param name="e">A DiagramKeyEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnKeyUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyEventArgs)">
            <summary>
            Called when a key is released.  To be called, this ShapeSubField must be the focused ShapeSubField in the selection.
            </summary>
            <param name="e">A DiagramKeyEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnKeyPress(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs)">
            <summary>
            Called between a key down and key up.  To be called, this ShapeSubField must be the focused ShapeSubField in the selection.
            </summary>
            <param name="e">A DiagramKeyPressEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnMouseDown(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseDown().
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseMove().
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnMouseUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseUp().
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnMouseWheel(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called by the control's OnMouseWheel().
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called by the control's OnClick().
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.OnDoubleClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Called by the control's OnDoubleClick().
            </summary>
            <param name="e">A DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor that is displayed when the mouse pointer is over the ShapeSubField.
            </summary>
            <param name="currentCursor">The current cursor.</param>
            <param name="diagramClientView">The view that the cursor will be drawn on.</param>
            <param name="mousePosition">The mouse position in world units relative to diagram's top-left.</param>
            <returns>The cursor to display.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.NavigateToFirst(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeSubField to set focus to this subfield's first sibling 
            (i.e., the parent's first child) in the navigation sequence.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="selection">The current selection whose focus and selection will be updated.</param>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.NavigateToNext(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeSubField to set focus to the next object in the navigation sequence.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="selection">The current selection whose focus and selection will be updated.</param>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.NavigateToPrevious(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeSubField to set focus to the previous object in the navigation sequence.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="selection">The current selection whose focus and selection will be updated.</param>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.NavigateToLast(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeSubField to set focus to this subfield's last sibling 
            (i.e., the parent's last child) in the navigation sequence.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="selection">The current selection whose focus and selection will be updated.</param>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.NavigateAscend(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Called by this ShapeSubField to set focus to its first 
            ancestor in the navigation sequence.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="selection">The current selection whose focus and selection will be updated.</param>
            <remarks>
            If a ShapeElement, ShapeField, or ShapeSubField is not focusable, 
            it does not participate in the navigation sequence.
            </remarks>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.NavigateTo(Microsoft.VisualStudio.Modeling.Diagrams.DiagramItem,Microsoft.VisualStudio.Modeling.Diagrams.SelectedShapesCollection)">
            <summary>
            Sets the focus to the specified DiagramItem.
            </summary>
            <param name="newFocusItem">The DiagramItem to receive the focus.</param>
            <param name="selection">The selection to update. (The selection maintains the focus.)</param>
            <returns>True if navigation occurred, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Returns the accessible name.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>The accessible name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Returns the accessible description.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>The accessible description.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetAccessibleValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            
            </summary>
            <param name="parentShape"></param>
            <param name="parentField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetAccessibleRole(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Returns the accessible role.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>The accessible role.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetAccessibleHelp(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Gets a description of what the object does or how the object is used.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <value>A description of what the object does or how the object is used.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetAccessibleHelpTopicId(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Gets an identifier for a Help topic identifier 
            associated with this accessible object.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <returns>An identifier for a Help topic, or -1 if there is no Help topic.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetAccessibleHelpTopicFileName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
             <summary>
             Gets the path to the Help file associated with this accessible object.
             </summary>
             <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
             <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
             <returns>
             The path to the Help file associated with this accessible object.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetAccessibleDefaultActionDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Gets a string that describes the default action of the object. Not all objects have a default action.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <value>a string that describes the default action of the object.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.AccessibleDoDefaultAction(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField)">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField.GetAccessibilityObject(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Gets the AccessibleObject assigned to the subfield.
            </summary>
            <param name="parentShape">The parent ShapeElement of this ShapeSubField.</param>
            <param name="parentField">The parent ShapeField of this ShapeSubField.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
            <returns>The AccessibleObject assigned to the subfield.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ImageField">
            <summary>
            A ShapeField which can display an image in a ShapeElement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ImageField class.
            </summary>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageField.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the ImageField class.
            </summary>
            <param name="image">Default image to display</param>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ImageField.DefaultImage">
            <summary>
            Gets or sets the default image associated with this ImageField.  The
            default image can be customized by overriding the GetDisplayImage method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ImageField.DefaultUnscaled">
            <summary>
            Gets or sets whether image should be drawn unscaled with regards to the bounds
            of this field or image should be scaled to fit the bounds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageField.GetMinimumSize(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the minimum size of the ImageField.
            </summary>
            <remarks>
            The minimum size is the size of
            the image to be displayed, or the minimum size specified in the
            AnchoringBehavior, whichever is larger.  If the shape field is scaled,
            (GetUnscaled() returns false) then the AnchoringBehavior size is always used.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageField.DoPaint(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Draws the contents of the ShapeField.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains the event data.</param>
            <param name="parentShape">The parent shape of this field.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageField.GetDisplayImage(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the image to be displayed by this field.
            </summary>
            <param name="parentShape">The parent ShapeElement of this field.</param>
            <returns>
            The image to be displayed by this field.
            </returns>
            <remarks>
            Override this method to customize your display image prior to drawing.
            </remarks>
            <remarks>
            By default, this method returns GetValue() as Image or the default image.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageField.GetUnscaled(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets whether the image should be drawn unscaled or not.
            </summary>
            <param name="parentShape">The parent ShapeElement of this field.</param>
            <returns>True to draw image unscaled and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageField.GetAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the default accessible name for an image field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageField.GetAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the default accessible description for an image field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible description.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ImageField.GetAccessibleRole(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Retrieves the accessible role of this ShapeField.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The AccessibleRole of this ShapeField.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField">
            <summary>
            A ShapeField which can display an image corresponding the selected state
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ToggleButtonField class
            </summary>
            <param name="images"></param>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.CanSnapToPixel">
            <summary>
            Can we snap to a pixel?
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.GetPotentialMouseAction(System.Windows.Forms.MouseButtons,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Retrieves a mouse action that should be made active on the next
            MouseDown event if the mouse is over the specified point.
            </summary>
            <param name="mouseButtons">The current mouse button state.</param>
            <param name="point">The mouse position relative to the diagram's top-left in world units.</param>
            <param name="hitTestInfo">Information detailing the results of the hit testing.</param>
            <returns>A mouse action that should be made active on the next MouseDown event if the mouse is over the specified point.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.DefaultUnscaled">
            <summary>
            Gets or sets a value indicating whether the image should be drawn unscaled with regards to the bounds
            of this field or the image should be scaled to fit the bounds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.GetButtonImage(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Provides the image for the current state of the button
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.GetUnscaled(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets whether the button image should be drawn unscaled or not.
            </summary>
            <param name="parentShape">The parent ShapeElement of this field.</param>
            <returns>True to draw button image unscaled and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.CreateToggleButtonEventArgs(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Create an instance of the class responsible for toggle button event arguments
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.GetMinimumSize(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the minimum size of the ImageField, which is the size of 
            the image to be displayed, or the minimum size specified in the
            AnchoringBehavior, whichever is larger.  If the shape field is unscaled,
            then the AnchoringBehavior size is always used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.DoPaint(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Draws the contents of the ShapeField.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains the event data.</param>
            <param name="parentShape">The parent shape of this field.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.OnMouseUp(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Handles mouse click on the button
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.ChangeState(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Change the state of the toggle button
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.GetMetafile(System.String)">
            <summary>
            Gets a metafile
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToggleButtonField.GetBitmap(System.String)">
            <summary>
            Gets a metafile
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PlusMinusButtonField">
            <summary>
            A ShapeField that represents plus/minus button
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PlusMinusButtonField.GetPotentialMouseAction(System.Windows.Forms.MouseButtons,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Retrieves a mouse action that should be made active on the next
            MouseDown event if the mouse is over the specified point.
            </summary>
            <param name="mouseButtons">The current mouse button state.</param>
            <param name="point">The mouse position relative to the diagram's top-left in world units.</param>
            <param name="hitTestInfo">Information detailing the results of the hit testing.</param>
            <returns>A mouse action that should be made active on the next MouseDown event if the mouse is over the specified point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PlusMinusButtonField.GetButtonImage(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Provides the image for the current state of the button
            </summary>
            <param name="parentShape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PlusMinusButtonField.AccessibleDoDefaultAction(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Performs the default action to expand/collapse the PlusMinusButtonField
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PlusMinusButtonField.GetAccessibleDefaultActionDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a string that describes the default action of the PlusMinusButtonField
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PlusMinusButtonField.GetAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the default accessible name for an plus/minus button field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PlusMinusButtonField.GetAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the default accessible description for an plus/minus button field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible description.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PlusMinusButtonField.GetAccessibleRole(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Retrieves the accessible role of this ShapeField.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The AccessibleRole of this ShapeField.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PlusMinusButtonField.GetAccessibleState(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Retrieves the accessible state of this ShapeField.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
            <returns>The AccessibleState of this ShapeField.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ChevronButtonField">
            <summary>
            A ShapeField that represents double arrows expand/collapse button
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ChevronButtonField.GetPotentialMouseAction(System.Windows.Forms.MouseButtons,Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Retrieves a mouse action that should be made active on the next
            MouseDown event if the mouse is over the specified point.
            </summary>
            <param name="mouseButtons">The current mouse button state.</param>
            <param name="point">The mouse position relative to the diagram's top-left in world units.</param>
            <param name="hitTestInfo">Information detailing the results of the hit testing.</param>
            <returns>A mouse action that should be made active on the next MouseDown event if the mouse is over the specified point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ChevronButtonField.GetButtonImage(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Provides the image for the current state of the button
            </summary>
            <param name="parentShape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ChevronButtonField.GetAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the default accessible name for a button field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ChevronButtonField.GetAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the default accessible description for a button field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible description.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ChevronButtonField.AccessibleDoDefaultAction(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Performs the default action to expand/collapse the ChevronButtonField
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ChevronButtonField.GetAccessibleDefaultActionDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets a string that describes the default action of the ChevronButtonField
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ChevronButtonField.GetAccessibleRole(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Retrieves the accessible role of this ShapeField.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The AccessibleRole of this ShapeField.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ChevronButtonField.GetAccessibleState(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Retrieves the accessible state of this ShapeField.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
            <returns>The AccessibleState of this ShapeField.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius">
            <summary>
            Structure that represents four floating-point values indicating the corner radii of the AreaField.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius.#ctor(System.Single)">
            <summary>
            Construct an AreaFieldCornerRadius with the given radius value. All four corner radii are initialized to this value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct an AreaFieldCornerRadius with the given radius values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius.NorthWestCornerRadius">
            <summary>
            North West Corner Radius
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius.NorthEastCornerRadius">
            <summary>
            North East Corner Radius
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius.SouthWestCornerRadius">
            <summary>
            South West Corner Radius
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius.SouthEastCornerRadius">
            <summary>
            South East Corner Radius
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius.Equals(System.Object)">
            <summary>
            Tests whether given object is an AreaFieldCornerRadius with the same radii.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius.GetHashCode">
            <summary>
            Gets the hash code for this AreaFieldCornerRadius structure.
            </summary>
            <returns>The hash code for this RectangleD.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius.op_Equality(Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius,Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius)">
            <summary>
            Tests whether two AreaFieldCornerRadius structures have equal radii.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius.op_Inequality(Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius,Microsoft.VisualStudio.Modeling.Diagrams.AreaFieldCornerRadius)">
            <summary>
            Tests whether two AreaFieldCornerRadius structures have different radii.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.AreaField">
            <summary>
            Area Field (a.k.a. Background Field)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.#ctor(System.String)">
            <summary>
            default constructor (defaults to square corners)
            </summary>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.#ctor(System.String,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="cornerRadius">Corner Radius</param>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Flexible constructor allows you to specify different corner rounding radius for each corner.
            </summary>
            <param name="northWestCornerRadius"></param>
            <param name="northEastCornerRadius"></param>
            <param name="southWestCornerRadius"></param>
            <param name="southEastCornerRadius"></param>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.DefaultHeight">
            <summary>
            Gets or sets the default height for the AreaField if no bottom anchor
            is specified.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.DefaultWidth">
            <summary>
            Gets or sets the default width for the AreaField if no right anchor
            is specified.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.DefaultCornerRadius">
            <summary>
            Default corner radius values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.FillBackground">
            <summary>
            Specify if the background is to be filled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.GradientEndingColor">
            <summary>
            Ending color for a gradient fill
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.DefaultLinearGradientMode">
            <summary>
            Specifies a mode for the linear gradient brush
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.IsGradientBrushRequested">
            <summary>
            Quick check if a gradient brush is requested
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.DrawBorder">
            <summary>
            Specify if the border is to be drawn
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.DoPaint(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Draws the contents of the ShapeField.
            </summary>
            <param name="e"></param>
            <param name="parentShape"></param>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.borderPath">
            <summary>
            Cached border path
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.BorderPath">
            <summary>
            gets the border path - creates on first call
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.GetBorderPath(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Get the border path for the field
            This is a singleton on the AreaField class.  Do not dispose.
            Use immediately.  Use Clone if another path is needed!
            </summary>
            <param name="parentShape">Parent containing shape</param>
            <returns>GraphicsPath for the border</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.GetBounds(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the bounds for this area field from the parent shape, or the
            default size that was specified.
            </summary>
            <param name="parentShape">ParentShape to get size from.</param>
            <returns>Bounding rectangle of this field.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.GetAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the default accessible name for an area field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AreaField.GetAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the default accessible description for an area field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible description.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAutoInvalidator">
            <summary>
            An invisible shape field, whose purpose is to force the parent shape to 
            repaint itself when an associated value (specified in the constructor) 
            changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAutoInvalidator.#ctor(System.String)">
            <summary>
            Creates a new ShapeAutoInvalidator with the given name.  Call AssociateValueWith after construction
            to set up the property association.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAutoInvalidator.#ctor(System.String,Microsoft.VisualStudio.Modeling.Store,System.Guid)">
            <summary>
            Constructor:
            Associates this shape field's value with a domain property on the ShapeElement.
            </summary>
            <param name="store"></param>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
            <param name="domainPropertyGuid">The guid of a domain property on a ShapeElement.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAutoInvalidator.#ctor(System.String,Microsoft.VisualStudio.Modeling.Store,Microsoft.VisualStudio.Modeling.Diagrams.AssociatedPropertyInfo)">
            <summary>
            Constructor:
            Associates this shape field's value with a domain property on the ShapeElement.
            Use this method when the domain property is a proxy for another property.
            </summary>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
            <param name="store"></param>
            <param name="propertyInfo">Information about the property association.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAutoInvalidator.GetVisible(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Make invisible
            </summary>
            <param name="parentShape">The ShapeElement instance</param>
            <returns>false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAutoInvalidator.DoPaint(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Draws the shape field.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains the event data.</param>
            <param name="parentShape">The parent shape of this field.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ShapeAutoInvalidator.DoHitTest(Microsoft.VisualStudio.Modeling.Diagrams.PointD,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramHitTestInfo)">
            <summary>
            Make invisible.
            </summary>
            <param name="point">A point in world units relative to the specified parent ShapeElement's top-left</param>
            <param name="parentShape">The ShapeElement to which this ShapeField belongs</param>
            <param name="diagramHitTestInfo">The DiagramHitTestInfo that will receive the results of the hit test.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet">
             <summary>
             A StyleSet is a collection of graphics objects that can be used by an 
             application to specify a set of pens, brushes, and fonts to be used for
             all of the drawing operations.  Within the painting code, you can call
             StyleSet.GetPen to retrieve a specific pen defined by the system.
             That pen will be set to the correct color and style defined with the application.
             Use that pen immediately as it is unique.  If you need to hold onto a pen use
             GetPenCopy.
            
             StyleSets can live at multiple levels in the system.  There's an ApplicationStyleSet
             which are the app defined defaults style scheme.  There are also ClassStyleSets which
             exist at the class type level to specify styles for all instances of that class of
             shape.  There can also exist instance StyleSets which contains resource information
             for each instance of a shape.  This should be used when different instances of the 
             same class of shapes can have different appearance.
            
             When actually trying to retrieve an object, like a Pen, the StyleSet code goes up the
             inheritance chain from instance to class to application StyleSets until if finds that
             first one that contains that resource that you're looking for (as defined by the ResourceId
             that you're asking for).
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Creates an instance of the StyleSet linking the current one to its parent.
            </summary>
            <param name="parent">Parent StyleSet that this one links to.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.Parent">
            <summary>
            Gets the parent of this StyleSet in the inheritance chain.  Will be null if this is
            the ApplicationStyleSet.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.RefreshResources(System.Boolean)">
            <summary>
            Forces a re-resolution of the resources if necessary.
            The resources are resolved later when used.
            </summary>
            <param name="useHighContrastColors">true if the resources should use system high contrast colors.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.UseHighContrastColors">
            <summary>
            Gets a value indicating whether this StyleSet resolves to high contrast colors.
            </summary>
            <value>true if this StyleSet resolves to high contrast colors.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetPenSettingsStruct(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.StyleSet@)">
            <summary>
            Returns the first named pen with the specified penId,
            starting the search in this style set and working up the parent 
            style set chain.
            </summary>
            <param name="penId">The StyleSetResourceId for the pen that we're looking for.</param>
            <returns>The first named pen with the specified penId.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.ResolvePen(Microsoft.VisualStudio.Modeling.Diagrams.PenSettingsStruct,Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Fully and unconditionally resolves the specified named pen starting with 
            the default style set and working its way to this style set.
            </summary>
            <param name="pSS">The specified named pen to resolve.</param>
            <param name="styleSetContaining">The style set that contains the specified named pen.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.OverridePenWorker(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.PenSettings)">
            <summary>
            Overrides the specified Pen in the StyleSet.
            </summary>
            <param name="penId">The new penId for the resource to put into this StyleSet.</param>
            <param name="basePenId">The base penId for the resource in the parent StyleSet.</param>
            <param name="penSettings">PenSettings for what is allowed to override.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.OverridePen(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.PenSettings)">
            <summary>
            Overrides the specified Pen in the StyleSet.
            </summary>
            <param name="penId">The new penId for the resource to put into this StyleSet.</param>
            <param name="penSettings">PenSettings for what is allowed to override.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.ClearPenOverride(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Clears an overriden Pen in the StyleSet.
            </summary>
            <param name="penId">The penId for the resource to clear.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.AddPen(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.PenSettings)">
            <summary>
            Add a new Pen to this StyleSet.
            </summary>
            <param name="newPenId">Id of the new pen to create.</param>
            <param name="basePenId">Id of the pen on which to base the new one.</param>
            <param name="penSettings">Settings flags for the Pen's overridden or immutable properties.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.RemovePen(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Removes a Pen from this StyleSet.
            </summary>
            <param name="newPenId">Id of the pen to remove.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetOverriddenPenSettings(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Gets a PenSettings object containing settings which have been overriden in this style set.
            If no settings have been overriden, this method returns null.
            </summary>
            <param name="penId">Id of the PenSettings to retrieve.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetPen(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Retrieves a specific Pen from the StyleSet.  If it's not in the current one,
            it looks up the parent chain to see if it can find it there.
            This is a singleton.  Do not dispose - this will crash!
            Use immediately.  Use GetPenCopy if another pen is needed!
            </summary>
            <param name="penId">Id of pen to retrieve.</param>
            <returns>The requested Pen.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetPenCopy(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Retrieves a specific Pen from the StyleSet.  If it's not in the current one,
            it looks up the parent chain to see if it can find it there.
            This is a copy.  Caller is responsible for dispose.
            </summary>
            <param name="brushId">ID of brush</param>
            <returns>A copy of the requested Pen.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.RefreshPens">
            <summary>
            Sets up the pens to be recomputed on next request by nulling out the resolvedPenSettings
            and resolvedPenDescriptor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetBrushSettingsStruct(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.StyleSet@)">
            <summary>
            Returns the first named brush with the specified brushId,
            starting the search in this style set and working up the parent 
            style set chain.
            </summary>
            <param name="brushId">The StyleSetResourceId for the brush that we're looking for.</param>
            <returns>The first named brush with the specified brushId.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.ResolveBrush(Microsoft.VisualStudio.Modeling.Diagrams.BrushSettingsStruct,Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Fully and unconditionally resolves the specified named brush starting with 
            the default style set and working its way to this style set.
            </summary>
            <param name="bSS">The named brush to resolve.</param>
            <param name="styleSetContaining">The style set that contains the specified named brush.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.OverrideBrushWorker(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings)">
            <summary>
            Overrides the specified Brush in the StyleSet.
            </summary>
            <param name="brushId">The new brushId for the resource to put into this StyleSet.</param>
            <param name="baseBrushId">The base brushId for the resource in the parent StyleSet.</param>
            <param name="brushSettings">BrushSettings for what is allowed to override.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.OverrideBrush(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings)">
            <summary>
            Overrides the specified Brush in the StyleSet.
            </summary>
            <param name="brushId">The new brushId for the resource to put into this StyleSet.</param>
            <param name="brushSettings">BrushSettings for what is allowed to override.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.ClearBrushOverride(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Clears an overriden Brush in the StyleSet.
            </summary>
            <param name="brushId">The brushId for the resource to clear.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.AddBrush(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings)">
            <summary>
            Add a new Brush to this StyleSet.
            </summary>
            <param name="newBrushId">Id of the new brush to create.</param>
            <param name="baseBrushId">Id of the brush on which to base the new one.</param>
            <param name="brushSettings">Settings flags for the Brush's overridden or immutable properties.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.RemoveBrush(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Removes a Brush from this StyleSet.
            </summary>
            <param name="newPenId">Id of the brush to remove.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetOverriddenBrushSettings(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Gets a BrushSettings object containing settings which have been overriden in this style set.
            If no settings have been overriden, this method returns null.
            </summary>
            <param name="brushId">Id of the BrushSettings to retrieve.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetBrush(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Retrieves a specific Brush from the StyleSet.  If it's not in the current one,
            it looks up the parent chain to see if it can find it there.
            This is a singleton.  Do not dispose - this will crash!
            Use immediately.  Use GetBrushCopy if another brush is needed!
            </summary>
            <param name="brushId">Id of brush to retrieve.</param>
            <returns>The requested Brush.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetBrushCopy(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Retrieves a specific Brush from the StyleSet.  If it's not in the current one,
            it looks up the parent chain to see if it can find it there.
            This is a copy.  Caller is responsible for dispose.
            </summary>
            <param name="brushId">ID of brush</param>
            <returns>A copy of the requested Brush.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.RefreshBrushes">
            <summary>
            Sets up the brushes to be recomputed on next request by nulling out the resolvedBrushSettings
            and resolvedBrushDescriptor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetFontSettingsStruct(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.StyleSet@)">
            <summary>
            Returns the first named font with the specified fontId,
            starting the search in this style set and working up the parent
            style set chain.
            </summary>
            <param name="fontId">The StyleSetResourceId for the font that we're looking for.</param>
            <returns>The first named font with the specified fontId.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.ResolveFont(Microsoft.VisualStudio.Modeling.Diagrams.FontSettingsStruct,Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Fully and unconditionally resolves the specified named font starting with 
            the named font in the default style set and adding overrides to it as it 
            works its way to this style set.
            </summary>
            <param name="fSS">The specified named font to resolve.</param>
            <param name="styleSetContaining">The style set that contains the specified named font.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.OverrideFontWorker(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.FontSettings)">
            <summary>
            Overrides the specified Font in the StyleSet.
            </summary>
            <param name="fontId">The new fontId for the resource to put into this StyleSet.</param>
            <param name="baseFontId">The base fontId for the resource in the parent StyleSet.</param>
            <param name="fontSettings">FontSettings for what is allowed to override.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.OverrideFont(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.FontSettings)">
            <summary>
            Overrides the specified Font in the StyleSet.
            </summary>
            <param name="fontId">The new fontId for the resource to put into this StyleSet.</param>
            <param name="fontSettings">FontSettings for what is allowed to override.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.ClearFontOverride(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Clears an overriden Font in the StyleSet.
            </summary>
            <param name="fontId">The fontId for the resource to clear.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.AddFont(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.FontSettings)">
            <summary>
            Add a new Font to this StyleSet.
            </summary>
            <param name="newFontId">Id of the new font to create.</param>
            <param name="baseFontId">Id of the font on which to base the new one.</param>
            <param name="fontSettings">Settings flags for the Font's overridden or immutable properties.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.RemoveFont(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Removes a Font from this StyleSet.
            </summary>
            <param name="newPenId">Id of the font to remove.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetOverriddenFontSettings(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Gets a FontSettings object containing settings which have been overriden in this style set.
            If no settings have been overriden, this method returns null.
            </summary>
            <param name="fontId">Id of the FontSettings to retrieve.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetFont(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Retrieves a specific Font from the StyleSet.  If it's not in the current one,
            it looks up the parent chain to see if it can find it there.
            </summary>
            <param name="fontId">Id of font to retrieve.</param>
            <returns>A clone of the requested Font.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetFontSize(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Returns the em height of the font with the specified id.  This is the value
            specified when the font was created.  Use GetFontHeight instead to
            get the height of a line of text when using this font.
            </summary>
            <param name="fontId">The id of the font.</param>
            <returns>The size of the font given when the font was created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetFontHeight(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Returns the line spacing of the specified font (i.e., the height
            of a line of text) in world units.  Line spacing is the ascent + 
            the descent + some recommended extra.
            The ascent is the height of the character above the baseline, and 
            the descent is the height of the character below the baseline.
            The extra is below the descent.
            </summary>
            <param name="fontId">The id of the font.</param>
            <returns>The font height which can be used for spacing successive lines of text.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.GetResolvedFontDescriptor(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Returns the resolved FontDescriptor specified by the fontId.
            </summary>
            <param name="fontId">The id of the font whose FontDescriptor is being retrieved.</param>
            <returns>The resolved FontDescriptor specified by the fontId.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSet.RefreshFonts">
            <summary>
            Sets up the fonts to be recomputed on next request by nulling out the resolvedFontSettings
            and resolvedFontDescriptor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ApplicationStyleSet">
            <summary>
            The ApplicationStyleSet is a singleton class the represents the basic styles set up by
            the system.  These styles are pens, brushes, and fonts that can be used throughout the 
            Design Surface.  Specific designers cannot override pens in the ApplicationStyleSet.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ApplicationStyleSet.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            Constructor that creates the application's StyleSet.
            Since this is a singleton class, its constructor is set to private, so all access to this
            class must be done through the ApplicationStyleSet.StyleSet property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.ApplicationStyleSet.StyleSet">
            <summary>
            Gets the single instance of the ApplicationStyleSet.
            </summary>
            <value>The ApplicationStyleSet for this process.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ApplicationStyleSet.InitializeApplicationPens">
            <summary>
            Initializes all of the ApplicationStyleSet pens.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ApplicationStyleSet.InitializeApplicationBrushes">
            <summary>
            Initializes all of the ApplicationStyleSet brushes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ApplicationStyleSet.RefreshAllResources(Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Boolean)">
            <summary>
            Refreshes all of the AppStyleSet resoures and all of the instance and class resources
            for the specified Diagram.
            </summary>
            <param name="diagram">Diagram used to look for child shapes.</param>
            <param name="highContrast">Whether we're going into high contrast or not.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ApplicationStyleSet.RefreshAllChildShapes(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,System.Boolean)">
            <summary>
            Go through all of the relative and nested child shapes for the parent shape
            calling each ShapeElement to RefreshResources on its instance and class style set.
            </summary>
            <param name="shape">Parent shape to get child shapes from.</param>
            <param name="highContrast">Whether we're going into high contrast or not.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ApplicationStyleSet.LoopThruChildShapes(System.Collections.Generic.ICollection{Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement},System.Boolean)">
            <summary>
            Loops through a specific list of child shapes recomputing all of its child shapes as well.
            </summary>
            <param name="childShapes">List of child shapes to enumerate.</param>
            <param name="highContrast">Whether we're going into high contrast or not.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet">
            <summary>
            The DefaultStyleSet is a singleton class the represents the basic styles set up by
            the system.  These styles are pens, brushes, and fonts that can be used throughout the 
            Design Surface.  Specific designers cannot override pens in the DefaultStyleSet by calling the
            OverridePen, OverrideBrush, and OverrideFont methods.  These are the base color schemes for
            the design surface, but designers can override their specific color scheme in the Diagram
            style set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.#ctor">
            <summary>
            Constructor that creates the application's StyleSet.
            Since this is a singleton class, its constructor is set to private, so all access to this
            class must be done through the ApplicationStyleSet.StyleSet property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.StyleSet">
            <summary>
            Gets the single instance of the ApplicationStyleSet.
            </summary>
            <value>The ApplicationStyleSet for this process.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.DefaultBaseFontSize">
            <summary>
            Gets the default base font size.  This size is what all font sizes within the DefaultStyleSet
            are sized relative to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.InitializeDefaultPens">
            <summary>
            Initializes all of the Default pens.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.InitializeDefaultBrushes">
            <summary>
            Initializes all of the DefaultStyleSet brushes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.InitializeDefaultFonts">
            <summary>
            Initializes all of the ApplicationStyleSet fonts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.OverridePen(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.PenSettings)">
            <summary>
            Overrides the specified Pen in the StyleSet.  Just asserts because that's not
            allowed on the base application style set.
            </summary>
            <param name="penId">The new penId for the resource to put into this StyleSet.</param>
            <param name="penSettings">PenSettings for what is allowed to override.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.OverrideBrush(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings)">
            <summary>
            Overrides the specified Brush in the StyleSet. Just asserts because that's not
            allowed on the base application style set.
            </summary>
            <param name="brushId">The new brushId for the resource to put into this StyleSet.</param>
            <param name="brushSettings">BrushSettings for what is allowed to override.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.OverrideFont(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId,Microsoft.VisualStudio.Modeling.Diagrams.FontSettings)">
            <summary>
            Overrides the specified Font in the StyleSet. Just asserts because that's not
            allowed on the base application style set.
            </summary>
            <param name="fontId">The new fontId for the resource to put into this StyleSet.</param>
            <param name="fontSettings">FontSettings for what is allowed to override.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.ClearPenOverride(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Clears an overriden Pen in the StyleSet. Just asserts because that's not
            allowed on the base application style set.
            </summary>
            <param name="penId">The penId for the resource to clear.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.ClearBrushOverride(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Clears an overriden Brush in the StyleSet. Just asserts because that's not
            allowed on the base application style set.
            </summary>
            <param name="brushId">The brushId for the resource to clear.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DefaultStyleSet.ClearFontOverride(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Clears an overriden Font in the StyleSet. Just asserts because that's not
            allowed on the base application style set.
            </summary>
            <param name="fontId">The fontId for the resource to clear.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo">
            <summary>
            Contains the StyleSet information about a brush.  These are all of the settings that be
            placed on a Brush like Color, BrushType, HatchType, Image, etc.  The information is used to
            create a unique hash code for this class which is used in the HybridDictionary for lookup
            of a particular cached resource.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.BrushType">
            <summary>
            Gets or sets the type of Brush.
            </summary>
            <value>Type of brush used.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.ForeColor">
            <summary>
            Gets or sets the color of hatch lines drawn by this HatchBrush object.
            </summary>
            <value>A Color structure that represents the foreground color for this HatchBrush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.Color">
            <summary>
            Gets or sets the color of this SolidBrush object.
            </summary>
            <value>A Color structure that represents the color of this brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.BackColor">
            <summary>
            Gets or sets the color of spaces between the hatch lines drawn by this HatchBrush object.
            </summary>
            <value>A Color structure that represents the background color for this HatchBrush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.HatchStyle">
            <summary>
            Gets or sets the hatch style of this HatchBrush object.
            </summary>
            <value>A HatchStyle enumeration that represents the pattern of this HatchBrush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.Image">
            <summary>
            Gets or sets the Image object associated with this TextureBrush object.
            </summary>
            <value>An Image object that represents the image with which this 
            TextureBrush object fills shapes.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.Transform">
            <summary>
            Gets or sets a Matrix object that defines a local geometric transformation 
            for the image associated with this TextureBrush object.
            </summary>
            <value>A Matrix object that defines a geometric transformation that applies only to 
            fills drawn by using this TextureBrush object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.WrapMode">
            <summary>
            Gets or sets a WrapMode enumeration that indicates the wrap mode for this TextureBrush object.
            </summary>
            <value>A WrapMode enumeration that specifies how fills drawn by using this 
            TextureBrush object are tiled.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.Clone">
            <summary>
            Method to create a new instance of this object with the same instance data.
            </summary>
            <returns>New instance of this BrushStyleSetInfo.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.GetHashCode">
            <summary>
            Serves as a hash function for a BrushStyleSetInfo, 
            suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this one.
            Only equal if all of their properties are equal.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the specified object is equal to this one; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the two specified objects are equal to each other
            </summary>
            <param name="obj">The first object to compare.</param>
            <param name="obj">The second object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BrushDescriptor">
            <summary>
            BrushDescriptor class holds the BrushStyleSetInfo for a class and an instance of the Brush
            described by that info (if it's already been created).  The BrushDescriptor is what gets
            cached for later use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushDescriptor.BrushStyleSetInfo">
            <summary>
            Gets the brush information for this descriptor.
            </summary>
            <value>A BrushStyleSetInfo for this descriptor.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushDescriptor.Brush">
            <summary>
            Gets an instance of the Brush defined by this descriptor.  If the brush has not
            been previously created, it creates it first.
            This is a singleton.  Do not dispose - this will crash!
            Use immediately.
            </summary>
            <value>A Brush defined by this descriptor.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BrushDescriptor.BrushFromBrushStyleSetInfo">
            <summary>
            Creates a new instance of the Brush from its BrushStyleSetInfo description.
            </summary>
            <returns>A new Brush instance created from its BrushStyleSetInfo.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BrushDescriptor.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo)">
            <summary>
            Constructor that creates a descriptor based on a specified BrushStyleSetInfo.
            </summary>
            <param name="brushStyleSetInfo">BrushStyleSetInfo to create this descriptor for.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettingsFlags">
            <summary>
            Flags to specify which Brush settings have been overridden or made immutable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings">
            <summary>
            BrushSettings allows certain properties on a BrushStyleSetInfo to be marked as overridden
            or immutable.  If certain Brush settings are marked as immutable, then they are not allowed
            to be changed again.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.BrushSettingsFlags">
            <summary>
            Gets the overridden properties in the BrushStyleSetInfo.
            </summary>
            <value>A BrushSettingsFlags for the overridden BrushStyleSetInfo properties.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.BrushStyleSetInfo">
            <summary>
            Gets or sets the BrushStyleSetInfo associated with these settings.
            </summary>
            <value>A BrushStyleSetInfo associated with this BrushSettings object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.ImmutableFlags">
            <summary>
            Gets or sets the ImmuatableFlags.  This specifies which properties in the BrushStyleSetInfo
            can be changed and which ones are not allowed to change.
            </summary>
            <value>A BrushSettingsFlags for the immutable BrushStyleSetInfo properties.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.BrushType">
            <summary>
            Gets or sets the type of Brush.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>Type of brush used.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.ImmutableBrushType">
            <summary>
            Makes the BrushType setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the BrushType setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.ForeColor">
            <summary>
            Gets or sets the color of hatch lines drawn by this HatchBrush object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A Color structure that represents the foreground color for this HatchBrush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.ImmutableForeColor">
            <summary>
            Makes the ForeColor setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the ForeColor setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.Color">
            <summary>
            Gets or sets the color of this SolidBrush object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A Color structure that represents the color of this brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.ImmutableColor">
            <summary>
            Makes the Color setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the ForeColor setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.BackColor">
            <summary>
            Gets or sets the color of spaces between the hatch lines drawn by this HatchBrush object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A Color structure that represents the background color for this HatchBrush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.ImmutableBackColor">
            <summary>
            Makes the BackColor setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the BackColor setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.HatchStyle">
            <summary>
            Gets or sets the hatch style of this HatchBrush object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A HatchStyle enumeration that represents the pattern of this HatchBrush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.ImmutableHatchStyle">
            <summary>
            Makes the HatchStyle setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the HatchStyle setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.Image">
            <summary>
            Gets or sets the Image object associated with this TextureBrush object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>An Image object that represents the image with which this 
            TextureBrush object fills shapes.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.ImmutableImage">
            <summary>
            Makes the Image setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the Image setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.Transform">
            <summary>
            Gets or sets a Matrix object that defines a local geometric transformation 
            for the image associated with this TextureBrush object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A Matrix object that defines a geometric transformation that applies only to 
            fills drawn by using this TextureBrush object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.ImmutableTransform">
            <summary>
            Makes the Transform setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the Transform setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.WrapMode">
            <summary>
            Gets or sets a WrapMode enumeration that indicates the wrap mode for this TextureBrush object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A WrapMode enumeration that specifies how fills drawn by using this 
            TextureBrush object are tiled.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.ImmutableWrapMode">
            <summary>
            Makes the WrapMode setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the WrapMode setting is immutable; otherwise it is not.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.Override(Microsoft.VisualStudio.Modeling.Diagrams.BrushSettingsFlags)">
            <summary>
            Overrides the settings for this Brush based on the specified flags.
            </summary>
            <param name="flags">Flag for which Brush settins are overridden.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.IsOverridden(Microsoft.VisualStudio.Modeling.Diagrams.BrushSettingsFlags)">
            <summary>
            Tests whether certain BrushSettings are overridden.
            </summary>
            <param name="settings">Flags to test and see if they're overridden.</param>
            <returns>true the flags are overridden; false they are not overridden.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.BrushSettingsFlags,Microsoft.VisualStudio.Modeling.Diagrams.BrushSettingsFlags,Microsoft.VisualStudio.Modeling.Diagrams.BrushStyleSetInfo)">
            <summary>
            Creates a BrushSettings based on settings information.
            </summary>
            <param name="brushSettingsFlags">Override settings</param>
            <param name="brushImmutableFlags">Immutability settings</param>
            <param name="brushInfo">Current brush information</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.BrushSettingsStruct">
            <summary>
            A named brush in the style set.  
            A named brush is composed of:
            (1) a base named brush, given by a brush ID (which can be different from its own ID);
            (2) override settings;
            (3) resolved settings;
            (4) resolved brush (a reference to the actual cached resource);
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NamedBrushCollection">
            <summary>
            A collection of named brushes used to cache the current brushes used in the system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NamedBrushCollection.Item(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Item property assures type safety
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.FontStyleSetInfo">
            <summary>
            Contains the StyleSet information about a font.  These are all of the settings that be
            placed on a Font like Name, Size, FontStyle, etc.  The information is used to
            create a unique hash code for this class which is used in the HybridDictionary for lookup
            of a particular cached resource.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontStyleSetInfo.Name">
            <summary>
            Gets or sets the name of the FontFamily object.
            </summary>
            <value>Name of the FontFamily to use.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontStyleSetInfo.Size">
            <summary>
            Gets or sets the size of the font in world units (inches).  A point is 1/72nd of an inch.
            </summary>
            <value>Size of the font.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontStyleSetInfo.Style">
            <summary>
            Gets or sets the font's bold, italic, strikeout, and underline styles.
            </summary>
            <value>FontStyle for this info.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontStyleSetInfo.Units">
            <summary>
            Gets the unit of measure for this font (always GraphicsUnit.World)
            </summary>
            <value>Font's units of measure.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FontStyleSetInfo.Clone">
            <summary>
            Method to create a new instance of this object with the same instance data.
            </summary>
            <returns>New instance of this FontStyleSetInfo.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FontStyleSetInfo.GetHashCode">
            <summary>
            Serves as a hash function for a BrushStyleSetInfo, 
            suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FontStyleSetInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this one.
            Only equal if all of their properties are equal.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the specified object is equal to this one; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FontStyleSetInfo.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the two specified objects are equal to each other
            </summary>
            <param name="obj">The first object to compare.</param>
            <param name="obj">The second object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.FontDescriptor">
            <summary>
            FontDescriptor class holds the FontStyleSetInfo for a class and an instance of the Font
            described by that info (if it's already been created).  The FontDescriptor is what gets
            cached for later use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontDescriptor.FontStyleSetInfo">
            <summary>
            Gets the font information for this descriptor.
            </summary>
            <value>A FontStyleSetInfo for this descriptor.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontDescriptor.Font">
            <summary>
            Gets a cloned instance of the Font defined by this descriptor.  If the font has not
            been previously created, it creates it first.
            </summary>
            <value>A Font defined by this descriptor.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontDescriptor.FontInternal">
            <summary>
            Gets the internal font.  If the internal font does
            not exist, it is created.
            </summary>
            <value>Returns the internal font.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontDescriptor.FontSize">
            <summary>
            Gets the em height of the Font object measured in the units of the Font object.
            This is the value used to create the font.
            Use FontHeight instead if you want to get the height of a line of text 
            using this font (i.e., the line spacing).
            </summary>
            <value>Returns the em height of the Font object measured in the units of the Font object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontDescriptor.FontHeight">
            <summary>
            Gets the line spacing of this font (i.e., the height
            of a line of text) in world units.  Line spacing is the ascent + 
            the descent + some recommended extra.
            The ascent is the height of the character above the baseline, and 
            the descent is the height of the character below the baseline.
            The extra is below the descent.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FontDescriptor.FontFromFontStyleSetInfo">
            <summary>
            Creates a new instance of the Font from its FontStyleSetInfo description.
            </summary>
            <returns>A new Font instance created from its FontStyleSetInfo.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FontDescriptor.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.FontStyleSetInfo)">
            <summary>
            Constructor that creates a descriptor based on a specified FontStyleSetInfo.
            </summary>
            <param name="fontStyleSetInfo">FontStyleSetInfo to create this descriptor for.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.FontSettingsFlags">
            <summary>
            Flags to specify which Font settings have been overridden or made immutable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings">
            <summary>
            FontSettings allows certain properties on a FontStyleSetInfo to be marked as overridden
            or immutable.  If certain Font settings are marked as immutable, then they are not allowed
            to be changed again.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.FontSettingsFlags">
            <summary>
            Gets the overridden properties in the FontStyleSetInfo.
            </summary>
            <value>A FontSettingsFlags for the overridden FontStyleSetInfo properties.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.FontStyleSetInfo">
            <summary>
            Gets or sets the FontStyleSetInfo associated with these settings.
            </summary>
            <value>A FontStyleSetInfo associated with this FontSettings object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.ImmutableFlags">
            <summary>
            Gets or sets the ImmuatableFlags.  This specifies which properties in the FontStyleSetInfo
            can be changed and which ones are not allowed to change.
            </summary>
            <value>A FontSettingsFlags for the immutable FontStyleSetInfo properties.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.Name">
            <summary>
            Gets or sets the name of the FontFamily object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>Name of the FontFamily to use.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.ImmutableName">
            <summary>
            Makes the Name setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the Name setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.Size">
            <summary>
            Gets or sets the size of the font in world units (inches).  A point is 1/72nd of an inch.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>Size of the font.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.ImmutableSize">
            <summary>
            Makes the Size setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the Size setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.Style">
            <summary>
            Gets or sets the font's bold, italic, strikeout, and underline styles.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>FontStyle for this info.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.ImmutableStyle">
            <summary>
            Makes the Style setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the Style setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.Regular">
            <summary>
            Gets or sets the font's regular style.
            Only allows the change if the property is not immutable and the value is true.
            To set a Font to be non-Regular, one must use any of the Bold, Italic, or Style
            properties.
            </summary>
            <value>Boolean setting for the Regular FontStyle.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.Bold">
            <summary>
            Gets or sets the font's bold style.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>Boolean setting for the Bold FontStyle.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.Italic">
            <summary>
            Gets or sets the font's italic style.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>Boolean setting for the Italic FontStyle.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.Underline">
            <summary>
            Gets or sets the font's underline style.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>Boolean setting for the Underline FontStyle.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.Strikeout">
            <summary>
            Gets or sets the font's strikeout style.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>Boolean setting for the Strikeout FontStyle.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.Override(Microsoft.VisualStudio.Modeling.Diagrams.FontSettingsFlags)">
            <summary>
            Overrides the settings for this Font based on the specified flags.
            </summary>
            <param name="fontSettings">Flag for which Font settings are overridden.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.IsOverridden(Microsoft.VisualStudio.Modeling.Diagrams.FontSettingsFlags)">
            <summary>
            Tests whether certain PenSettings are overridden.
            </summary>
            <param name="fontSettings">Flags to test and see if they're overridden.</param>
            <returns>true the flags are overridden; false they are not overridden.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.FontSettingsFlags,Microsoft.VisualStudio.Modeling.Diagrams.FontSettingsFlags,Microsoft.VisualStudio.Modeling.Diagrams.FontStyleSetInfo)">
            <summary>
            Creates a FontSettings based on settings information.
            </summary>
            <param name="brushSettingsFlags">Override settings</param>
            <param name="brushImmutableFlags">Immutability settings</param>
            <param name="brushInfo">Current font information</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.FontSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NamedFontCollection">
            <summary>
            A collection of named pens used to cache the current pens used in the system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NamedFontCollection.Item(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Item property assures type safety
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo">
            <summary>
            Contains the StyleSet information about a pen.  These are all of the settings that be
            placed on a Pen like Color, Alignment, LineCap, PenType, etc.  The information is used to
            create a unique hash code for this class which is used in the HybridDictionary for lookup
            of a particular cached resourse.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.Clone">
            <summary>
            Method to create a new instance of this object with the same instance data.
            </summary>
            <returns>New instance of this PenStyleSetInfo.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.GetHashCode">
            <summary>
            Serves as a hash function for a PenStyleSetInfo, 
            suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this one.
            Only equal if all of their properties are equal.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the specified object is equal to this one; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the two specified objects are equal to each other
            </summary>
            <param name="obj">The first object to compare.</param>
            <param name="obj">The second object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.Alignment">
            <summary>
            Gets or sets the PenAlignment information.
            </summary>
            <value>A PenAlignment value for this object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.Brush">
            <summary>
            Gets or sets the Brush information for this pen.
            </summary>
            <value>A Brush used on this object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.Color">
            <summary>
            Gets or sets the Color information for this pen.
            </summary>
            <value>The Color used for this pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.CompoundArray">
            <summary>
            Gets or sets an array values that specify a compound pen. 
            A compound pen draws a compound line made up of parallel lines and spaces.
            </summary>
            <value>An array of real numbers that specifies the compound array. The elements in the array 
            must be in increasing order, not less than 0, and not greater than 1.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.CustomEndCap">
            <summary>
            Gets or sets a custom cap to use at the end of lines drawn with this Pen object.
            </summary>
            <value>A CustomLineCap object that represents the cap used at the end of lines 
            drawn with this Pen object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.CustomStartCap">
            <summary>
            Gets or sets a custom cap to use at the beginning of lines drawn with this Pen object.
            </summary>
            <value>A CustomLineCap object that represents the cap used at the beginning of lines
            drawn with this Pen object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.DashCap">
            <summary>
            Gets or sets the cap style used at the end of the dashes that make up dashed lines 
            drawn with this Pen object.
            </summary>
            <value>A DashCap enumeration that represents the cap style used at the beginning and end of the dashes 
            that make up dashed lines drawn with this Pen object. 
            Do not set this property to DashCap.Triangle if the Pen object has its 
            Pen.Alignment property set to PenAlignment.Inset.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.DashOffset">
            <summary>
            Gets or sets the distance from the start of a line to the beginning of a dash pattern.
            </summary>
            <value>The distance from the start of a line to the beginning of a dash pattern.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.DashPattern">
            <summary>
            Gets or sets an array of custom dashes and spaces.
            </summary>
            <value>An array of real numbers that specify the lengths of alternating 
            dashes and spaces in dashed lines.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.DashStyle">
            <summary>
            Gets or sets the style used for dashed lines drawn with this Pen object.
            </summary>
            <value>A DashStyle enumeration that represents the style used for dashed lines
            drawn with this Pen object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.EndCap">
            <summary>
            Gets or sets the cap style used at the end of lines drawn with this Pen object.
            </summary>
            <value>A LineCap enumeration that represents the cap style used at the end of lines 
            drawn with this Pen object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.MiterLimit">
            <summary>
            Gets or sets the limit of the thickness of the join on a mitered corner.
            </summary>
            <value>The limit of the thickness of the join on a mitered corner.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.LineJoin">
            <summary>
            Gets or sets the join style for the ends of two consecutive lines drawn with this Pen object.
            </summary>
            <value>A LineJoin enumeration that represents the join style for the ends of
            two consecutive lines drawn with this Pen object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.StartCap">
            <summary>
            Gets or sets the cap style used at the beginning of lines drawn with this Pen object.
            </summary>
            <value>A LineCap enumeration that represents the cap style used at 
            the beginning of lines drawn with this Pen object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.Transform">
            <summary>
            Gets or sets the geometric transformation for this Pen object.
            </summary>
            <value>A Matrix object that represents the geometric transformation for this Pen object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo.Width">
            <summary>
            Gets or sets the width of this Pen object.
            </summary>
            <value>The width of this Pen object.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PenDescriptor">
            <summary>
            PenDescriptor class holds the PenStyleSetInfo for a class and an instance of the Pen
            described by that info (if it's already been created).  The PenDescriptor is what gets
            cached for later use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenDescriptor.PenStyleSetInfo">
            <summary>
            Gets the Pen information for this descriptor.
            </summary>
            <value>A PenStyleSetInfo for this descriptor.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenDescriptor.Pen">
            <summary>
            Gets a cloned instance of the Pen defined by this descriptor.  If the pen has not
            been previously created, it creates it first.
            This is a singleton.  Do not dispose - this will crash!
            Use immediately.
            </summary>
            <value>A Pen defined by this descriptor.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PenDescriptor.PenFromPenStyleSetInfo">
            <summary>
            Creates a new instance of the Pen from its PenStyleSetInfo description.
            </summary>
            <returns>A new Pen instance created from its PenStyleSetInfo.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PenDescriptor.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo)">
            <summary>
            Constructor that creates a descriptor based on a specified PenStyleSetInfo.
            </summary>
            <param name="penStyleSetInfo">PenStyleSetInfo to create this descriptor for.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PenSettingsFlags">
            <summary>
            Flags to specify which Pen settings have been overridden or made immutable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings">
            <summary>
            PenSettings allows certain properties on a PenStyleSetInfo to be marked as overridden
            or immutable.  If certain Pen settings are marked as immutable, then they are not allowed
            to be changed again.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.PenSettingsFlags">
            <summary>
            Gets the overridden properties in the PenStyleSetInfo.
            </summary>
            <value>A PenSettingsFlags for the overridden PenStyleSetInfo properties.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableFlags">
            <summary>
            Gets or sets the ImmuatableFlags.  This specifies which properties in the PenStyleSetInfo
            can be changed and which ones are not allowed to change.
            </summary>
            <value>A PenSettingsFlags for the immutable PenStyleSetInfo properties.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.PenStyleSetInfo">
            <summary>
            Gets or sets the PenStyleSetInfo associated with these settings.
            </summary>
            <value>A PenStyleSetInfo associated with this PenSettings object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.Alignment">
            <summary>
            Gets or sets the PenAlignment information. 
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A PenAlignment value for the PenStyleSetInfo object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableAlignment">
            <summary>
            Makes the Alignment setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the Alignment setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.Brush">
            <summary>
            Gets or sets the Brush information for the PenStyleSetInfo.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A Brush used for the PenStyleSetInfo object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableBrush">
            <summary>
            Makes the Brush setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the Brush setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.Color">
            <summary>
            Gets or sets the Color information for this PenStyleSetInfo.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>The Color used for this pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableColor">
            <summary>
            Makes the Color setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the Color setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.CompoundArray">
            <summary>
            Gets or sets an array values that specify a compound pen for the PenStyleSetInfo. 
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>An array of real numbers that specifies the compound array. The elements in the array 
            must be in increasing order, not less than 0, and not greater than 1.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableCompoundArray">
            <summary>
            Makes the CompoundArray setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the CompoundArray setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.CustomEndCap">
            <summary>
            Gets or sets a custom cap to use at the end of lines drawn with this Pen object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A CustomLineCap object that represents the cap used at the end of lines 
            drawn with this Pen object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableCustomEndCap">
            <summary>
            Makes the CustomEndCap setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the CustomEndCap setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.CustomStartCap">
            <summary>
            Gets or sets a custom cap to use at the beginning of lines drawn with this PenStyleSetInfo object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A CustomLineCap object that represents the cap used at the beginning of lines
            drawn with this PenStyleSetInfo object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableCustomStartCap">
            <summary>
            Makes the CustomStartCap setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the CustomStartCap setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.DashCap">
            <summary>
            Gets or sets the cap style used at the end of the dashes that make up dashed lines 
            drawn with this PenStyleSetInfo object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A DashCap enumeration that represents the cap style used at the beginning and end of the dashes 
            that make up dashed lines drawn with this PenStyleSetInfo object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableDashCap">
            <summary>
            Makes the DashCap setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the DashCap setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.DashOffset">
            <summary>
            Gets or sets the distance from the start of a line to the beginning of a dash pattern.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>The distance from the start of a line to the beginning of a dash pattern.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableDashOffset">
            <summary>
            Makes the DashOffset setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the DashOffset setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.DashPattern">
            <summary>
            Gets or sets an array of custom dashes and spaces.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>An array of real numbers that specify the lengths of alternating 
            dashes and spaces in dashed lines.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableDashPattern">
            <summary>
            Makes the DashPattern setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the DashPattern setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.DashStyle">
            <summary>
            Gets or sets the style used for dashed lines drawn with this Pen object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A DashStyle enumeration that represents the style used for dashed lines
            drawn with this Pen object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableDashStyle">
            <summary>
            Makes the DashStyle setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the DashStyle setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.EndCap">
            <summary>
            Gets or sets the cap style used at the end of lines drawn with this PenStyleSetInfo object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A LineCap enumeration that represents the cap style used at the end of lines 
            drawn with this PenStyleSetInfo object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableEndCap">
            <summary>
            Makes the EndCap setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the EndCap setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.MiterLimit">
            <summary>
            Gets or sets the limit of the thickness of the join on a mitered corner.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>The limit of the thickness of the join on a mitered corner.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableMiterLimit">
            <summary>
            Makes the MiterLimit setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the MiterLimit setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.LineJoin">
            <summary>
            Gets or sets the join style for the ends of two consecutive lines drawn with this PenStyleSetInfo object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A LineJoin enumeration that represents the join style for the ends of
            two consecutive lines drawn with this PenStyleSetInfo object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableLineJoin">
            <summary>
            Makes the LineJoin setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the LineJoin setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.StartCap">
            <summary>
            Gets or sets the cap style used at the beginning of lines drawn with this PenStyleSetInfo object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A LineCap enumeration that represents the cap style used at 
            the beginning of lines drawn with this PenStyleSetInfo object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableStartCap">
            <summary>
            Makes the StartCap setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the StartCap setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.Transform">
            <summary>
            Gets or sets the geometric transformation for this PenStyleSetInfo object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>A Matrix object that represents the geometric transformation for this PenStyleSetInfo object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableTransform">
            <summary>
            Makes the Transform setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the Transform setting is immutable; otherwise it is not.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.Width">
            <summary>
            Gets or sets the width of this PenStyleSetInfo object.
            Only allows the change if the property is not immutable and sets the override flags appropriately.
            </summary>
            <value>The width of this PenStyleSetInfo object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.ImmutableWidth">
            <summary>
            Makes the Width setting immutable, unchangeable by others.
            Once it's make immutable, no one else can change it.
            </summary>
            <value>true means the Width setting is immutable; otherwise it is not.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.Override(Microsoft.VisualStudio.Modeling.Diagrams.PenSettingsFlags)">
            <summary>
            Overrides the settings for this Pen based on the specified flags.
            </summary>
            <param name="flags">Flag for which Pen settings are overridden.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.IsOverridden(Microsoft.VisualStudio.Modeling.Diagrams.PenSettingsFlags)">
            <summary>
            Tests whether certain PenSettings are overridden.
            </summary>
            <param name="penSettings">Flags to test and see if they're overridden.</param>
            <returns>true the flags are overridden; false they are not overridden.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.PenSettingsFlags,Microsoft.VisualStudio.Modeling.Diagrams.PenSettingsFlags,Microsoft.VisualStudio.Modeling.Diagrams.PenStyleSetInfo)">
            <summary>
            Creates a PenSettings based on settings information.
            </summary>
            <param name="penSettings">Override settings</param>
            <param name="penImmutability">Immutability settings</param>
            <param name="penInfo">Current pen information</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.PenSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.PenSettingsStruct">
            <summary>
            A named pen in the style set.  
            A named pen is composed of:
            (1) a base named pen, given by a pen ID (which can be different from its own ID);
            (2) override settings;
            (3) resolved settings;
            (4) resolved pen (a reference to the actual cached resource);
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.NamedPenCollection">
            <summary>
            A collection of named pens used to cache the current pens used in the system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.NamedPenCollection.Item(Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId)">
            <summary>
            Item property assures type safety
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId">
            <summary>
            Class for uniquely defining a StyleSet resource.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId.#ctor(System.String,System.String)">
            <summary>
            Constructor which creates an instance of StyleSetResourceId given a
            companyName and resourceName.
            </summary>
            <param name="companyName">name of company that created the resource.</param>
            <param name="resourceName">unique name for resource.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId.#ctor">
            <summary>
            Default constructor which doesn't initaialize companyName or resourceName.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId.GetHashCode">
            <summary>
            Serves as a hash function for a StyleSetResourceId, 
            suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StyleSetResourceId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this one.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the specified object is equal to this one; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens">
            <summary>
            Each property of the DiagramPens class is a StyleSetResourceId object 
            that uniquely identifies a pen resource used by the DiagramClientView paint methods.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.DiagramOutline">
            <summary>
            Gets the resource Id for the diagram's outline pen.  Used to draw the border around the diagram.
            </summary>
            <value>A StyleSetResourceId that represents the diagram's outline pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.ShapeOutline">
            <summary>
            Gets the resource Id for the shape's outline pen.  Used to draw the border around a shape.
            </summary>
            <value>A StyleSetResourceId that represents a shape's outline pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.ShapeHighlightOutline">
            <summary>
            Gets the resource Id for the shape's highlight outline pen.  
            Used to draw the selection border around a shape.
            </summary>
            <value>A StyleSetResourceId that represents a shape's highlight outline pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.ShapeTitleOutline">
            <summary>
            Gets the resource Id for the shape title's outline pen.  
            Used to draw the border around a shape's title field.
            </summary>
            <value>A StyleSetResourceId that represents a shape title's outline pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.ShapeSubtitleOutline">
            <summary>
            Gets the resource Id for the shape subtitle's outline pen.  
            Used to draw the border around a shape's subtitle field.
            </summary>
            <value>A StyleSetResourceId that represents a shape subtitle's outline pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.ConnectionLine">
            <summary>
            Gets the resource Id for the connection line's pen.  
            Used to draw the connection lines in a diagram.
            </summary>
            <value>A StyleSetResourceId that represents the connection line's pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.ConnectionLineHighlight">
            <summary>
            Gets the resource Id for the connection line's highlight pen.  
            Used to draw the connection lines selection border.
            </summary>
            <value>A StyleSetResourceId that represents the connection line's highlight pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.ConnectionLineGhost">
            <summary>
            Gets the resource Id for the connection line's ghost pen.  
            Used to draw possible connection lines during a connect action.
            </summary>
            <value>A StyleSetResourceId that represents the connection line's ghost pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.ConnectionLineDecorator">
            <summary>
            Gets the resource Id for the connection line decorator's pen.  
            Used to draw the outline of decorators.
            </summary>
            <value>A StyleSetResourceId that represents the connection line decorator's pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.ConnectionManualRouteOutline">
            <summary>
            Gets the resource Id for the connection line's manual route outline.  
            Used to draw feedback from the ManualRouteAction.
            </summary>
            <value>A StyleSetResourceId that represents the connection line decorator's pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.SelectionBackground">
            <summary>
            Gets the resource Id for the selection background's pen.  
            </summary>
            <value>A StyleSetResourceId that represents the selection background's pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.SelectionPrimaryOutline">
            <summary>
            Gets the resource Id for the selection's primary outline pen.  
            </summary>
            <value>A StyleSetResourceId that represents the selection's primary outline pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.SelectionNonPrimaryOutline">
            <summary>
            Gets the resource Id for the selection's secondary outline pen.  
            </summary>
            <value>A StyleSetResourceId that represents the selection's secondary outline pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.GridLines">
            <summary>
            Gets the resource Id for the diagram's grid lines pen.  
            Used to draw the grid points on the diagram.
            </summary>
            <value>A StyleSetResourceId that represents the diagram's grid lines pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.Lasso">
            <summary>
            Gets the resource Id for the lasso pen.  
            Used to draw the group selection rectangle (or lasso).
            </summary>
            <value>A StyleSetResourceId that represents the lasso pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.ZoomLasso">
            <summary>
            Gets the resource Id for the lasso pen.  
            Used to draw the group rectangle or lasso when doing a zoom mouse action.
            </summary>
            <value>A StyleSetResourceId that represents the lasso pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.ShapeResizeOutline">
            <summary>
            Gets the resource Id for the shape's resize outline pen.  
            Used to draw the outline of a shape for feedback as its being resized.
            </summary>
            <value>A StyleSetResourceId that represents the shape's resize outline pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.GhostShapeOutline">
            <summary>
            Gets the resource Id for the shape's ghost outline pen.  
            Used to draw the outline of a shape for feedback as it is being dragged/dropped.
            </summary>
            <value>A StyleSetResourceId that represents the shape's ghost outline pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.PrimaryGrabHandles">
            <summary>
            Gets the resource Id for the primary grab handles pen.  
            Used to draw the outline of the grab handles at the corner of shapes.
            </summary>
            <value>A StyleSetResourceId that represents the selection grab handles pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.SecondaryGrabHandles">
            <summary>
            Gets the resource Id for the secondary grab handles pen.  
            Used to draw the outline of the grab handles at the corner of shapes.
            </summary>
            <value>A StyleSetResourceId that represents the selection grab handles pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.PrimaryLineGrabHandles">
            <summary>
            Gets the resource Id for the primary grab handles pen for lines.  
            Used to draw the outline of the grab handles for manually routable line segments and anchor points.
            </summary>
            <value>A StyleSetResourceId that represents the selection grab handles pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.SecondaryLineGrabHandles">
            <summary>
            Gets the resource Id for the secondary grab handles pen for lines.  
            Used to draw the outline of the grab handles for manually routable line segments and anchor points.
            </summary>
            <value>A StyleSetResourceId that represents the selection grab handles pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.FocusIndicatorBackground">
            <summary>
            Gets the resource Id for the focus indicator's background pen.  
            </summary>
            <value>A StyleSetResourceId that represents the focus indicator's background pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.FocusIndicator">
            <summary>
            Gets the resource Id for the focus indicator pen.  
            </summary>
            <value>A StyleSetResourceId that represents the focus indicator pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.EmphasisOutline">
            <summary>
            Gets the resource Id for the emphasis outline pen.  
            </summary>
            <value>A StyleSetResourceId that represents the emphasis outline pen.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramPens.SwimlaneSeparator">
            <summary>
            Gets the resource Id for the swimlane separator pen.  
            </summary>
            <value>A StyleSetResourceId that represents the swimlane separator pen.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes">
            <summary>
            Each property of the DiagramBrushes class is a StyleSetResourceId object 
            that uniquely identifies a brush resource used by the DiagramClientView paint methods.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.DiagramTitleBackground">
            <summary>
            Gets the resource Id for the diagram's title background brush.  
            </summary>
            <value>A StyleSetResourceId that represents the diagram's title background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.DiagramSubtitleBackground">
            <summary>
            Gets the resource Id for the diagram's subtitle background brush.  
            </summary>
            <value>A StyleSetResourceId that represents the diagram's subtitle background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.DiagramBackground">
            <summary>
            Gets the resource Id for the diagram's background brush.  
            Used to paint the diagram's background.
            </summary>
            <value>A StyleSetResourceId that represents the diagram's background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeTitleBackground">
            <summary>
            Gets the resource Id for a shape's title background brush. 
            Used to paint the background for the shape's title field. 
            </summary>
            <value>A StyleSetResourceId that represents a shape's title background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeTitleBackgroundSelected">
            <summary>
            Gets the resource Id for a shape's title background brush. 
            Used to paint the background for the shape's title field. 
            </summary>
            <value>A StyleSetResourceId that represents a shape's title background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeTitleBackgroundSelectedInactive">
            <summary>
            Gets the resource Id for a shape's title background brush. 
            Used to paint the background for the shape's title field. 
            </summary>
            <value>A StyleSetResourceId that represents a shape's title background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeSubtitleBackground">
            <summary>
            Gets the resource Id for a shape's subtitle background brush. 
            Used to paint the background for the shape's subtitle field. 
            </summary>
            <value>A StyleSetResourceId that represents a shape's subtitle background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeBackground">
            <summary>
            Gets the resource Id for a shape's background brush. 
            Used to paint the background for a shape. 
            </summary>
            <value>A StyleSetResourceId that represents a shape's background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.Shadow">
            <summary>
            Gets the resource Id for a shape's shadow brush. 
            Used to paint the shadow of a shape.
            </summary>
            <value>A StyleSetResourceId that represents a shape's shadow brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.PrimaryGrabHandles">
            <summary>
            Gets the resource Id for the selection's primary grab handles brush. 
            Used to paint the background for the round grab handles on sizeable shapes. 
            </summary>
            <value>A StyleSetResourceId that represents the selection's primary grab handles brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.SecondaryGrabHandles">
            <summary>
            Gets the resource Id for the selection's secondary grab handles brush. 
            </summary>
            <value>A StyleSetResourceId that represents the selection's secondary grab handles brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.PrimaryLineGrabHandles">
            <summary>
            Gets the resource Id for the selection's primary grab handles brush for lines. 
            Used to paint the background for the grab handles on manually routable lines. 
            </summary>
            <value>A StyleSetResourceId that represents the selection's primary grab handles brush for lines.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.SecondaryLineGrabHandles">
            <summary>
            Gets the resource Id for the selection's secondary grab handles brush for lines. 
            Used to paint the background for the grab handles on manually routable lines. 
            </summary>
            <value>A StyleSetResourceId that represents the selection's secondary grab handles brush for lines.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.CommentTitleBackground">
            <summary>
            Gets the resource Id for the comment's title background brush. 
            Used to paint the background for the comment's title field. 
            </summary>
            <value>A StyleSetResourceId that represents the comment's title background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.CommentBackground">
            <summary>
            Gets the resource Id for the comment's background brush. 
            Used to paint the background for the comment shape. 
            </summary>
            <value>A StyleSetResourceId that represents the comment's background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.DiagramTitleText">
            <summary>
            Gets the resource Id for the diagram's title text brush. 
            </summary>
            <value>A StyleSetResourceId that represents the diagram's title text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.DiagramSubtitleText">
            <summary>
            Gets the resource Id for the diagram's subtitle text brush. 
            </summary>
            <value>A StyleSetResourceId that represents the diagram's subtitle text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.DiagramText">
            <summary>
            Gets the resource Id for the diagram's text brush. 
            </summary>
            <value>A StyleSetResourceId that represents the diagram's text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeTitleText">
            <summary>
            Gets the resource Id for a shape's title text brush. 
            Used to paint the title text on a shape.
            </summary>
            <value>A StyleSetResourceId that represents a shape's title text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeTitleTextSelected">
            <summary>
            Gets the resource Id for a shape's title text brush. 
            Used to paint the title text on a shape.
            </summary>
            <value>A StyleSetResourceId that represents a shape's title text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeTitleTextSelectedInactive">
            <summary>
            Gets the resource Id for a shape's title text brush. 
            Used to paint the title text on a shape.
            </summary>
            <value>A StyleSetResourceId that represents a shape's title text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeSubtitleText">
            <summary>
            Gets the resource Id for a shape's subtitle text brush. 
            Used to paint the subtitle text on a shape.
            </summary>
            <value>A StyleSetResourceId that represents a shape's subtitle text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeText">
            <summary>
            Gets the resource Id for a shape's text brush. 
            Used to paint text on a shape.
            </summary>
            <value>A StyleSetResourceId that represents a shape's text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ConnectionLineText">
            <summary>
            Gets the resource Id for a connection line's text brush. 
            Used to paint label text on a connection line.
            </summary>
            <value>A StyleSetResourceId that represents a connection line's text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.CommentTitleText">
            <summary>
            Gets the resource Id for a comment's title text brush. 
            Used to paint title text on a comment.
            </summary>
            <value>A StyleSetResourceId that represents a comment's title text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.CommentText">
            <summary>
            Gets the resource Id for a comment's text brush. 
            Used to paint text on a comment.
            </summary>
            <value>A StyleSetResourceId that represents a comment's text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.Selection">
            <summary>
            Gets the resource Id for the selection brush. 
            Used to paint a shape selection border.
            </summary>
            <value>A StyleSetResourceId that represents the selection brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.NonResizablePrimarySelection">
            <summary>
            Gets the resource Id for the primary selection brush of a non-resizable shape.
            </summary>
            <value>A StyleSetResourceId that represents the primary selection brush of a non-resizable shape.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.NonResizableSecondarySelection">
            <summary>
            Gets the resource Id for the secondary selection brush of a non-resizable shape.
            </summary>
            <value>A StyleSetResourceId that represents the secondary selection brush of a non-resizable shape.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ConnectionLineDecorator">
            <summary>
            Gets the resource Id for a connection line's decorator brush. 
            Used to fill in connection line decorators.
            </summary>
            <value>A StyleSetResourceId that represents a connection line's decorator brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeTextSelected">
            <summary>
            Gets the resource Id for the selected shape's text brush. 
            Used to paint text for selected shapes.
            </summary>
            <value>A StyleSetResourceId that represents the selected shape's text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeTextSelectedInactive">
            <summary>
            Gets the resource Id for the selected shape's inactive text brush. 
            Used to paint text for selected shapes that are inactive.
            </summary>
            <value>A StyleSetResourceId that represents the selected shape's inactive text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeBackgroundSelected">
            <summary>
            Gets the resource Id for the selected shape's background brush. 
            Used to paint the background for selected shapes.
            </summary>
            <value>A StyleSetResourceId that represents the selected shape's background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeBackgroundSelectedInactive">
            <summary>
            Gets the resource Id for the selected shape's inactive background brush. 
            Used to paint the background for selected shapes when they're inactive.
            </summary>
            <value>A StyleSetResourceId that represents the selected shape's inactive background brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeTextDisabled">
            <summary>
            Gets the resource Id for the shape's disabled text.
            </summary>
            <value>A StyleSetResourceId that represents the shape's disabled text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeTextSelectedDisabled">
            <summary>
            Gets the resource Id for the selected shape's disabled text.
            </summary>
            <value>A StyleSetResourceId that represents the selected shape's disabled text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.ShapeTextSelectedInactiveDisabled">
            <summary>
            Gets the resource Id for the inactive selected shape's disabled text.
            </summary>
            <value>A StyleSetResourceId that represents the inactive selected shape's disabled text brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.Transparent">
            <summary>
            Gets the resource Id for the transparent brush
            Used to make a shape or shapefield background transparent
            </summary>
            <value>A StyleSetResourceId that represents the selected transparent brush.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramBrushes.SwimlaneHeaderBackground">
            <summary>
            Identifies the brush for filling in the swimlane header's background. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFonts">
            <summary>
            Each property of the DiagramFonts class is a StyleSetResourceId object 
            that uniquely identifies a font resource used by the DiagramClientView paint methods.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFonts.ShapeTitle">
            <summary>
            Gets the resource Id for a shape's title font. 
            Font used for shape's title.
            </summary>
            <value>A StyleSetResourceId that represents a shape's title font.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFonts.ShapeSubtitle">
            <summary>
            Gets the resource Id for a shape's subtitle font. 
            Font used for shape's subtitle.
            </summary>
            <value>A StyleSetResourceId that represents a shape's subtitle font.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFonts.ShapeText">
            <summary>
            Gets the resource Id for a shape's font. 
            Font used to display shape text.
            </summary>
            <value>A StyleSetResourceId that represents a shape's font.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFonts.ConnectionLine">
            <summary>
            Gets the resource Id for the connection line's font. 
            Font used to display connection line label text.
            </summary>
            <value>A StyleSetResourceId that represents the connection line's font.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.DiagramFonts.CommentText">
            <summary>
            Gets the resource Id for the comment's text font. 
            Font used to display comment's text.
            </summary>
            <value>A StyleSetResourceId that represents the comment's text font.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject">
            <summary>
            Summary description for SubfieldAccessibleObject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeField,Microsoft.VisualStudio.Modeling.Diagrams.ShapeSubField,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Initializes a new instance of the SubfieldAccessibleObject class.
            </summary>
            <param name="shapeElement">The parent ShapeElement of the subfield.</param>
            <param name="shapeField">The parent ShapeField of the subfield.</param>
            <param name="shapeSubField">The subfield that this object represents.</param>
            <param name="diagramClientView">The view this object is associated with.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.Name">
            <summary>
            Gets or sets the object name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.Description">
            <summary>
            Gets a string that describes the visual appearance 
            of the specified object. Not all objects have a description.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.Value">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.Role">
            <summary>
            Gets the role of this accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.Bounds">
            <summary>
            Gets the location and size of the accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.Parent">
            <summary>
            Gets the parent of an accessible object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the specified index.
            </summary>
            <param name="index">The zero-based index of the accessible child.</param>
            <returns>An AccessibleObject that represents the accessible child corresponding to the specified index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.GetChildCount">
            <summary>
            Retrieves the number of children belonging to an accessible object.
            </summary>
            <returns>The number of children belonging to an accessible object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
            <summary>
            Navigates to another accessible object.
            </summary>
            <param name="direction">One of the AccessibleNavigation values.</param>
            <returns>An AccessibleObject that represents one of the AccessibleNavigation values.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
            <summary>
            Modifies the selection or moves the keyboard focus of the accessible object.
            </summary>
            <param name="flags">One of the AccessibleSelection values.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.State">
            <summary>
            Gets the state of this accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.Help">
            <summary>
            Gets a description of what the object does or how the object is used.
            </summary>
            <value>A description of what the object does or how the object is used.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.GetHelpTopic(System.String@)">
            <summary>
            Gets an identifier for a Help topic identifier and the path 
            to the Help file associated with this accessible object.
            </summary>
            <param name="fileName">On return, this property contains the path to the Help file associated with this accessible object.</param>
            <returns>An identifier for a Help topic, or -1 if there is no Help topic.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.KeyboardShortcut">
            <summary>
            Gets the shortcut key or access key for the accessible object.
            </summary>
            <value>The shortcut key or access key for the accessible object.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.DefaultAction">
            <summary>
            Gets a string that describes the default action of the object. Not all objects have a default action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SubfieldAccessibleObject.DoDefaultAction">
            <summary>
            Performs the default action associated with this accessible object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SwimLaneFixUpContext">
            <summary>
            Provides context for the positioning of a newly inserted swimlane
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimLaneFixUpContext.GetContext(Microsoft.VisualStudio.Modeling.Transaction,Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape@,System.Boolean@)">
            <summary>
            Find out whether there is a context and what its values are
            </summary>
            <param name="transaction">Transaction to check for context</param>
            <param name="relativeSwimLane">The swimlane that the next swimlane will be inserted relative to</param>
            <param name="insertAfter">Whether to insert the next swimlane after the relative one</param>
            <returns>true if there is a swimlane fixup context, else false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimLaneFixUpContext.SetContext(Microsoft.VisualStudio.Modeling.Transaction,Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape,System.Boolean)">
            <summary>
            Set the context
            </summary>
            <param name="transaction">Transaction to set the context in</param>
            <param name="relativeSwimLane">The swimlane that the next swimlane will be inserted relative to</param>
            <param name="insertAfter">Whether to insert the next swimlane after the relative one</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneHelper.AnchorAllSwimLanes(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            Once all of the compartments are in place, this method anchors them
            all together, so that they line up correct one after the other, and 
            fill the entire width of the shape.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneHelper.AddSwimlane(Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape,Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneShape,Microsoft.VisualStudio.Modeling.Diagrams.Diagram,System.Boolean)">
            <summary>
            Adds a swimlane to the diagram at a particular position.
            </summary>
            <param name="currentLane">Swimlane to position the new lane by.</param>
            <param name="addAfter">if true add before the specified lane; otherwise add after it.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneAlignment">
            <summary>
            Enum that specifies how swimlanes can be aligned on the diagram:
            either horizontally or vertically.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.SwimlaneDecoratorPosition">
            <summary>
            Swimlane decorators are only allows in 3 positions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.TextField">
            <summary>
            A ShapeField which can display text in a ShapeElement.
            </summary>
            <remarks>
            If you want to display items such as text or images within a ShapeElement, instantiate 
            ShapeField-derived classes such as TextField or ImageField.
            </remarks>
            <remarks>
            ShapeFields typically describe these displayable items rather than store instance 
            information about them. For example, the value property can be described using 
            an IMS property and the bounds property can be described by anchoring styles.  
            By doing so, ShapeFields can be static members of a ShapeElement-derived class and as a 
            result are very lightweight.
            </remarks>
            <remarks>
            To create ShapeFields for a particular ShapeElement type, override the method 
            InitializeShapeFields in your ShapeElement-derived class.
            </remarks>
            <remarks>
            ShapeFields can be associated with an IMS property of the parent ShapeElement.
            As the IMS property value changes, the associated ShapeFields automatically 
            update with it.
            </remarks>
            <remarks>
            To connect a ShapeField up with an IMS property, call the ShapeField method
            AssociateValueWith after creating the ShapeField.
            </remarks>
            <remarks>
            ShapeFields can be in-place editable as well.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TextField class.
            </summary>
            <param name="fieldName">Unique identifier for this ShapeField.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DefaultText">
            <summary>
            Gets or sets the default text to draw.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DefaultIsHorizontal">
            <summary>
            Gets or sets the default horizontal state for the text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DoPaint(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Draws the text field.
            </summary>
            <param name="e">A DiagramPaintEventArgs that contains the event data.</param>
            <param name="parentShape">The parent shape of this field.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DefaultFontId">
            <summary>
            Gets or sets the default font id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DefaultTextBrushId">
            <summary>
            Gets or sets the default brush id for the text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DefaultSelectedTextBrushId">
            <summary>
            Gets or sets the default brush id for the selected text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DefaultInactiveSelectedTextBrushId">
            <summary>
            Gets or sets the default brush id for the inactive selected text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DefaultStringFormat">
            <summary>
            Gets or sets the default string format for text drawing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetFontId(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the id of the font to draw with for the specified ShapeElement instance.
            </summary>
            <param name="parentShape">The ShapeElement on which to draw.</param>
            <returns>The id of the font to draw with for the specified ShapeElement instance.</returns>
            <remarks>
            By default, this method returns the default font id of this ShapeField.  
            
            To dynamically change the font for this ShapeField, override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetFont(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the font to draw with for the specified ShapeElement instance.
            </summary>
            <param name="parentShape">The ShapeElement on which to draw.</param>
            <returns>The font to draw with for the specified ShapeElement instance.</returns>
            <remarks>
            By default, this method returns the default font of this ShapeField.
            
            To dynamically change the pen for this ShapeField, consider overriding
            GetFontId first.  If that method is inadequate, override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetFontHeight(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the line spacing of this font (i.e., the height
            of a line of text) in world units.  Line spacing is the ascent + 
            the descent + some recommended extra.
            The ascent is the height of the character above the baseline, and 
            the descent is the height of the character below the baseline.
            The extra is below the descent.
            </summary>
            <param name="parentShape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetTextBrushId(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the id of the brush to draw the text with for the specified ShapeElement instance.
            </summary>
            <param name="parentShape">The ShapeElement on which to draw.</param>
            <returns>The id of the brush to draw the text with for the specified ShapeElement instance.</returns>
            <remarks>
            By default, this method returns the default text brush id.  
            
            To dynamically change the text brush for this ShapeField, override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetTextBrush(Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the brush to draw the text with for the specified ShapeElement instance.
            </summary>
            <param name="parentShape">The ShapeElement on which to draw.</param>
            <returns>The brush to draw the text with for the specified ShapeElement instance.</returns>
            <remarks>
            By default, this method returns the default text brush of this ShapeField.
            
            To dynamically change the text brush for this ShapeField, consider overriding
            GetTextBrushId first.  If that method is inadequate, override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetStringFormat(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the string format to draw the text with for the specified ShapeElement instance.
            </summary>
            <param name="parentShape">The ShapeElement on which to draw.</param>
            <returns>The string format to draw the text with for the specified ShapeElement instance.</returns>
            <remarks>
            By default, this method returns the default string format of this ShapeField.
            
            To dynamically change the string format for this ShapeField, override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the value for this TextField.
            </summary>
            <param name="parentShape">The parent ShapeElement of this field.</param>
            <returns>The value for this TextField.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetDisplayText(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the text to be displayed by this field.
            </summary>
            <param name="parentShape">The parent ShapeElement of this field.</param>
            <returns>
            The text to be displayed by this field.
            </returns>
            <remarks>
            Override this method to customize your text prior to drawing.
            </remarks>
            <remarks>
            By default, this method returns GetValue().ToString().
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetMultipleLine(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns a value indicating if the text field is a multi-line
            text field.
            </summary>
            <param name="parentShape">The parent ShapeElement of this field.</param>
            <returns>true if this text field is a multi-line text field.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DefaultAutoSize">
            <summary>
            If true, the text field's minimum reported size will grow to accomodate
            the length of the diplay text.  Autosizable text fields will still respect
            the minimum size specified in the AnchoringBehavior.
            </summary>
            <remarks>
            This option is not supported for multi-line text fields.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetAutoSize(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            If true, the text field's minimum required size will grow to accomodate
            the length of the diplay text.  Autosizable text fields will still respect
            the minimum size specified in the AnchoringBehavior.
            </summary>
            <remarks>
            This option is not supported for multi-line text fields.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.AllowInPlaceEditorAutoSize(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            By default, allow in-place editor to size automatically if the field supports auto-size.
            </summary>
            <param name="parentShape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetMinimumInPlaceEditorSize(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Minimum in-place editor size is based on minimum width in characters and height in lines.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetMaximumInPlaceEditorSize(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            By default, we allow the in-place edit control to resize up to 75 characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetMinimumSize(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Gets the minimum width and heightfor this ShapeField in world units
            </summary>
            <param name="parentShape">The ShapeElement instance</param>
            <returns>The minimum size for this ShapeField in world units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.MeasureDisplayText(System.String,System.Drawing.Font,System.Drawing.StringFormat,Microsoft.VisualStudio.Modeling.Diagrams.SizeD)">
            <summary>
            Helper method to measure given text.
            </summary>
            <returns>Size of resulting text.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DefaultCommitOnEscape">
            <summary>
            Gets or sets a value indicating whether the Escape key commits the edit.
            If true, the Enter key will be used as a CRLF for in-place editing.
            </summary>
            <value>true if the Escape key commits the edit.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DefaultMultipleLine">
            <summary>
            Gets or sets a value indicating whether the text field
            is multiline.
            </summary>
            <value>true if the text field is multiline.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.OnKeyPress(Microsoft.VisualStudio.Modeling.Diagrams.DiagramKeyPressEventArgs)">
            <summary>
            Invokes the editor if the field is editable and any alpha-numeric character is typed.
            </summary>
            <param name="e">The DiagramKeyPressEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.OnDoubleClick(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPointEventArgs)">
            <summary>
            Invokes in-place editing by default.
            </summary>
            <param name="e">The DiagramPointEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.CanEditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether the value of this field can be edited.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="view">The view that will become the parent of the editor.</param>
            <returns>true if the value of this field can be edited.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Invokes the in-place editor.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="view">The view that will host the editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Invokes the in-place editor, setting the caret using the specified mouse position.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="view">The view that will host the editor.</param>
            <param name="mousePosition">The mouse position relative to the top-left of the diagram in world units.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.EditValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,System.String)">
            <summary>
            Invokes the in-place editor, replacing the text with the specified text.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="view">The view that will host the editor.</param>
            <param name="replacementText">The text that should replace the contents of the editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.ConfigureInPlaceEditor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Configures the editor with settings for this text field.
            </summary>
            <param name="parentShape">The ShapeElement instance that contains this field.</param>
            <param name="view"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.HasPendingEdit(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns a value indicating whether in-place editing is active, with a commit pending.
            </summary>
            <param name="parentShape">The ShapeElement that contains this field.</param>
            <param name="view">The view hosting the in-place editor.</param>
            <returns>true if in-place editing is active, with a commit pending.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.CommitPendingEdit(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Commits the pending edit.
            </summary>
            <param name="parentShape">The ShapeElement that contains this field.</param>
            <param name="view">The view hosting the in-place editor.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetActiveInPlaceEditor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Returns the control for the active in-place editor.  This method may return null, 
            in which case no in-place editor is active for this field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this field.</param>
            <param name="view">The view hosting the in-place editor.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.FillBackground">
            <summary>
            (Do not use - will be changed)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DrawBorder">
            <summary>
            (Do not use - will be changed)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.TextField.DisplayMember">
            <summary>
            Gets or sets the property name that the display text is associated with.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetAccessibleName(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the display text as the accessible name.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetAccessibleValue(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the accessible value.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetAccessibleDescription(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Returns the default accessible description for a text field.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The accessible description.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetAccessibleRole(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Retrieves the accessible role of this ShapeField.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <returns>The AccessibleRole of this ShapeField.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.TextField.GetAccessibleState(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView)">
            <summary>
            Retrieves the accessible state of this TextField.  By default, the TextField is invisible
            to accessibility clients if the field is not focusable and there is no text to display.
            </summary>
            <param name="parentShape">The ShapeElement that contains this ShapeField.</param>
            <param name="diagramClientView">The view the accessible object is for.</param>
            <returns>The AccessibleState of this ShapeField.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.DiagramRenderTextHelper">
            <summary>
            Internal helper class for rendering text. In normal cases, we will be using CDI+ API MeasureString/DrawString to render text. When text 
            is complex script, will have use GDI (i.e. TextRenderer.MeasureText/DrawText to render text).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.DiagramRenderTextHelper.fudgeWidth">
            <summary>
            Fudging width when rendering text which contains complex script
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramRenderTextHelper.Measure(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            Measure text size. If text contains complex script, we will be using TextRenderer.MeasureText API to calc the size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramRenderTextHelper.Measure(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            Measure text size. If text contains complex script, we will be using TextRenderer.MeasureText API to calc the size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramRenderTextHelper.Measure(System.Drawing.Graphics,System.String,System.Drawing.Font,Microsoft.VisualStudio.Modeling.Diagrams.SizeD,System.Drawing.StringFormat)">
            <summary>
            Measure text size. If text contains complex script, we will be using TextRenderer.MeasureText API to calc the size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramRenderTextHelper.Render(Microsoft.VisualStudio.Modeling.Diagrams.DiagramPaintEventArgs,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Measure text size. If text contains complex script, we will be using TextRenderer.DrawText API to calc the size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramRenderTextHelper.ScaleFont(System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            When printing, we will need to scale font accordingly
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramRenderTextHelper.ScriptIsComplex(System.String)">
            <summary>
            helper test method to determine whether the passed in text contain complex script of not. Return true if text has complex script.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.DiagramRenderTextHelper.GetTextFormatFlagsFromStringFormat(System.Drawing.StringFormat)">
            <summary>
            Gets a TextFormatFlags value from the specified StringFormat object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.ToolboxAction">
            <summary>
            ToolboxAction responds to double-click events on toolbox items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToolboxAction.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.Diagram)">
            <summary>
            
            </summary>
            <param name="diagram"></param>
            <param name="permitClick"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToolboxAction.GetCursor(System.Windows.Forms.Cursor,Microsoft.VisualStudio.Modeling.Diagrams.DiagramClientView,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Gets the cursor to display at the specified mouse position.
            </summary>
            <param name="currentCursor">The existing cursor.</param>
            <param name="diagramClientView">The DiagramClientView requesting the cursor.</param>
            <param name="mousePosition">The cursor position in world units relative to the top-left of the diagram.</param>
            <returns>The cursor to display at the specified mouse position.</returns>
            <remarks>
            This method is called by the DiagramClientView if this MouseAction is active or
            if it is the potential MouseAction.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToolboxAction.OnMouseMove(Microsoft.VisualStudio.Modeling.Diagrams.DiagramMouseEventArgs)">
            <summary>
            Called when a MouseMove event has been dispatched to this MouseAction.
            </summary>
            <param name="e">A DiagramMouseEventArgs that contains event data.</param>
            <remarks>
            This method selects the mouse cursor because DiagramMouseEventArgs contains
            important hit-test information. The selected cursor is set via GetCursor.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToolboxAction.OnMouseActionDeactivated(Microsoft.VisualStudio.Modeling.Diagrams.DiagramEventArgs)">
            <summary>
            Called when this MouseAction has been deactivated.
            </summary>
            <param name="e">A DiagramEventArgs that contains event data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.ToolboxAction.OnClicked(Microsoft.VisualStudio.Modeling.Diagrams.MouseActionEventArgs)">
            <summary>
            Called when this MouseAction has received a non-dragging 
            MouseDown + MouseUp combination or when it has received a 
            Complete event.
            </summary>
            <param name="e">A MouseActionEventArgs that contains event data.</param>
            <remarks>
            Set e.ActionRequest to ActionRequest.CompleteAction to complete the
            MouseAction and deactivate it.
            </remarks>
            <remarks>
            Set e.ActionRequest to ActionRequest.CancelAction to cancel the
            MouseAction and deactivate it.
            </remarks>
            <remarks>
            Set e.ActionRequest to ActionRequest.ContinueAction to keep the
            MouseAction active.  This will place the MouseAction in the
            hovering state.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject">
            <summary>
            Abstract base class for wrapping the VS Graph Layout Objects (VGNode, VGEdge, VGConnector) classes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject.graphWrapper">
            <summary>
            graphWrapper is a convienience reference to the Diagram's graph wrapper object
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject.shapeElement">
            <summary>
            each VGLayoutObject holds a reference to its counterpart Shape object (Edge, Node, Connector)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject.layoutObject">
            <summary>
            each ShapeElement holds a reference to its counterpart VGLayoutObject object (VGEdge, VGNode, VGConnector)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper)">
            <summary>
            Used to construct an empty graph layout object and hook it to its graph wrapper
            </summary>
            <param name="graphWrapper"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGLayoutObject)">
            <summary>
            Used to construct a graph layout object and hook it to both its graph wrapper and
            grap wrapper counterpart VGLayoutObject
            </summary>
            <param name="graphWrapper">the Graph Wrapper</param>
            <param name="shape">the shape for this Graph Layout Object</param>
            <param name="layoutObject">the layout object</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject.GraphWrapper">
            <summary>
            graphWrapper is a convienience reference to the Diagram's graph wrapper object
            or the shape's graph wrapper object (if part of a hierarchy).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject.LayoutObject">
            <summary>
            returns the VGLayoutObject interface to the counterpart object inside the Graph Wrapper
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject.ShapeElement">
            <summary>
            Get the Shape Element that this GraphLayoutObject represents
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject.Visible">
            <summary>
            Sets the visibility flag for the layout object.  Determines whether it 
            is returned in the hit test list.
            </summary>
            <remarks>
            This property has no effect on routing or layout
            Take care to select the correct property, Visible or Invisible
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject.Invisible">
            <summary>
            Sets the invisibility flag for the layout object.  Determines whether it
            is routed around, layed out.
            </summary>
            <remarks>
            Take care to select the correct property, Visible or Invisible
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject.Select">
            <summary>
            Selects this GraphObjectLayout.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge">
            <summary>
            GraphEdge is the wrapper class of VGEdge class defined Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.DLL
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper,Microsoft.VisualStudio.Modeling.Diagrams.LinkShape,Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGEdge)">
            <summary>
            GraphEdge Constructor
            </summary>
            <param name="graphWrapper"></param>
            <param name="edge"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.Edge">
            <summary>
            Gets the VGEdge object maintained in this wrapper class
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.FromNode">
            <summary>
            Gets the GraphNode which plays the "from node" connection to the edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.ToNode">
            <summary>
            Gets the GraphNode which plays the "to node" connection to the edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.LinkShape">
            <summary>
            Get the LinkShape object that this GraphEdge refers to
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.RoutingStyle">
            <summary>
            Gets/Sets the routing style.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.RouteJumpType">
            <summary>
            Gets/Sets the line jump style.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.UserFixed">
            <summary>
            Gets/sets the edge's userFixed flag.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.FixedFrom">
            <summary>
            Gets/sets the edge from point's userFixed flag.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.FixedTo">
            <summary>
            Gets/sets the edge to point's userFixed flag.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.FromEndPoint">
            <summary>
            Gets/sets the edge's from point.
            </summary>
            <value>PointD</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.ToEndPoint">
            <summary>
            Gets/sets the edge's to point.
            </summary>
            <value>PointD</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.EdgePoints">
            <summary>
            Gets the route path points for this edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.EdgePointsNoJumps">
            <summary>
            Gets the route path points for this edge without any jumps in it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.IsPort(Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConnectionType)">
            <summary>
            Determine whether the from or to side of this edge is attached to a Port
            or directly to a Node.
            </summary>
            <param name="fromTo">Which end to report on</param>
            <returns>true means it attaches to a Port</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.Connect(Microsoft.VisualStudio.Modeling.Diagrams.GraphNode,Microsoft.VisualStudio.Modeling.Diagrams.GraphNode,Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGRoutingStyle,System.Boolean)">
            <summary>
            Connects the edge with the from and to graph nodes with the specified routing style.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.RipUp">
            <summary>
            RipUp the routing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.NeedsReroute">
            <summary>
            Indicate this edge needs rerouting
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.Disconnect">
            <summary>
            Disconnect the connected nodes from the fully connected edge.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.ToString">
            <summary>
            Provides the human-readable information about this GraphEdge object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.CollectEdgePoints(Microsoft.VisualStudio.Modeling.Diagrams.EdgePoint[]@,System.Boolean)">
            <summary>
            Collects the points from edge which describes this route path.
            </summary>
            <param name="edgePointArray"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.SetPointsEx(Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGGraphPoints)">
            <summary>
            push the points array into the graph object
            </summary>
            <param name="points">points array</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.SetFixed">
            <summary>
            Set this edge's userFixed override flags
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.SetPoints(Microsoft.VisualStudio.Modeling.Diagrams.EdgePointCollection)">
            <summary>
            Set this edge's points into the graph object
            </summary>
            <param name="edgePointArray"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.IsEdgeFullyConnected">
            <summary>
            Return true if the edge is fully connected to a "from node" and a "to node".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.IsEdgeAvailable">
            <summary>
            Makes sure the the edge is safe
            See Edge property - it throws exceptions when the LayoutObject is not a VGEdge (or null)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.Remove(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Remove this GraphEdge object from the Graph
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.SetEndPoint(Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Boolean)">
            <summary>
            Set the FROM or TO end point
            </summary>
            <param name="newPoint">New point to set</param>
            <param name="isStart">true: from point</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge.RouteJIT(Microsoft.VisualStudio.Modeling.Diagrams.PointD,System.Boolean)">
            <summary>
            Do a just-in-time route.  This is the minimal route and does not
            necessarily equal the final route exactly.  It is used for ghosting purposes.
            Note this will not put items such as crossed lines into the recorder.
            </summary>
            <param name="newPoint">New from/to endpoint location</param>
            <param name="isStart">true: from point</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode">
            <summary>
            GraphNode is the wrapper class of VGNode class defined VSGraph.DLL
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.fromNodeRoleEdges">
            <summary>
            cache an array list of the edges where this node plays a "From" role
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.toNodeRoleEdges">
            <summary>
            cache an array list of the edges where this node plays a "To" role
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper,Microsoft.VisualStudio.Modeling.Diagrams.NodeShape,Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGNode)">
            <summary>
            GraphNode constuctor creates a graph node and connects it to is counterpart node and graph wrapper
            classes
            </summary>
            <param name="graphWrapper"></param>
            <param name="node"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.FromNodeRoleEdges">
            <summary>
            Gets an array of edges where this node plays a From role.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.ToNodeRoleEdges">
            <summary>
            Gets an array of edges where this node plays a To role.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.Node">
            <summary>
            Gets the VGNode object which is wrapped by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.Bounds">
            <summary>
            returns the bounding rectangle of this node
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.Remove(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Remove this GraphNode object from the Graph
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.AddFromNodeRoleEdge(Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge)">
            <summary>
            Add the edge into the FromNodeRole collection
            </summary>
            <param name="grfEdge"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.RemovedFromNodeRoleEdge(Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge)">
            <summary>
            Remove the edge into the FromNodeRole collection
            </summary>
            <param name="grfEdge"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.AddToNodeRoleEdge(Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge)">
            <summary>
            Add the edge into the ToNodeRole collection
            </summary>
            <param name="grfEdge"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.RemovedToNodeRoleEdge(Microsoft.VisualStudio.Modeling.Diagrams.GraphEdge)">
            <summary>
            Remove the edge into the ToNodeRole collection
            </summary>
            <param name="grfEdge"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphNode.SetFixedFlags(Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGFixedCode)">
            <summary>
            Sets the FixedFlags for this graph node.
            </summary>
            <param name="flags">Flags to set.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper">
            <summary>
            Summary description for GraphWrapper.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.graph">
            <summary>
            keep a reference back to the VSGraph.Graph class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.#ctor">
            <summary>
            hide the default constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.#ctor(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            GraphWrapper constructor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.Graph">
            <summary>
            Gets the VSGraph graph class object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.RoutingStyle">
            <summary>
            Gets/Sets the routing style for the graph.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.RouteJumpType">
            <summary>
            Gets/Sets the line jump style for the graph.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.LineAffinityDefault">
            <summary>
            Gets or sets a value indicating whether line affinity is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.LineAdjustAwayDefault">
            <summary>
            Gets or sets a value indicating whether line adjustment (away from other lines) is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.LineToLineClearance">
            <summary>
            Gets or sets the line-to-line clearance in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.LineToNodeClearance">
            <summary>
            Gets or sets the line-to-node clearance in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.NodeToNodeClearance">
            <summary>
            Gets or sets the node-to-node clearance in world units.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.Visible">
            <summary>
            Gets/sets the visibility flag for the Graph.  Determines whether or not its children
            are returned in the hit test list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.Disposed">
            <summary>
            Indicates whether this object has been disposed
            </summary>
            <value>true if object has been disposed</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.Dispose">
            <summary>
            implement the IDisposable.Dispose() method
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.Dispose(System.Boolean)">
            <summary>
            Internal class to release all the resource relates to this class
            </summary>
            <param name="disposing">false if finalizing</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.ShapeList(System.Collections.ArrayList)">
            <summary>
            convert the ArrayList full of LayoutObjects into an ArrayList of ShapeElements sorted in Z-Order
            </summary>
            <param name="VGLayoutObjectList"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.ShapeList(System.Collections.ArrayList,System.Collections.IComparer)">
            <summary>
            convert the ArrayList full of LayoutObjects into an ArrayList of ShapeElements sorted using
            the given iComparer interface
            </summary>
            <param name="VGLayoutObjectList"></param>
            <param name="iComparer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.ShapeList(System.Collections.ArrayList,System.Collections.IComparer,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            convert the ArrayList full of LayoutObjects into an ArrayList of ShapeElements sorted using
            the given iComparer interface, and filtering out ShapeElements whose parent != parentShape
            </summary>
            <param name="VGLayoutObjectList"></param>
            <param name="iComparer"></param>
            <param name="parentShape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.Remove(Microsoft.VisualStudio.Modeling.Diagrams.GraphLayoutObject)">
            <summary>
            Remove a VGNode object from the VSGraph
            </summary>
            <param name="node">the node to remove</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.Remove(Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGNode)">
            <summary>
            Remove a VGNode object from the VSGraph
            </summary>
            <param name="node">the node to remove</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.Remove(Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGEdge)">
            <summary>
            Remove a VGEdge object from the VSGraph
            </summary>
            <param name="edge">the edge to remove</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.Reroute">
            <summary>
            Reroute will route edges which has been ripped up or by node size/position changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.DeselectAll">
            <summary>
            Deselects all the edges and nodes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SetLineToLineClearance(System.Double,System.Double)">
            <summary>
            Sets the line to line clearance
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SetLineToNodeClearance(System.Double,System.Double)">
            <summary>
            Sets the line to node clearance
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SetNodeToNodeClearance(System.Double,System.Double)">
            <summary>
            Sets the node to node clearance
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.StartRecorder">
            <summary>
            Starts the graph recorder, it records all the changes in the graph.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.StopRecorder">
            <summary>
            Stops the graph recorder,
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.PlacementStyle">
            <summary>
            Gets/Sets the global level graph placement style.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.ToString">
            <summary>
            Provides the human-readable information about this GraphWrapper object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.FindFreeArea(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Find a free area in the shape or diagram's graph.
            </summary>
            <param name="aimForX">initial center X to aim for</param>
            <param name="aimForY">initial center Y to aim for</param>
            <param name="averageConnectivityX">connectivity X</param>
            <param name="averageConnectivityY">connectivity Y</param>
            <param name="spacingX">grid X to use for increment</param>
            <param name="spacingY">grid to use for increment</param>
            <param name="areaDeltaX">delta X of the area to find</param>
            <param name="areaDeltaY">delta X of the area to find</param>
            <param name="boundsX0">bound LEFT not to exceed when searching (very large - no bounds)</param>
            <param name="boundsY0">bound BOTTOM not to exceed when searching (very large - no bounds)</param>
            <param name="boundsX1">bound RIGHT not to exceed when searching (very large - no bounds)</param>
            <param name="boundsY1">bound TOP not to exceed when searching (very large - no bounds)</param>
            <returns>Center position of free area found</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.HitTest(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD[],System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.HitTest(System.Double,System.Double,System.Double,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.HitTest(Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,System.Boolean,System.Boolean)" -->
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.FoldToShape(Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGLayoutObject,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Boolean@,Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGLayoutObject)">
            <summary>
            Implement Fold to ShapeElement for the Graph Object to call back into for folding a link onto the edge
            of a ShapeElement.  All coordinates are in absolute diagram world coordinates.
            </summary>
            <param name="layoutObject">Corresponding layout object of the ShapeElement being questioned</param>
            <param name="shapeX">X coordinate of the ShapeElement</param>
            <param name="shapeY">Y coordinate of the ShapeElement</param>
            <param name="pointX">X coordinate of the potential fold point</param>
            <param name="pointY">Y coordinate of the potential fold point</param>
            <param name="vectorX">X coordinate of the vector point</param>
            <param name="vectorY">Y coordinate of the vector point</param>
            <param name="foldX">(out) X coordinate of the resultant point</param>
            <param name="foldY">(out) X coordinate of the resultant point</param>
            <param name="found">(out) true if found, false if not</param>
            <param name="layoutObjectAtOtherEnd">the object that layoutObject is connecting to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.GetDisplayOrder(Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGLayoutObject)">
            <summary>
            Implement a callback to return the z order for the ShapeElement whose Id is shpID
            </summary>
            <param name="shpID">Id of the shape in question</param>
            <returns>Z order of the shape</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialDirection">
            <summary>
            Defines an enumeration for the direction of spatial queries
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.NumBands">
            <summary>
            This logically divides the design into 6 bands either vertically or horizontally
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialQuery(Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialDirection,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            This is the worker function that performs a spatial query for the next ShapeElement that is a given
            direction from the given ShapeElement
            </summary>
            <param name="direction">The direction of the search.</param>
            <param name="currentShape">
            Shape from which to start the search. 
            (The currentShape will not be included in the search.) 
            If null, then search begins with the first or last child of the parentShape.
            </param>
            <param name="parentShape">Parent shape of the currentShape. Cannot be null.</param>
            <returns>The ShapeElement.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialTopLeftMostChild(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Finds the child ShapeElement that is spatially the most top-left.
            </summary>
            <param name="parentShape">The parent shape.</param>
            <returns>The first child ShapeElement that is spatially the most top-left.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialBottomRightMostChild(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            Finds the child ShapeElement that is spatially the most bottom-right.
            </summary>
            <param name="parentShape">The parent shape.</param>
            <returns>The child ShapeElement that is spatially the most bottom-right.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialUp(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            find the next ShapeElement that is spatially 'up' from this ShapeElement
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialDown(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            find the next ShapeElement that is spatially 'down' from this ShapeElement
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialLeft(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            find the next ShapeElement that is spatially 'left' from this ShapeElement
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialRight(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            find the next ShapeElement that is spatially 'right' from this ShapeElement
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialPrevious(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            find the next ShapeElement that is spatially 'previous' from this ShapeElement.  This is equivalent to
            SpatialLeft()
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialNext(Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement)">
            <summary>
            find the next ShapeElement that is spatially 'next' from this ShapeElement.  This is equivalent to
            SpatialRight()
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.GetNextShapeInDirection(Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialDirection,System.Collections.ArrayList,Microsoft.VisualStudio.Modeling.Diagrams.ShapeElement,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD)">
            <summary>
            internal helper that grabs the next ShapeElement in the shapeList that is spatially next
            in the given band according to the given direction
            </summary>
            <param name="direction"></param>
            <param name="shapeList"></param>
            <param name="shape"></param>
            <param name="band"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.GetBandNumber(Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialDirection,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,Microsoft.VisualStudio.Modeling.Diagrams.PointD)">
            <summary>
            Calculate which band a particular test point lies within
            </summary>
            <param name="direction"></param>
            <param name="rectDiagram"></param>
            <param name="testPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.GetBand(Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialDirection,Microsoft.VisualStudio.Modeling.Diagrams.RectangleD,System.Int32)">
            <summary>
            Calculate the banding rectangle of the band whose number is bandNumber given the direction
            that we will query
            </summary>
            <param name="direction"></param>
            <param name="rectDiagram"></param>
            <param name="bandNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialComparers(Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialDirection)">
            <summary>
            returns the appropriate spatial comparer object for a given direction
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialUpComparer">
            <summary>
            implement IComparer for an 'up' spatial query
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialDownComparer">
            <summary>
            implement IComparer for a 'down' spatial query
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialLeftComparer">
            <summary>
            implement IComparer for a 'left' spatial query
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.SpatialRightComparer">
            <summary>
            implement IComparer for a 'right' spatial query
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphWrapper.GraphSite">
            <summary>
            Implement callback object for IGraphSite
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.AmbientFontHelper">
            <summary>
            Used to help retriving the designer font
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.AmbientFontHelper.DefaultFont">
            <summary>
            The default font in case the service is unavailable
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AmbientFontHelper.RegisterStyleSetForFontChange(Microsoft.VisualStudio.Modeling.Diagrams.StyleSet)">
            <summary>
            register style set for font change notification
            </summary>
            <param name="styleSet"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AmbientFontHelper.ResetStyleSetFonts">
            <summary>
            Resets fonts on all the registered style sets 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AmbientFontHelper.GetDesignerFont(System.IServiceProvider)">
            <summary>
            returns the font for the designer
            </summary>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AmbientFontHelper.SafeCreateFont(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)">
            <summary>
            Creates the font using the following strategy if the style is supported by the font family - uses that style
            otherwise uses the following priority list: FontStyle.Regular, FontStyle.Italic, FontStyle.Bold, FontStyle.Underline, FontStyle.Strikeout
            </summary>
            <remarks>If regular, bold, italic are not available have to try get the funky fonts (underline and strikeout)</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AmbientFontHelper.SafeCreateFont(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)">
            <summary>
            Creates the font using the following strategy if the style is supported by the font family - uses that style
            otherwise uses the following priority list: FontStyle.Regular, FontStyle.Italic, FontStyle.Bold, FontStyle.Underline, FontStyle.Strikeout
            </summary>
            <remarks>If regular, bold, italic are not available have to try get the funky fonts (underline and strikeout)</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AmbientFontHelper.GetSupportStyle(System.Drawing.FontFamily,System.Drawing.FontStyle)">
            <summary>
            Returns the supported font style. First tries the prefered and if not supported tries ALL the others until one found
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.AmbientFontHelper.GetAlternateSupportStyle(System.Drawing.FontFamily,System.Drawing.FontStyle)">
            <summary>
            Returns a supported style from the fontFamily.
            The returned supported style is guaranteed to not equal the 'styleToBeAvoided' param
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.IAmbientFontProvider">
            <summary>
            The principal worker interface for the SAmbientFontProvider service
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.IAmbientFontProvider.GetDesignerFont">
            <summary>
            Designer font retrival
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.IContextMenuHost">
            <summary>
            Context menu host contract
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IContextMenuHost.ContextMenuXPosition">
            <summary>
            The context menu X position
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IContextMenuHost.ContextMenuYPosition">
            <summary>
            The context menu Y position
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.Diagrams.IContextMenuHost.IsContextMenuShowing">
            <summary>
            Context menu is showing or not
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.StoreDiagramMappingData">
            <summary>
            This class is used to hold diagram related mapping auxiliary data for
            internal use by the design surface for a store.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StoreDiagramMappingData.LogParentAdded(Microsoft.VisualStudio.Modeling.ElementAddedEventArgs)">
            <summary>
            Called when a ShapeElement is related to its parent shape
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.StoreDiagramMappingData.LogParentRemoved(Microsoft.VisualStudio.Modeling.ElementDeletedEventArgs)">
            <summary>
            Called when a ShapeElement is unrelated from its parent shape.
            </summary>
            <param name="e">
            An ElementDeletedEventArgs for the removal 
            of a ParentShapeHasRelativeChildShapes or 
            ParentShapeContainsNestedChildShapes element link.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants">
            <summary>
            Miscellaneous constants used by the graph layout engine
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants.FuzzReal">
            <summary>
            Delta value used for floating point comparisons where values are really supposed to be equal,
            i.e. approximately the smallest difference representable as a double
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants.FuzzGeneral">
            <summary>
            Tolerance value used for floating point comparisons where values are considered equal within normal tolerance,
            i.e. to within nine decimal digits
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants.FuzzDistance">
            <summary>
            Delta value used for floating point comparisons of gemoetric values
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants.FuzzDegrees">
            <summary>
            Tolerance value used for floating point comparisons of angles measured in degrees
            </summary>
            <remarks>One arc second in degrees</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants.FuzzRadians">
            <summary>
            Tolerance value used for floating point comparisons of angles measured in radians
            </summary>
            <remarks>One arc second in redians</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants.FuzzEqual(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether two floating point values are considered equal within a specified tolerance
            </summary>
            <param name="first">first value to compare</param>
            <param name="second">second value to compare</param>
            <param name="fuzz">tolerance - must be positive</param>
            <returns>true if the first and second values differ by no more than the fuzz value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants.FuzzZero(System.Double,System.Double)">
            <summary>
            Determines whether a floating point value should be considered equal to zero within a specified tolerance
            </summary>
            <param name="value">value to compare with zero</param>
            <param name="fuzz">tolerance - must be positive</param>
            <returns>true if the value differs by no more than the fuzz value from zero</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants.PI">
            <summary>
            The approximation of PI used in the layout engine
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants.LargeReal">
            <summary>
            About the largest scale that can generally produce math good results
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants.LargeGeneral">
            <summary>
            Very large generally useful number for size
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Modeling.Diagrams.GraphObject.VGConstants.LargeDistance">
            <summary>
            Large distance (e.g. delta x/y)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.CriticalException.DisableExceptionFilter">
            <summary>
            	Gets whether exception filtering is disabled base on registry settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.CriticalException.IsCriticalException(System.Exception)">
            <summary>
            	Gets whether exception is a critical one and can't be ignored with corrupting
            	AppDomain state.
            </summary>
            <param name="ex">Exception to test.</param>
            <returns>True if exception should not be swallowed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.CriticalException.ThrowOrShow(System.IServiceProvider,System.Exception)">
            <summary>
            	Shows non-critical exceptions to the user and returns false or
            	returns true for critical exceptions.
            </summary>
            <param name="serviceProvider">Service provider to use to display error message.</param>
            <param name="ex">Exception to handle.</param>
            <returns>True if exception is critical and can't be ignored.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Modeling.HashCodeUtility">
            <summary>
            Utility to calculate CRC values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Modeling.HashCodeUtility.Value">
            <summary>
            Gets the value of the CRC that has been accumulated up to this point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.HashCodeUtility.Add(System.String)">
            <summary>
            Accumulates a CRC on a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.HashCodeUtility.Add(System.Single)">
            <summary>
            Accumulates a CRC on a 32 bit float.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.HashCodeUtility.Add(System.Int32)">
            <summary>
            Accumulates a CRC on a 32 bit Int32.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.HashCodeUtility.Add(System.Char)">
            <summary>
            Accumulates a CRC on a 16 bit Char.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Modeling.HashCodeUtility.Add(System.Guid)">
            <summary>
            Accumulates a CRC on a Guid.
            </summary>
        </member>
    </members>
</doc>
