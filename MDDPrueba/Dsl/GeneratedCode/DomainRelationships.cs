//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace IPS.NodosTelefonia
{
	/// <summary>
	/// DomainRelationship TapizNodosHasNodo
	/// Description for IPS.NodosTelefonia.TapizNodosHasNodo
	/// </summary>
	[DslDesign::DisplayNameResource("IPS.NodosTelefonia.TapizNodosHasNodo.DisplayName", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("IPS.NodosTelefonia.TapizNodosHasNodo.Description", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4ee35a6a-cae8-4ec1-9b7b-c5f603b208c8")]
	public partial class TapizNodosHasNodo : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizNodosHasNodo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ee35a6a, 0xcae8, 0x4ec1, 0x9b, 0x7b, 0xc5, 0xf6, 0x03, 0xb2, 0x08, 0xc8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizNodosHasNodo link in the same Partition as the given TapizNodos
		/// </summary>
		/// <param name="source">TapizNodos to use as the source of the relationship.</param>
		/// <param name="target">Nodo to use as the target of the relationship.</param>
		public TapizNodosHasNodo(TapizNodos source, Nodo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizNodosHasNodo.TapizNodosDomainRoleId, source), new DslModeling::RoleAssignment(TapizNodosHasNodo.NodoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizNodosHasNodo(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizNodosHasNodo(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizNodosHasNodo(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizNodosHasNodo(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TapizNodos domain role code
		
		/// <summary>
		/// TapizNodos domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizNodosDomainRoleId = new global::System.Guid(0x1f040405, 0x8701, 0x4795, 0x8b, 0xdf, 0x74, 0x8e, 0x53, 0x74, 0x29, 0x8c);
		
		/// <summary>
		/// DomainRole TapizNodos
		/// Description for IPS.NodosTelefonia.TapizNodosHasNodo.TapizNodos
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.NodosTelefonia.TapizNodosHasNodo/TapizNodos.DisplayName", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.NodosTelefonia.TapizNodosHasNodo/TapizNodos.Description", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Nodoes", PropertyDisplayNameKey="IPS.NodosTelefonia.TapizNodosHasNodo/TapizNodos.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1f040405-8701-4795-8bdf-748e5374298c")]
		public virtual TapizNodos TapizNodos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TapizNodos)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizNodosDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizNodosDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TapizNodos of a Nodo
		/// <summary>
		/// Gets TapizNodos.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TapizNodos GetTapizNodos(Nodo element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NodoDomainRoleId) as TapizNodos;
		}
		
		/// <summary>
		/// Sets TapizNodos.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapizNodos(Nodo element, TapizNodos newTapizNodos)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NodoDomainRoleId, newTapizNodos);
		}
		#endregion
		#region Nodo domain role code
		
		/// <summary>
		/// Nodo domain role Id.
		/// </summary>
		public static readonly global::System.Guid NodoDomainRoleId = new global::System.Guid(0x8d4661ec, 0x450a, 0x42ac, 0x91, 0x84, 0xa9, 0x9f, 0x68, 0xe0, 0xf1, 0x20);
		
		/// <summary>
		/// DomainRole Nodo
		/// Description for IPS.NodosTelefonia.TapizNodosHasNodo.Nodo
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.NodosTelefonia.TapizNodosHasNodo/Nodo.DisplayName", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.NodosTelefonia.TapizNodosHasNodo/Nodo.Description", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TapizNodos", PropertyDisplayNameKey="IPS.NodosTelefonia.TapizNodosHasNodo/Nodo.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8d4661ec-450a-42ac-9184-a99f68e0f120")]
		public virtual Nodo Nodo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Nodo)DslModeling::DomainRoleInfo.GetRolePlayer(this, NodoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NodoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Nodoes of a TapizNodos
		/// <summary>
		/// Gets a list of Nodoes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Nodo> GetNodoes(TapizNodos element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Nodo>, Nodo>(element, TapizNodosDomainRoleId);
		}
		#endregion
		#region TapizNodos link accessor
		/// <summary>
		/// Get the list of TapizNodosHasNodo links to a TapizNodos.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.NodosTelefonia.TapizNodosHasNodo> GetLinksToNodoes ( global::IPS.NodosTelefonia.TapizNodos tapizNodosInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.NodosTelefonia.TapizNodosHasNodo>(tapizNodosInstance, global::IPS.NodosTelefonia.TapizNodosHasNodo.TapizNodosDomainRoleId);
		}
		#endregion
		#region Nodo link accessor
		/// <summary>
		/// Get the TapizNodosHasNodo link to a Nodo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.NodosTelefonia.TapizNodosHasNodo GetLinkToTapizNodos (global::IPS.NodosTelefonia.Nodo nodoInstance)
		{
			global::System.Collections.Generic.IList<global::IPS.NodosTelefonia.TapizNodosHasNodo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.NodosTelefonia.TapizNodosHasNodo>(nodoInstance, global::IPS.NodosTelefonia.TapizNodosHasNodo.NodoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Nodo not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizNodosHasNodo instance accessors
		
		/// <summary>
		/// Get any TapizNodosHasNodo links between a given TapizNodos and a Nodo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::IPS.NodosTelefonia.TapizNodosHasNodo> GetLinks( global::IPS.NodosTelefonia.TapizNodos source, global::IPS.NodosTelefonia.Nodo target )
		{
			global::System.Collections.Generic.List<global::IPS.NodosTelefonia.TapizNodosHasNodo> outLinks = new global::System.Collections.Generic.List<global::IPS.NodosTelefonia.TapizNodosHasNodo>();
			global::System.Collections.Generic.IList<global::IPS.NodosTelefonia.TapizNodosHasNodo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.NodosTelefonia.TapizNodosHasNodo>(source, global::IPS.NodosTelefonia.TapizNodosHasNodo.TapizNodosDomainRoleId);
			foreach ( global::IPS.NodosTelefonia.TapizNodosHasNodo link in links )
			{
				if ( target.Equals(link.Nodo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizNodosHasNodo link between a given TapizNodosand a Nodo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::IPS.NodosTelefonia.TapizNodosHasNodo GetLink( global::IPS.NodosTelefonia.TapizNodos source, global::IPS.NodosTelefonia.Nodo target )
		{
			global::System.Collections.Generic.IList<global::IPS.NodosTelefonia.TapizNodosHasNodo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::IPS.NodosTelefonia.TapizNodosHasNodo>(source, global::IPS.NodosTelefonia.TapizNodosHasNodo.TapizNodosDomainRoleId);
			foreach ( global::IPS.NodosTelefonia.TapizNodosHasNodo link in links )
			{
				if ( target.Equals(link.Nodo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
