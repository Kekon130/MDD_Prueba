//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace IPS.NodosTelefonia
{
	/// <summary>
	/// DomainClass TapizNodos
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("IPS.NodosTelefonia.TapizNodos.DisplayName", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("IPS.NodosTelefonia.TapizNodos.Description", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("71ef30b1-5261-4eba-b2c9-7e6f6c683900")]
	public partial class TapizNodos : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TapizNodos domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x71ef30b1, 0x5261, 0x4eba, 0xb2, 0xc9, 0x7e, 0x6f, 0x6c, 0x68, 0x39, 0x00);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TapizNodos(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TapizNodos(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region solucionNodos domain property code
		
		/// <summary>
		/// solucionNodos domain property Id.
		/// </summary>
		public static readonly global::System.Guid solucionNodosDomainPropertyId = new global::System.Guid(0x40dc2f08, 0x43b7, 0x40ec, 0xbd, 0xde, 0x71, 0x00, 0x9c, 0x76, 0xe2, 0x7d);
		
		/// <summary>
		/// Storage for solucionNodos
		/// </summary>
		private global::System.String solucionNodosPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of solucionNodos domain property.
		/// Description for IPS.NodosTelefonia.TapizNodos.Solucion Nodos
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.NodosTelefonia.TapizNodos/solucionNodos.DisplayName", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.NodosTelefonia.TapizNodos/solucionNodos.Description", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("40dc2f08-43b7-40ec-bdde-71009c76e27d")]
		public global::System.String solucionNodos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return solucionNodosPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				solucionNodosPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TapizNodos.solucionNodos domain property.
		/// </summary>
		internal sealed partial class solucionNodosPropertyHandler : DslModeling::DomainPropertyValueHandler<TapizNodos, global::System.String>
		{
			private solucionNodosPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TapizNodos.solucionNodos domain property value handler.
			/// </summary>
			public static readonly solucionNodosPropertyHandler Instance = new solucionNodosPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TapizNodos.solucionNodos domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return solucionNodosDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TapizNodos element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.solucionNodosPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TapizNodos element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.solucionNodosPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Nodoes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Nodoes.
		/// Description for IPS.NodosTelefonia.TapizNodosHasNodo.TapizNodos
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Nodo> Nodoes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Nodo>, Nodo>(global::IPS.NodosTelefonia.TapizNodosHasNodo.TapizNodosDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::IPS.NodosTelefonia.Nodo.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::IPS.NodosTelefonia.Nodo sourceNodo1 = sourceElement as global::IPS.NodosTelefonia.Nodo;
			if (sourceNodo1 != null)
			{
				// Create link for path TapizNodosHasNodo.Nodoes
				this.Nodoes.Add(sourceNodo1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::IPS.NodosTelefonia.Nodo sourceNodo1 = sourceElement as global::IPS.NodosTelefonia.Nodo;
			if (sourceNodo1 != null)
			{
				// Delete link for path TapizNodosHasNodo.Nodoes
				
				foreach (DslModeling::ElementLink link in global::IPS.NodosTelefonia.TapizNodosHasNodo.GetLinks((global::IPS.NodosTelefonia.TapizNodos)this, sourceNodo1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::IPS.NodosTelefonia.TapizNodosHasNodo.TapizNodosDomainRoleId, global::IPS.NodosTelefonia.TapizNodosHasNodo.NodoDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace IPS.NodosTelefonia
{
	/// <summary>
	/// DomainClass Nodo
	/// Description for IPS.NodosTelefonia.Nodo
	/// </summary>
	[DslDesign::DisplayNameResource("IPS.NodosTelefonia.Nodo.DisplayName", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("IPS.NodosTelefonia.Nodo.Description", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("05a54fc6-586c-4659-8584-cc7ee0e8a542")]
	public abstract partial class Nodo : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Nodo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x05a54fc6, 0x586c, 0x4659, 0x85, 0x84, 0xcc, 0x7e, 0xe0, 0xe8, 0xa5, 0x42);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Nodo(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region nombre domain property code
		
		/// <summary>
		/// nombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid nombreDomainPropertyId = new global::System.Guid(0x10e4158a, 0x2100, 0x46f3, 0xb5, 0x67, 0x2c, 0xe9, 0xc6, 0xdb, 0x0a, 0x95);
		
		/// <summary>
		/// Storage for nombre
		/// </summary>
		private global::System.String nombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of nombre domain property.
		/// Description for IPS.NodosTelefonia.Nodo.Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("IPS.NodosTelefonia.Nodo/nombre.DisplayName", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("IPS.NodosTelefonia.Nodo/nombre.Description", typeof(global::IPS.NodosTelefonia.NodosTelefoniaDomainModel), "IPS.NodosTelefonia.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("10e4158a-2100-46f3-b567-2ce9c6db0a95")]
		public global::System.String nombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				nombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Nodo.nombre domain property.
		/// </summary>
		internal sealed partial class nombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Nodo, global::System.String>
		{
			private nombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Nodo.nombre domain property value handler.
			/// </summary>
			public static readonly nombrePropertyHandler Instance = new nombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Nodo.nombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return nombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Nodo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Nodo element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TapizNodos opposite domain role accessor
		/// <summary>
		/// Gets or sets TapizNodos.
		/// Description for IPS.NodosTelefonia.TapizNodosHasNodo.Nodo
		/// </summary>
		public virtual TapizNodos TapizNodos
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::IPS.NodosTelefonia.TapizNodosHasNodo.NodoDomainRoleId) as TapizNodos;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::IPS.NodosTelefonia.TapizNodosHasNodo.NodoDomainRoleId, value);
			}
		}
		#endregion
	}
}
